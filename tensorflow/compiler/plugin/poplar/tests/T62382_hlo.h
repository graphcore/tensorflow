/* Copyright 2022 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#ifndef TENSORFLOW_COMPILER_PLUGIN_POPLAR_TESTS_T62382_HLO_H_
#define TENSORFLOW_COMPILER_PLUGIN_POPLAR_TESTS_T62382_HLO_H_

// Generated from 33e2f5c8a
// POPLARSDKVIEW/public_examples/applications/tensorflow2/image_classification
//
// python3 train.py --pipeline-splits conv2d_1 --gradient-accumulation 4
// --precision 16.3
//
// hlo dump from start of sharding_pass.cc with invalid attributes stripped out.
const char* T62382_hlo = R"(
HloModule a_inference_pipeline_function_1751__XlaMustCompile_true_config_proto___n_007_n_0...02_001_000__executor_type____.1146

%sum.442 (x.443: f32[], y.444: f32[]) -> f32[] {
  %x.443 = f32[] parameter(0)
  %y.444 = f32[] parameter(1)
  ROOT %add.445 = f32[] add(f32[] %x.443, f32[] %y.444)
}

%All_1-reduction.446 (x.447: pred[], y.448: pred[]) -> pred[] {
  %x.447 = pred[] parameter(0)
  %y.448 = pred[] parameter(1)
  ROOT %and.449 = pred[] and(pred[] %x.447, pred[] %y.448)
}

%sum.450 (x.451: f32[], y.452: f32[]) -> f32[] {
  %x.451 = f32[] parameter(0)
  %y.452 = f32[] parameter(1)
  ROOT %add.453 = f32[] add(f32[] %x.451, f32[] %y.452)
}

%All_2-reduction.454 (x.455: pred[], y.456: pred[]) -> pred[] {
  %x.455 = pred[] parameter(0)
  %y.456 = pred[] parameter(1)
  ROOT %and.457 = pred[] and(pred[] %x.455, pred[] %y.456)
}

%sum.458 (x.459: f32[], y.460: f32[]) -> f32[] {
  %x.459 = f32[] parameter(0)
  %y.460 = f32[] parameter(1)
  ROOT %add.461 = f32[] add(f32[] %x.459, f32[] %y.460)
}

%All_3-reduction.462 (x.463: pred[], y.464: pred[]) -> pred[] {
  %x.463 = pred[] parameter(0)
  %y.464 = pred[] parameter(1)
  ROOT %and.465 = pred[] and(pred[] %x.463, pred[] %y.464)
}

%sum.466 (x.467: f32[], y.468: f32[]) -> f32[] {
  %x.467 = f32[] parameter(0)
  %y.468 = f32[] parameter(1)
  ROOT %add.469 = f32[] add(f32[] %x.467, f32[] %y.468)
}

%All_4-reduction.470 (x.471: pred[], y.472: pred[]) -> pred[] {
  %x.471 = pred[] parameter(0)
  %y.472 = pred[] parameter(1)
  ROOT %and.473 = pred[] and(pred[] %x.471, pred[] %y.472)
}

%sum.474 (x.475: f32[], y.476: f32[]) -> f32[] {
  %x.475 = f32[] parameter(0)
  %y.476 = f32[] parameter(1)
  ROOT %add.477 = f32[] add(f32[] %x.475, f32[] %y.476)
}

%All_5-reduction.478 (x.479: pred[], y.480: pred[]) -> pred[] {
  %x.479 = pred[] parameter(0)
  %y.480 = pred[] parameter(1)
  ROOT %and.481 = pred[] and(pred[] %x.479, pred[] %y.480)
}

%sum.482 (x.483: f32[], y.484: f32[]) -> f32[] {
  %x.483 = f32[] parameter(0)
  %y.484 = f32[] parameter(1)
  ROOT %add.485 = f32[] add(f32[] %x.483, f32[] %y.484)
}

%All-reduction.486 (x.487: pred[], y.488: pred[]) -> pred[] {
  %x.487 = pred[] parameter(0)
  %y.488 = pred[] parameter(1)
  ROOT %and.489 = pred[] and(pred[] %x.487, pred[] %y.488)
}

%cond_cond_cond_true_1582_rearrange_0__.494 (arg_tuple.495: (f32[], pred[], f32[])) -> (pred[], f32[]) {
  %arg_tuple.495 = (f32[], pred[], f32[]) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.497 = pred[] get-tuple-element((f32[], pred[], f32[]) %arg_tuple.495), index=1
  %get-tuple-element.496 = f32[] get-tuple-element((f32[], pred[], f32[]) %arg_tuple.495), index=0, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.501 = (pred[], f32[]) tuple(pred[] %get-tuple-element.497, f32[] %get-tuple-element.496), metadata={op_name="XLA_Retvals"}
}

%cond_cond_cond_false_1583_rearrange_0__.502 (arg_tuple.503: (f32[], pred[], f32[])) -> (pred[], f32[]) {
  %arg_tuple.503 = (f32[], pred[], f32[]) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.505 = pred[] get-tuple-element((f32[], pred[], f32[]) %arg_tuple.503), index=1
  %get-tuple-element.506 = f32[] get-tuple-element((f32[], pred[], f32[]) %arg_tuple.503), index=2, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.509 = (pred[], f32[]) tuple(pred[] %get-tuple-element.505, f32[] %get-tuple-element.506), metadata={op_name="XLA_Retvals"}
}

%cond_cond_true_1574_rearrange_0__.510 (arg_tuple.511: (pred[], f32[], s64[])) -> (pred[], f32[], s64[]) {
  %arg_tuple.511 = (pred[], f32[], s64[]) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.512 = pred[] get-tuple-element((pred[], f32[], s64[]) %arg_tuple.511), index=0
  %constant.517 = f32[] constant(2), metadata={op_type="Mul" op_name="cond/cond/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=342}
  %get-tuple-element.513 = f32[] get-tuple-element((pred[], f32[], s64[]) %arg_tuple.511), index=1
  %multiply.518 = f32[] multiply(f32[] %constant.517, f32[] %get-tuple-element.513), metadata={op_type="Mul" op_name="cond/cond/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=342}
  %is-finite.519 = pred[] is-finite(f32[] %multiply.518), metadata={op_name="cond/cond/IsFinite"}
  %tuple.520 = (f32[], pred[], f32[]) tuple(f32[] %multiply.518, pred[] %is-finite.519, f32[] %get-tuple-element.513), metadata={op_type="If" op_name="cond/cond/cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=195}
  %conditional.521 = (pred[], f32[]) conditional(pred[] %is-finite.519, (f32[], pred[], f32[]) %tuple.520, (f32[], pred[], f32[]) %tuple.520), true_computation=%cond_cond_cond_true_1582_rearrange_0__.494, false_computation=%cond_cond_cond_false_1583_rearrange_0__.502, metadata={op_type="If" op_name="cond/cond/cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=195}
  %get-tuple-element.523 = f32[] get-tuple-element((pred[], f32[]) %conditional.521), index=1, metadata={op_type="If" op_name="cond/cond/cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=195}
  %constant.515 = s64[] constant(0), metadata={op_type="AssignVariableOp" op_name="cond/cond/AssignVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=345}
  ROOT %tuple.528 = (pred[], f32[], s64[]) tuple(pred[] %get-tuple-element.512, f32[] %get-tuple-element.523, s64[] %constant.515), metadata={op_name="XLA_Retvals"}
}

%cond_cond_false_1575_rearrange_0__.529 (arg_tuple.530: (pred[], f32[], s64[])) -> (pred[], f32[], s64[]) {
  %arg_tuple.530 = (pred[], f32[], s64[]) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.531 = pred[] get-tuple-element((pred[], f32[], s64[]) %arg_tuple.530), index=0
  %get-tuple-element.532 = f32[] get-tuple-element((pred[], f32[], s64[]) %arg_tuple.530), index=1, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.533 = s64[] get-tuple-element((pred[], f32[], s64[]) %arg_tuple.530), index=2
  %constant.534 = s64[] constant(1), metadata={op_type="AssignAddVariableOp" op_name="cond/cond/AssignAddVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=350}
  %add.535 = s64[] add(s64[] %get-tuple-element.533, s64[] %constant.534), metadata={op_type="AssignAddVariableOp" op_name="cond/cond/AssignAddVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=350}
  ROOT %tuple.540 = (pred[], f32[], s64[]) tuple(pred[] %get-tuple-element.531, f32[] %get-tuple-element.532, s64[] %add.535), metadata={op_name="XLA_Retvals"}
}

%cond_true_1565_rearrange_0__.541 (arg_tuple.542: (pred[], s64[], f32[])) -> (pred[], s64[], f32[]) {
  %arg_tuple.542 = (pred[], s64[], f32[]) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.544 = s64[] get-tuple-element((pred[], s64[], f32[]) %arg_tuple.542), index=1
  %constant.120 = s64[] constant(1999)
  %compare.30 = pred[] compare(s64[] %get-tuple-element.544, s64[] %constant.120), direction=GE, metadata={op_type="GreaterEqual" op_name="cond/GreaterEqual" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=348}
  %get-tuple-element.545 = f32[] get-tuple-element((pred[], s64[], f32[]) %arg_tuple.542), index=2
  %tuple.552 = (pred[], f32[], s64[]) tuple(pred[] %compare.30, f32[] %get-tuple-element.545, s64[] %get-tuple-element.544), metadata={op_type="If" op_name="cond/cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=350}
  %conditional.553 = (pred[], f32[], s64[]) conditional(pred[] %compare.30, (pred[], f32[], s64[]) %tuple.552, (pred[], f32[], s64[]) %tuple.552), true_computation=%cond_cond_true_1574_rearrange_0__.510, false_computation=%cond_cond_false_1575_rearrange_0__.529, metadata={op_type="If" op_name="cond/cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=350}
  %get-tuple-element.554 = pred[] get-tuple-element((pred[], f32[], s64[]) %conditional.553), index=0, metadata={op_type="If" op_name="cond/cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=350}
  %get-tuple-element.557 = s64[] get-tuple-element((pred[], f32[], s64[]) %conditional.553), index=2, metadata={op_type="If" op_name="cond/cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=350}
  %get-tuple-element.555 = f32[] get-tuple-element((pred[], f32[], s64[]) %conditional.553), index=1, metadata={op_type="If" op_name="cond/cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=350}
  ROOT %tuple.562 = (pred[], s64[], f32[]) tuple(pred[] %get-tuple-element.554, s64[] %get-tuple-element.557, f32[] %get-tuple-element.555), metadata={op_name="XLA_Retvals"}
}

%_pop_op_arithmetic_expression (p.23: f32[], p.24: f32[], p.25: f32[]) -> f32[] {
  %p.23 = f32[] parameter(0)
  %p.24 = f32[] parameter(1)
  %multiply.62.clone = f32[] multiply(f32[] %p.23, f32[] %p.24), metadata={op_type="RealDiv" op_name="cond/truediv" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=356}
  %p.25 = f32[] parameter(2)
  ROOT %maximum.574.clone = f32[] maximum(f32[] %multiply.62.clone, f32[] %p.25), metadata={op_type="Maximum" op_name="cond/Maximum" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=356}
}

%cond_false_1566_rearrange_0__.563 (arg_tuple.564: (pred[], s64[], f32[])) -> (pred[], s64[], f32[]) {
  %arg_tuple.564 = (pred[], s64[], f32[]) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.565 = pred[] get-tuple-element((pred[], s64[], f32[]) %arg_tuple.564), index=0
  %constant.568 = s64[] constant(0), metadata={op_type="AssignVariableOp" op_name="cond/AssignVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=358}
  %get-tuple-element.567 = f32[] get-tuple-element((pred[], s64[], f32[]) %arg_tuple.564), index=2
  %constant.115 = f32[] constant(0.5)
  %constant.573 = f32[] constant(1), metadata={op_type="Maximum" op_name="cond/Maximum" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=356}
  %fusion.8 = f32[] fusion(f32[] %get-tuple-element.567, f32[] %constant.115, f32[] %constant.573), kind=kCustom, calls=%_pop_op_arithmetic_expression
  ROOT %tuple.579 = (pred[], s64[], f32[]) tuple(pred[] %get-tuple-element.565, s64[] %constant.568, f32[] %fusion.8), metadata={op_name="XLA_Retvals"}
}

%_pop_op_arithmetic_expression.1 (p.26: f32[8], p.27: f32[8]) -> f32[8] {
  %p.26 = f32[8]{0} parameter(0)
  %p.27 = f32[8]{0} parameter(1)
  %multiply.624.clone = f32[8]{0} multiply(f32[8]{0} %p.26, f32[8]{0} %p.27), metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_3/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
  ROOT %subtract.625.clone = f32[8]{0} subtract(f32[8]{0} %p.26, f32[8]{0} %multiply.624.clone), metadata={op_type="AssignSubVariableOp" op_name="cond_1/SGDW/SGDW/update_3/AssignSubVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=217}
}

%_pop_op_arithmetic_expression.2 (p.28: f32[4], p.29: f32[4]) -> f32[4] {
  %p.28 = f32[4]{0} parameter(0)
  %p.29 = f32[4]{0} parameter(1)
  %multiply.618.clone = f32[4]{0} multiply(f32[4]{0} %p.28, f32[4]{0} %p.29), metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_1/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
  ROOT %subtract.619.clone = f32[4]{0} subtract(f32[4]{0} %p.28, f32[4]{0} %multiply.618.clone), metadata={op_type="AssignSubVariableOp" op_name="cond_1/SGDW/SGDW/update_1/AssignSubVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=217}
}

%_pop_op_implicit_binary_inplace (arg_0.2: f32[3,3,3,4], arg_1.2: f32[]) -> f32[3,3,3,4] {
  %arg_0.2 = f32[3,3,3,4]{3,2,1,0} parameter(0)
  %arg_1.2 = f32[] parameter(1)
  %broadcast.153 = f32[3,3,3,4]{3,2,1,0} broadcast(f32[] %arg_1.2), dimensions={}, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
  ROOT %multiply.108 = f32[3,3,3,4]{3,2,1,0} multiply(f32[3,3,3,4]{3,2,1,0} %arg_0.2, f32[3,3,3,4]{3,2,1,0} %broadcast.153), metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
}

%_pop_op_implicit_binary_inplace.1 (arg_0.3: f32[1,1,4,8], arg_1.3: f32[]) -> f32[1,1,4,8] {
  %arg_0.3 = f32[1,1,4,8]{3,2,1,0} parameter(0)
  %arg_1.3 = f32[] parameter(1)
  %broadcast.154 = f32[1,1,4,8]{3,2,1,0} broadcast(f32[] %arg_1.3), dimensions={}, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_2/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
  ROOT %multiply.109 = f32[1,1,4,8]{3,2,1,0} multiply(f32[1,1,4,8]{3,2,1,0} %arg_0.3, f32[1,1,4,8]{3,2,1,0} %broadcast.154), metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_2/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
}

%_pop_op_implicit_binary_inplace.2 (arg_0.4: f32[8,10], arg_1.4: f32[]) -> f32[8,10] {
  %arg_0.4 = f32[8,10]{1,0} parameter(0)
  %arg_1.4 = f32[] parameter(1)
  %broadcast.155 = f32[8,10]{1,0} broadcast(f32[] %arg_1.4), dimensions={}, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_4/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
  ROOT %multiply.110 = f32[8,10]{1,0} multiply(f32[8,10]{1,0} %arg_0.4, f32[8,10]{1,0} %broadcast.155), metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_4/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
}

%_pop_op_implicit_binary_inplace.3 (arg_0.5: f32[10], arg_1.5: f32[]) -> f32[10] {
  %arg_0.5 = f32[10]{0} parameter(0)
  %arg_1.5 = f32[] parameter(1)
  %broadcast.158 = f32[10]{0} broadcast(f32[] %arg_1.5), dimensions={}, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_5/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
  ROOT %multiply.111 = f32[10]{0} multiply(f32[10]{0} %arg_0.5, f32[10]{0} %broadcast.158), metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_5/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
}

%cond_1_true_1631_rearrange_0__.580 (arg_tuple.581: (f32[3,3,3,4], f32[4], f32[1,1,4,8], f32[8], f32[8,10], /*index=5*/f32[10], pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4], f32[4], f32[1,1,4,8], f32[8], /*index=15*/f32[8,10], f32[10])) -> (pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4], f32[4], f32[1,1,4,8], f32[8], f32[8,10], /*index=10*/f32[10]) {
  %arg_tuple.581 = (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.588 = pred[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=6
  %get-tuple-element.589 = s64[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=7
  %constant.677 = s64[] constant(1), metadata={op_type="AssignAddVariableOp" op_name="cond_1/SGDW/SGDW/AssignAddVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=725}
  %add.678 = s64[] add(s64[] %get-tuple-element.589, s64[] %constant.677), metadata={op_type="AssignAddVariableOp" op_name="cond_1/SGDW/SGDW/AssignAddVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=725}
  %get-tuple-element.590 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=8
  %constant.601 = f32[] constant(1), metadata={op_type="AssignAddVariableOp" op_name="cond_1/SGDW/AssignAddVariableOp_1" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/schedules/decorators.py" source_line=92}
  %add.610 = f32[] add(f32[] %get-tuple-element.590, f32[] %constant.601), metadata={op_type="AssignAddVariableOp" op_name="cond_1/SGDW/AssignAddVariableOp" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/schedules/decorators.py" source_line=92}
  %get-tuple-element.591 = s32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=9, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.592 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=10
  %add.602 = f32[] add(f32[] %get-tuple-element.592, f32[] %constant.601), metadata={op_type="AssignAddVariableOp" op_name="cond_1/SGDW/AssignAddVariableOp_1" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/schedules/decorators.py" source_line=92}
  %get-tuple-element.593 = f32[3,3,3,4]{3,2,1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=11
  %constant.604 = f32[] constant(0), metadata={op_type="Mul" op_name="cond_1/SGDW/mul_1" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/schedules/lr_schedules.py" source_line=35}
  %multiply.605 = f32[] multiply(f32[] %get-tuple-element.592, f32[] %constant.604), metadata={op_type="Mul" op_name="cond_1/SGDW/mul_1" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/schedules/lr_schedules.py" source_line=35}
  %fusion.20 = f32[3,3,3,4]{3,2,1,0} fusion(f32[3,3,3,4]{3,2,1,0} %get-tuple-element.593, f32[] %multiply.605), kind=kCustom, calls=%_pop_op_implicit_binary_inplace, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %subtract.634 = f32[3,3,3,4]{3,2,1,0} subtract(f32[3,3,3,4]{3,2,1,0} %get-tuple-element.593, f32[3,3,3,4]{3,2,1,0} %fusion.20), metadata={op_type="AssignSubVariableOp" op_name="cond_1/SGDW/SGDW/update/AssignSubVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=217}
  %get-tuple-element.582 = f32[3,3,3,4]{3,2,1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=0, metadata={op_type="RealDiv" op_name="cond_1/SGDW/truediv" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/optimizers/optimizer_factory.py" source_line=65}
  %multiply.613 = f32[] multiply(f32[] %get-tuple-element.590, f32[] %constant.604), metadata={op_type="Mul" op_name="cond_1/SGDW/mul" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/schedules/lr_schedules.py" source_line=35}
  %constant.615 = f32[] constant(0.0004), metadata={op_type="AddV2" op_name="cond_1/SGDW/add" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/schedules/lr_schedules.py" source_line=35}
  %add.616 = f32[] add(f32[] %multiply.613, f32[] %constant.615), metadata={op_type="AddV2" op_name="cond_1/SGDW/add" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/schedules/lr_schedules.py" source_line=35}
  %scaled-inplace-xb-y.5 = f32[3,3,3,4]{3,2,1,0} custom-call(f32[3,3,3,4]{3,2,1,0} %subtract.634, f32[3,3,3,4]{3,2,1,0} %get-tuple-element.582, f32[] %add.616), custom_call_target="ScaledInplaceXbY", metadata={op_type="ResourceApplyGradientDescent" op_name="cond_1/SGDW/SGDW/update/ResourceApplyGradientDescent" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/gradient_descent.py" source_line=145}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"103\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.594 = f32[4]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=12
  %broadcast.617 = f32[4]{0} broadcast(f32[] %multiply.605), dimensions={}, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_1/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
  %fusion.10 = f32[4]{0} fusion(f32[4]{0} %get-tuple-element.594, f32[4]{0} %broadcast.617), kind=kCustom, calls=%_pop_op_arithmetic_expression.2
  %get-tuple-element.583 = f32[4]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=1, metadata={op_type="RealDiv" op_name="cond_1/SGDW/truediv_1" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/optimizers/optimizer_factory.py" source_line=65}
  %scaled-inplace-xb-y.4 = f32[4]{0} custom-call(f32[4]{0} %fusion.10, f32[4]{0} %get-tuple-element.583, f32[] %add.616), custom_call_target="ScaledInplaceXbY", metadata={op_type="ResourceApplyGradientDescent" op_name="cond_1/SGDW/SGDW/update_1/ResourceApplyGradientDescent" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/gradient_descent.py" source_line=145}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"103\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.595 = f32[1,1,4,8]{3,2,1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=13
  %fusion.21 = f32[1,1,4,8]{3,2,1,0} fusion(f32[1,1,4,8]{3,2,1,0} %get-tuple-element.595, f32[] %multiply.605), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.1, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_2/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %subtract.622 = f32[1,1,4,8]{3,2,1,0} subtract(f32[1,1,4,8]{3,2,1,0} %get-tuple-element.595, f32[1,1,4,8]{3,2,1,0} %fusion.21), metadata={op_type="AssignSubVariableOp" op_name="cond_1/SGDW/SGDW/update_2/AssignSubVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=217}
  %get-tuple-element.584 = f32[1,1,4,8]{3,2,1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=2, metadata={op_type="RealDiv" op_name="cond_1/SGDW/truediv_2" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/optimizers/optimizer_factory.py" source_line=65}
  %scaled-inplace-xb-y.3 = f32[1,1,4,8]{3,2,1,0} custom-call(f32[1,1,4,8]{3,2,1,0} %subtract.622, f32[1,1,4,8]{3,2,1,0} %get-tuple-element.584, f32[] %add.616), custom_call_target="ScaledInplaceXbY", metadata={op_type="ResourceApplyGradientDescent" op_name="cond_1/SGDW/SGDW/update_2/ResourceApplyGradientDescent" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/gradient_descent.py" source_line=145}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"103\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.596 = f32[8]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=14
  %broadcast.623 = f32[8]{0} broadcast(f32[] %multiply.605), dimensions={}, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_3/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}
  %fusion.9 = f32[8]{0} fusion(f32[8]{0} %get-tuple-element.596, f32[8]{0} %broadcast.623), kind=kCustom, calls=%_pop_op_arithmetic_expression.1
  %get-tuple-element.585 = f32[8]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=3, metadata={op_type="RealDiv" op_name="cond_1/SGDW/truediv_3" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/optimizers/optimizer_factory.py" source_line=65}
  %scaled-inplace-xb-y.2 = f32[8]{0} custom-call(f32[8]{0} %fusion.9, f32[8]{0} %get-tuple-element.585, f32[] %add.616), custom_call_target="ScaledInplaceXbY", metadata={op_type="ResourceApplyGradientDescent" op_name="cond_1/SGDW/SGDW/update_3/ResourceApplyGradientDescent" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/gradient_descent.py" source_line=145}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"103\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.597 = f32[8,10]{1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=15
  %fusion.22 = f32[8,10]{1,0} fusion(f32[8,10]{1,0} %get-tuple-element.597, f32[] %multiply.605), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.2, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_4/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %subtract.628 = f32[8,10]{1,0} subtract(f32[8,10]{1,0} %get-tuple-element.597, f32[8,10]{1,0} %fusion.22), metadata={op_type="AssignSubVariableOp" op_name="cond_1/SGDW/SGDW/update_4/AssignSubVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=217}
  %get-tuple-element.586 = f32[8,10]{1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=4, metadata={op_type="RealDiv" op_name="cond_1/SGDW/truediv_4" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/optimizers/optimizer_factory.py" source_line=65}
  %scaled-inplace-xb-y.1 = f32[8,10]{1,0} custom-call(f32[8,10]{1,0} %subtract.628, f32[8,10]{1,0} %get-tuple-element.586, f32[] %add.616), custom_call_target="ScaledInplaceXbY", metadata={op_type="ResourceApplyGradientDescent" op_name="cond_1/SGDW/SGDW/update_4/ResourceApplyGradientDescent" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/gradient_descent.py" source_line=145}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"103\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.598 = f32[10]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=16
  %fusion.23 = f32[10]{0} fusion(f32[10]{0} %get-tuple-element.598, f32[] %multiply.605), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.3, metadata={op_type="Mul" op_name="cond_1/SGDW/SGDW/update_5/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow_addons/optimizers/weight_decay_optimizers.py" source_line=182}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %subtract.631 = f32[10]{0} subtract(f32[10]{0} %get-tuple-element.598, f32[10]{0} %fusion.23), metadata={op_type="AssignSubVariableOp" op_name="cond_1/SGDW/SGDW/update_5/AssignSubVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=217}
  %get-tuple-element.587 = f32[10]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.581), index=5, metadata={op_type="RealDiv" op_name="cond_1/SGDW/truediv_5" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/optimizers/optimizer_factory.py" source_line=65}
  %scaled-inplace-xb-y = f32[10]{0} custom-call(f32[10]{0} %subtract.631, f32[10]{0} %get-tuple-element.587, f32[] %add.616), custom_call_target="ScaledInplaceXbY", metadata={op_type="ResourceApplyGradientDescent" op_name="cond_1/SGDW/SGDW/update_5/ResourceApplyGradientDescent" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/gradient_descent.py" source_line=145}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"103\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  ROOT %tuple.699 = (pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) tuple(pred[] %get-tuple-element.588, s64[] %add.678, f32[] %add.610, s32[] %get-tuple-element.591, f32[] %add.602, /*index=5*/f32[3,3,3,4]{3,2,1,0} %scaled-inplace-xb-y.5, f32[4]{0} %scaled-inplace-xb-y.4, f32[1,1,4,8]{3,2,1,0} %scaled-inplace-xb-y.3, f32[8]{0} %scaled-inplace-xb-y.2, f32[8,10]{1,0} %scaled-inplace-xb-y.1, /*index=10*/f32[10]{0} %scaled-inplace-xb-y), metadata={op_name="XLA_Retvals"}
}

%cond_1_false_1632_rearrange_0__.700 (arg_tuple.701: (f32[3,3,3,4], f32[4], f32[1,1,4,8], f32[8], f32[8,10], /*index=5*/f32[10], pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4], f32[4], f32[1,1,4,8], f32[8], /*index=15*/f32[8,10], f32[10])) -> (pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4], f32[4], f32[1,1,4,8], f32[8], f32[8,10], /*index=10*/f32[10]) {
  %arg_tuple.701 = (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.708 = pred[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=6
  %get-tuple-element.709 = s64[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=7
  %constant.719 = s64[] constant(1), metadata={op_type="AssignAddVariableOp" op_name="cond_1/AssignAddVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=730}
  %add.720 = s64[] add(s64[] %get-tuple-element.709, s64[] %constant.719), metadata={op_type="AssignAddVariableOp" op_name="cond_1/AssignAddVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=730}
  %get-tuple-element.710 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=8, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.711 = s32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=9, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.712 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=10, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.713 = f32[3,3,3,4]{3,2,1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=11, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.714 = f32[4]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=12, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.715 = f32[1,1,4,8]{3,2,1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=13, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.716 = f32[8]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=14, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.717 = f32[8,10]{1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=15, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.718 = f32[10]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %arg_tuple.701), index=16, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.741 = (pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) tuple(pred[] %get-tuple-element.708, s64[] %add.720, f32[] %get-tuple-element.710, s32[] %get-tuple-element.711, f32[] %get-tuple-element.712, /*index=5*/f32[3,3,3,4]{3,2,1,0} %get-tuple-element.713, f32[4]{0} %get-tuple-element.714, f32[1,1,4,8]{3,2,1,0} %get-tuple-element.715, f32[8]{0} %get-tuple-element.716, f32[8,10]{1,0} %get-tuple-element.717, /*index=10*/f32[10]{0} %get-tuple-element.718), metadata={op_name="XLA_Retvals"}
}

%_pop_op_arithmetic_expression.3 (p.30: pred[], p.31: pred[], p.32: pred[], p.33: pred[], p.34: pred[]) -> pred[] {
  %p.30 = pred[] parameter(0)
  %p.31 = pred[] parameter(1)
  %and.1.clone = pred[] and(pred[] %p.30, pred[] %p.31)
  %p.32 = pred[] parameter(2)
  %and.2.clone = pred[] and(pred[] %and.1.clone, pred[] %p.32)
  %p.33 = pred[] parameter(3)
  %and.3.clone = pred[] and(pred[] %and.2.clone, pred[] %p.33)
  %p.34 = pred[] parameter(4)
  ROOT %and.4.clone = pred[] and(pred[] %and.3.clone, pred[] %p.34)
}

%pipeline_WU_func_1525__.742 (arg0.743: f32[3,3,3,4], arg1.744: f32[4], arg2.745: f32[1,1,4,8], arg3.746: f32[8], arg4.747: f32[8,10], arg5.748: f32[10], arg6.749: s64[], arg7.750: f32[], arg8.751: s64[], arg9.752: f32[], arg10.753: s32[], arg11.754: f32[], arg12.755: f32[3,3,3,4], arg13.756: f32[4], arg14.757: f32[1,1,4,8], arg15.758: f32[8], arg16.759: f32[8,10], arg17.760: f32[10]) -> (s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4], f32[4], f32[1,1,4,8], f32[8], /*index=10*/f32[8,10], f32[10]) {
  %arg6.749 = s64[] parameter(6), metadata={op_name="XLA_Args/_AnonymousVar23"}
  %arg0.743 = f32[3,3,3,4]{3,2,1,0} parameter(0), metadata={op_name="XLA_Args"}
  %all-reduce.796 = f32[3,3,3,4]{3,2,1,0} all-reduce(f32[3,3,3,4]{3,2,1,0} %arg0.743), replica_groups={}, to_apply=%sum.482, metadata={op_type="IpuCrossReplicaSum" op_name="IpuCrossReplicaSum" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_popops_ops.py" source_line=486}
  %is-finite.797 = pred[3,3,3,4]{3,2,1,0} is-finite(f32[3,3,3,4]{3,2,1,0} %all-reduce.796), metadata={op_name="IsFinite"}
  %constant.764 = pred[] constant(true), metadata={op_type="All" op_name="All_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=169}
  %reduce.801 = pred[] reduce(pred[3,3,3,4]{3,2,1,0} %is-finite.797, pred[] %constant.764), dimensions={0,1,2,3}, to_apply=%All-reduction.486, metadata={op_type="All" op_name="All" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=169}
  %arg1.744 = f32[4]{0} parameter(1), metadata={op_name="XLA_Args"}
  %all-reduce.761 = f32[4]{0} all-reduce(f32[4]{0} %arg1.744), replica_groups={}, to_apply=%sum.442, metadata={op_type="IpuCrossReplicaSum" op_name="IpuCrossReplicaSum_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_popops_ops.py" source_line=486}
  %is-finite.762 = pred[4]{0} is-finite(f32[4]{0} %all-reduce.761), metadata={op_name="IsFinite_1"}
  %reduce.766 = pred[] reduce(pred[4]{0} %is-finite.762, pred[] %constant.764), dimensions={0}, to_apply=%All_1-reduction.446, metadata={op_type="All" op_name="All_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=169}
  %arg2.745 = f32[1,1,4,8]{3,2,1,0} parameter(2), metadata={op_name="XLA_Args"}
  %all-reduce.768 = f32[1,1,4,8]{3,2,1,0} all-reduce(f32[1,1,4,8]{3,2,1,0} %arg2.745), replica_groups={}, to_apply=%sum.450, metadata={op_type="IpuCrossReplicaSum" op_name="IpuCrossReplicaSum_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_popops_ops.py" source_line=486}
  %is-finite.769 = pred[1,1,4,8]{3,2,1,0} is-finite(f32[1,1,4,8]{3,2,1,0} %all-reduce.768), metadata={op_name="IsFinite_2"}
  %reduce.773 = pred[] reduce(pred[1,1,4,8]{3,2,1,0} %is-finite.769, pred[] %constant.764), dimensions={0,1,2,3}, to_apply=%All_2-reduction.454, metadata={op_type="All" op_name="All_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=169}
  %arg3.746 = f32[8]{0} parameter(3), metadata={op_name="XLA_Args"}
  %all-reduce.775 = f32[8]{0} all-reduce(f32[8]{0} %arg3.746), replica_groups={}, to_apply=%sum.458, metadata={op_type="IpuCrossReplicaSum" op_name="IpuCrossReplicaSum_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_popops_ops.py" source_line=486}
  %is-finite.776 = pred[8]{0} is-finite(f32[8]{0} %all-reduce.775), metadata={op_name="IsFinite_3"}
  %reduce.780 = pred[] reduce(pred[8]{0} %is-finite.776, pred[] %constant.764), dimensions={0}, to_apply=%All_3-reduction.462, metadata={op_type="All" op_name="All_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=169}
  %arg4.747 = f32[8,10]{1,0} parameter(4), metadata={op_name="XLA_Args"}
  %all-reduce.782 = f32[8,10]{1,0} all-reduce(f32[8,10]{1,0} %arg4.747), replica_groups={}, to_apply=%sum.466, metadata={op_type="IpuCrossReplicaSum" op_name="IpuCrossReplicaSum_4" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_popops_ops.py" source_line=486}
  %is-finite.783 = pred[8,10]{1,0} is-finite(f32[8,10]{1,0} %all-reduce.782), metadata={op_name="IsFinite_4"}
  %reduce.787 = pred[] reduce(pred[8,10]{1,0} %is-finite.783, pred[] %constant.764), dimensions={0,1}, to_apply=%All_4-reduction.470, metadata={op_type="All" op_name="All_4" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=169}
  %fusion.11 = pred[] fusion(pred[] %reduce.801, pred[] %reduce.766, pred[] %reduce.773, pred[] %reduce.780, pred[] %reduce.787), kind=kCustom, calls=%_pop_op_arithmetic_expression.3
  %arg5.748 = f32[10]{0} parameter(5), metadata={op_name="XLA_Args"}
  %all-reduce.789 = f32[10]{0} all-reduce(f32[10]{0} %arg5.748), replica_groups={}, to_apply=%sum.474, metadata={op_type="IpuCrossReplicaSum" op_name="IpuCrossReplicaSum_5" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_popops_ops.py" source_line=486}
  %is-finite.790 = pred[10]{0} is-finite(f32[10]{0} %all-reduce.789), metadata={op_name="IsFinite_5"}
  %reduce.794 = pred[] reduce(pred[10]{0} %is-finite.790, pred[] %constant.764), dimensions={0}, to_apply=%All_5-reduction.478, metadata={op_type="All" op_name="All_5" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=169}
  %and.5 = pred[] and(pred[] %fusion.11, pred[] %reduce.794), metadata={op_type="All" op_name="All_6" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=171}
  %arg7.750 = f32[] parameter(7), metadata={op_name="XLA_Args/_AnonymousVar22"}
  %tuple.824 = (pred[], s64[], f32[]) tuple(pred[] %and.5, s64[] %arg6.749, f32[] %arg7.750), metadata={op_type="If" op_name="cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=363}
  %conditional.825 = (pred[], s64[], f32[]) conditional(pred[] %and.5, (pred[], s64[], f32[]) %tuple.824, (pred[], s64[], f32[]) %tuple.824), true_computation=%cond_true_1565_rearrange_0__.541, false_computation=%cond_false_1566_rearrange_0__.563, metadata={op_type="If" op_name="cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=363}
  %get-tuple-element.829 = s64[] get-tuple-element((pred[], s64[], f32[]) %conditional.825), index=1, metadata={op_type="If" op_name="cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=363}
  %copy-into = s64[] custom-call(s64[] %arg6.749, s64[] %get-tuple-element.829), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.830 = f32[] get-tuple-element((pred[], s64[], f32[]) %conditional.825), index=2, metadata={op_type="If" op_name="cond" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=363}
  %copy-into.1 = f32[] custom-call(f32[] %arg7.750, f32[] %get-tuple-element.830), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %arg8.751 = s64[] parameter(8), metadata={op_name="XLA_Args/_AnonymousVar27"}
  %arg9.752 = f32[] parameter(9), metadata={op_name="XLA_Args/_AnonymousVar18"}
  %arg10.753 = s32[] parameter(10), metadata={op_name="XLA_Args/_AnonymousVar29"}
  %arg11.754 = f32[] parameter(11), metadata={op_name="XLA_Args/_AnonymousVar19"}
  %arg12.755 = f32[3,3,3,4]{3,2,1,0} parameter(12), metadata={op_name="XLA_Args/_AnonymousVar9"}
  %arg13.756 = f32[4]{0} parameter(13), metadata={op_name="XLA_Args/_AnonymousVar10"}
  %arg14.757 = f32[1,1,4,8]{3,2,1,0} parameter(14), metadata={op_name="XLA_Args/_AnonymousVar11"}
  %arg15.758 = f32[8]{0} parameter(15), metadata={op_name="XLA_Args/_AnonymousVar12"}
  %arg16.759 = f32[8,10]{1,0} parameter(16), metadata={op_name="XLA_Args/_AnonymousVar13"}
  %arg17.760 = f32[10]{0} parameter(17), metadata={op_name="XLA_Args/_AnonymousVar14"}
  %tuple.831 = (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) tuple(f32[3,3,3,4]{3,2,1,0} %all-reduce.796, f32[4]{0} %all-reduce.761, f32[1,1,4,8]{3,2,1,0} %all-reduce.768, f32[8]{0} %all-reduce.775, f32[8,10]{1,0} %all-reduce.782, /*index=5*/f32[10]{0} %all-reduce.789, pred[] %and.5, s64[] %arg8.751, f32[] %arg9.752, s32[] %arg10.753, /*index=10*/f32[] %arg11.754, f32[3,3,3,4]{3,2,1,0} %arg12.755, f32[4]{0} %arg13.756, f32[1,1,4,8]{3,2,1,0} %arg14.757, f32[8]{0} %arg15.758, /*index=15*/f32[8,10]{1,0} %arg16.759, f32[10]{0} %arg17.760), metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %conditional.832 = (pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) conditional(pred[] %and.5, (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %tuple.831, (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, pred[], s64[], f32[], s32[], /*index=10*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=15*/f32[8,10]{1,0}, f32[10]{0}) %tuple.831), true_computation=%cond_1_true_1631_rearrange_0__.580, false_computation=%cond_1_false_1632_rearrange_0__.700, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %get-tuple-element.843 = s64[] get-tuple-element((pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) %conditional.832), index=1, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %copy-into.2 = s64[] custom-call(s64[] %arg8.751, s64[] %get-tuple-element.843), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.835 = f32[] get-tuple-element((pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) %conditional.832), index=2, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %copy-into.3 = f32[] custom-call(f32[] %arg9.752, f32[] %get-tuple-element.835), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.836 = f32[] get-tuple-element((pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) %conditional.832), index=4, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %copy-into.4 = f32[] custom-call(f32[] %arg11.754, f32[] %get-tuple-element.836), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.837 = f32[3,3,3,4]{3,2,1,0} get-tuple-element((pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) %conditional.832), index=5, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %copy-into.5 = f32[3,3,3,4]{3,2,1,0} custom-call(f32[3,3,3,4]{3,2,1,0} %arg12.755, f32[3,3,3,4]{3,2,1,0} %get-tuple-element.837), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.838 = f32[4]{0} get-tuple-element((pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) %conditional.832), index=6, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %copy-into.6 = f32[4]{0} custom-call(f32[4]{0} %arg13.756, f32[4]{0} %get-tuple-element.838), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.839 = f32[1,1,4,8]{3,2,1,0} get-tuple-element((pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) %conditional.832), index=7, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %copy-into.7 = f32[1,1,4,8]{3,2,1,0} custom-call(f32[1,1,4,8]{3,2,1,0} %arg14.757, f32[1,1,4,8]{3,2,1,0} %get-tuple-element.839), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.840 = f32[8]{0} get-tuple-element((pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) %conditional.832), index=8, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %copy-into.8 = f32[8]{0} custom-call(f32[8]{0} %arg15.758, f32[8]{0} %get-tuple-element.840), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.841 = f32[8,10]{1,0} get-tuple-element((pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) %conditional.832), index=9, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %copy-into.9 = f32[8,10]{1,0} custom-call(f32[8,10]{1,0} %arg16.759, f32[8,10]{1,0} %get-tuple-element.841), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.842 = f32[10]{0} get-tuple-element((pred[], s64[], f32[], s32[], f32[], /*index=5*/f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=10*/f32[10]{0}) %conditional.832), index=10, metadata={op_type="If" op_name="cond_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=763}
  %copy-into.10 = f32[10]{0} custom-call(f32[10]{0} %arg17.760, f32[10]{0} %get-tuple-element.842), custom_call_target="CopyInto", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  ROOT %tuple.868 = (s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) tuple(s64[] %copy-into, f32[] %copy-into.1, s64[] %copy-into.2, f32[] %copy-into.3, s32[] %arg10.753, /*index=5*/f32[] %copy-into.4, f32[3,3,3,4]{3,2,1,0} %copy-into.5, f32[4]{0} %copy-into.6, f32[1,1,4,8]{3,2,1,0} %copy-into.7, f32[8]{0} %copy-into.8, /*index=10*/f32[8,10]{1,0} %copy-into.9, f32[10]{0} %copy-into.10), metadata={op_name="XLA_Retvals"}
  %constant.817 = s32[] constant(4), metadata={op_type="GradientAccumulationCount" op_name="GradientAccumulationCount" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=287}
  %gradient-accumulation-count = () custom-call(s32[] %constant.817), custom_call_target="GradientAccumulationCount", custom_call_has_side_effect=true, metadata={op_type="GradientAccumulationCount" op_name="GradientAccumulationCount" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=287}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
}

%max_half_.53 (x.54: f16[], y.55: f16[]) -> f16[] {
  %x.54 = f16[] parameter(0)
  %y.55 = f16[] parameter(1)
  ROOT %maximum.56 = f16[] maximum(f16[] %x.54, f16[] %y.55)
}

%add_float_.57 (x.58: f32[], y.59: f32[]) -> f32[] {
  %x.58 = f32[] parameter(0)
  %y.59 = f32[] parameter(1)
  ROOT %add.60 = f32[] add(f32[] %x.58, f32[] %y.59)
}

%scalar_add_computation (scalar_lhs: f32[], scalar_rhs: f32[]) -> f32[] {
  %scalar_lhs = f32[] parameter(0)
  %scalar_rhs = f32[] parameter(1)
  ROOT %add.12 = f32[] add(f32[] %scalar_lhs, f32[] %scalar_rhs)
}

%add_float_.61 (x.62: f32[], y.63: f32[]) -> f32[] {
  %x.62 = f32[] parameter(0)
  %y.63 = f32[] parameter(1)
  ROOT %add.64 = f32[] add(f32[] %x.62, f32[] %y.63)
}

%_pop_op_conv_biasadd.1 (arg_0.1: f16[1,6,6,8], arg_1.1: f16[8]) -> f16[1,6,6,8] {
  %arg_0.1 = f16[1,6,6,8]{3,2,1,0} parameter(0)
  %arg_1.1 = f16[8]{0} parameter(1)
  %broadcast.23.clone = f16[1,6,6,8]{3,2,1,0} broadcast(f16[8]{0} %arg_1.1), dimensions={3}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="BiasAdd" op_name="conv2d_1/BiasAdd" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/convolutional.py" source_line=268}
  ROOT %add.3.clone = f16[1,6,6,8]{3,2,1,0} add(f16[1,6,6,8]{3,2,1,0} %arg_0.1, f16[1,6,6,8]{3,2,1,0} %broadcast.23.clone), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="BiasAdd" op_name="conv2d_1/BiasAdd" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/convolutional.py" source_line=268}
}

%_pop_op_arithmetic_expression.4 (p.35: f32[], p.36: f32[], p.37: f32[], p.38: f32[], p.39: f32[]) -> f32[] {
  %p.37 = f32[] parameter(2)
  %p.38 = f32[] parameter(3)
  %compare.32.clone = pred[] compare(f32[] %p.37, f32[] %p.38), direction=EQ, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="DivNoNan" op_name="div_no_nan_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=453}
  %p.39 = f32[] parameter(4)
  %p.35 = f32[] parameter(0)
  %p.36 = f32[] parameter(1)
  %divide.6.clone = f32[] divide(f32[] %p.35, f32[] %p.36), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="DivNoNan" op_name="div_no_nan_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=453}
  ROOT %select.5.clone = f32[] select(pred[] %compare.32.clone, f32[] %p.39, f32[] %divide.6.clone), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="DivNoNan" op_name="div_no_nan_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=453}
}

%_pop_op_arithmetic_expression.5 (p.40: s64[1], p.41: f32[1]) -> f32[1] {
  %p.41 = f32[1]{0} parameter(1)
  %p.40 = s64[1]{0} parameter(0)
  %convert.36.clone = f32[1]{0} convert(s64[1]{0} %p.40), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="Cast_6" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3535}
  %compare.8.clone = pred[1]{0} compare(f32[1]{0} %p.41, f32[1]{0} %convert.36.clone), direction=EQ, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Equal" op_name="Equal_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3537}
  ROOT %convert.37.clone = f32[1]{0} convert(pred[1]{0} %compare.8.clone), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="Cast_7" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3537}
}

%_pop_op_arithmetic_expression.6 (p.42: f32[], p.43: f32[], p.44: f32[], p.45: f32[], p.46: f32[]) -> f32[] {
  %p.44 = f32[] parameter(2)
  %p.45 = f32[] parameter(3)
  %compare.31.clone = pred[] compare(f32[] %p.44, f32[] %p.45), direction=EQ, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="DivNoNan" op_name="div_no_nan" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=453}
  %p.46 = f32[] parameter(4)
  %p.42 = f32[] parameter(0)
  %p.43 = f32[] parameter(1)
  %divide.5.clone = f32[] divide(f32[] %p.42, f32[] %p.43), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="DivNoNan" op_name="div_no_nan" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=453}
  ROOT %select.4.clone = f32[] select(pred[] %compare.31.clone, f32[] %p.46, f32[] %divide.5.clone), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="DivNoNan" op_name="div_no_nan" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=453}
}

%_pop_op_arithmetic_expression.7 (p.47: s64[1], p.48: s32[1]) -> f32[1] {
  %p.48 = s32[1]{0} parameter(1)
  %p.47 = s64[1]{0} parameter(0)
  %convert.18.clone = s32[1]{0} convert(s64[1]{0} %p.47), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="Cast_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3535}
  %compare.4.clone = pred[1]{0} compare(s32[1]{0} %p.48, s32[1]{0} %convert.18.clone), direction=EQ, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Equal" op_name="Equal" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3537}
  ROOT %convert.19.clone = f32[1]{0} convert(pred[1]{0} %compare.4.clone), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="Cast_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3537}
}

%_pop_op_arithmetic_expression.8 (p.49: s64[1], p.50: s64[1], p.51: s64[1], p.52: f16[1], p.53: f16[1]) -> f16[1] {
  %p.51 = s64[1]{0} parameter(2)
  %p.49 = s64[1]{0} parameter(0)
  %compare.1.clone = pred[1]{0} compare(s64[1]{0} %p.51, s64[1]{0} %p.49), direction=LE, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %p.50 = s64[1]{0} parameter(1)
  %compare.2.clone = pred[1]{0} compare(s64[1]{0} %p.49, s64[1]{0} %p.50), direction=LT, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %and.clone = pred[1]{0} and(pred[1]{0} %compare.1.clone, pred[1]{0} %compare.2.clone), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %p.52 = f16[1]{0} parameter(3)
  %p.53 = f16[1]{0} parameter(4)
  ROOT %select.1.clone = f16[1]{0} select(pred[1]{0} %and.clone, f16[1]{0} %p.52, f16[1]{0} %p.53), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
}

%_pop_op_arithmetic_expression.9 (p.54: s32[1,1]) -> s64[1,1] {
  %p.54 = s32[1,1]{1,0} parameter(0)
  %convert.6.clone = f16[1,1]{1,0} convert(s32[1,1]{1,0} %p.54), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="loss/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/losses.py" source_line=1737}
  ROOT %convert.7.clone = s64[1,1]{1,0} convert(f16[1,1]{1,0} %convert.6.clone), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="loss/Cast_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=1823}
}

%_pop_op_implicit_binary (arg_0.6: s64[1], arg_1.6: s64[1,10]) -> pred[1,10] {
  %arg_0.6 = s64[1]{0} parameter(0)
  %broadcast.160 = s64[1,10]{1,0} broadcast(s64[1]{0} %arg_0.6), dimensions={0}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %arg_1.6 = s64[1,10]{1,0} parameter(1)
  ROOT %compare.33 = pred[1,10]{1,0} compare(s64[1,10]{1,0} %broadcast.160, s64[1,10]{1,0} %arg_1.6), direction=EQ, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
}

%_pop_op_implicit_ternary (arg_0.7: pred[1,10]) -> f16[1,10] {
  %arg_0.7 = pred[1,10]{1,0} parameter(0)
  %constant.153.clone = f16[] constant(1)
  %broadcast.161 = f16[1,10]{1,0} broadcast(f16[] %constant.153.clone), dimensions={}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %constant.156.clone = f16[] constant(0)
  %broadcast.162 = f16[1,10]{1,0} broadcast(f16[] %constant.156.clone), dimensions={}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  ROOT %select.27 = f16[1,10]{1,0} select(pred[1,10]{1,0} %arg_0.7, f16[1,10]{1,0} %broadcast.161, f16[1,10]{1,0} %broadcast.162), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
}

%_pop_op_implicit_binary_inplace.4 (arg_0.8: f16[1,10], arg_1.7: f16[1]) -> f16[1,10] {
  %arg_0.8 = f16[1,10]{1,0} parameter(0)
  %arg_1.7 = f16[1]{0} parameter(1)
  %broadcast.164 = f16[1,10]{1,0} broadcast(f16[1]{0} %arg_1.7), dimensions={0}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  ROOT %add.21 = f16[1,10]{1,0} add(f16[1,10]{1,0} %arg_0.8, f16[1,10]{1,0} %broadcast.164), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
}

%_pop_op_implicit_binary.1 (arg_0.9: f16[1,10]) -> pred[1,10] {
  %arg_0.9 = f16[1,10]{1,0} parameter(0)
  %constant.156.clone.1 = f16[] constant(0)
  %broadcast.166 = f16[1,10]{1,0} broadcast(f16[] %constant.156.clone.1), dimensions={}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  ROOT %compare.34 = pred[1,10]{1,0} compare(f16[1,10]{1,0} %arg_0.9, f16[1,10]{1,0} %broadcast.166), direction=EQ, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
}

%_pop_op_implicit_binary_inplace.5 (arg_0.10: f16[10,8], arg_1.8: f16[8]) -> f16[10,8] {
  %arg_0.10 = f16[10,8]{0,1} parameter(0)
  %arg_1.8 = f16[8]{0} parameter(1)
  %broadcast.168 = f16[10,8]{0,1} broadcast(f16[8]{0} %arg_1.8), dimensions={1}
  ROOT %multiply.112 = f16[10,8]{0,1} multiply(f16[10,8]{0,1} %arg_0.10, f16[10,8]{0,1} %broadcast.168)
}

%_pop_op_implicit_binary_inplace.6 (arg_0.11: f16[1,10], arg_1.9: f16[1]) -> f16[1,10] {
  %arg_0.11 = f16[1,10]{1,0} parameter(0)
  %arg_1.9 = f16[1]{0} parameter(1)
  %broadcast.169 = f16[1,10]{1,0} broadcast(f16[1]{0} %arg_1.9), dimensions={0}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  ROOT %subtract.7 = f16[1,10]{1,0} subtract(f16[1,10]{1,0} %arg_0.11, f16[1,10]{1,0} %broadcast.169), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
}

%_pop_op_implicit_binary_inplace.7 (arg_0.12: f16[1,10], arg_1.10: f16[1]) -> f16[1,10] {
  %arg_0.12 = f16[1,10]{1,0} parameter(0)
  %arg_1.10 = f16[1]{0} parameter(1)
  %broadcast.171 = f16[1,10]{1,0} broadcast(f16[1]{0} %arg_1.10), dimensions={0}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  ROOT %subtract.8 = f16[1,10]{1,0} subtract(f16[1,10]{1,0} %arg_0.12, f16[1,10]{1,0} %broadcast.171), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
}

%_pop_op_implicit_ternary.1 (arg_0.13: pred[1,10], arg_1.11: f16[1,10]) -> f16[1,10] {
  %arg_0.13 = pred[1,10]{1,0} parameter(0)
  %constant.156.clone.2 = f16[] constant(0)
  %broadcast.172 = f16[1,10]{1,0} broadcast(f16[] %constant.156.clone.2), dimensions={}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %arg_1.11 = f16[1,10]{1,0} parameter(1)
  ROOT %select.28 = f16[1,10]{1,0} select(pred[1,10]{1,0} %arg_0.13, f16[1,10]{1,0} %broadcast.172, f16[1,10]{1,0} %arg_1.11), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
}

%_pop_op_implicit_binary_inplace.8 (arg_0.14: f16[1,10], arg_1.12: f16[1]) -> f16[1,10] {
  %arg_0.14 = f16[1,10]{1,0} parameter(0)
  %arg_1.12 = f16[1]{0} parameter(1)
  %broadcast.173 = f16[1,10]{1,0} broadcast(f16[1]{0} %arg_1.12), dimensions={0}, metadata={op_name="dense/Softmax"}
  ROOT %divide.37 = f16[1,10]{1,0} divide(f16[1,10]{1,0} %arg_0.14, f16[1,10]{1,0} %broadcast.173), metadata={op_name="dense/Softmax"}
}

%pipeline_stage_1_func_1182_rewritten__.0 (arg0.2: f16[1,6,6,4], arg1.1: s32[1,1], arg2.0: f32[1,1,4,8], arg3.0: f32[8], arg4.0: f32[8,10], arg5.0: f32[10], arg6.0: f32[], arg7.0: f32[], arg8.0: f32[], arg9.0: f32[]) -> (f32[], f32[], f32[], f32[], f16[1,10], /*index=5*/f16[8,10], f16[1,8], f16[1,6,6,8], f16[1,1,1,8], f16[1,6,6,4], /*index=10*/f16[1,1,4,8], f16[1], f32[], (f32[], f32[])) {
  %stateful-noop.5 = () custom-call(), custom_call_target="StatefulNoop", custom_call_has_side_effect=true, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %arg7.0 = f32[] parameter(7), metadata={op_name="XLA_Args/_AnonymousVar25"}
  %constant.20 = f32[] constant(1), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="DivNoNan" op_name="loss/weighted_loss/value" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/utils/losses_utils.py" source_line=250}
  %add.5 = f32[] add(f32[] %arg7.0, f32[] %constant.20), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="AssignAddVariableOp" op_name="AssignAddVariableOp_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=217}
  %arg6.0 = f32[] parameter(6), metadata={op_name="XLA_Args/_AnonymousVar24"}
  %arg1.1 = s32[1,1]{1,0} parameter(1), metadata={op_name="XLA_Args"}
  %fusion.17 = s64[1,1]{1,0} fusion(s32[1,1]{1,0} %arg1.1), kind=kCustom, calls=%_pop_op_arithmetic_expression.9
  %reshape.1 = s64[1]{0} reshape(s64[1,1]{1,0} %fusion.17), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Reshape" op_name="loss/Reshape" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=3406}
  %iota = s64[1,10]{1,0} iota(), iota_dimension=1, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %fusion.24 = pred[1,10]{1,0} fusion(s64[1]{0} %reshape.1, s64[1,10]{1,0} %iota), kind=kCustom, calls=%_pop_op_implicit_binary, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %fusion.25 = f16[1,10]{1,0} fusion(pred[1,10]{1,0} %fusion.24), kind=kCustom, calls=%_pop_op_implicit_ternary, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %constant.122 = s64[1]{0} constant({10}), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %constant.121 = s64[1]{0} constant({0}), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %constant.157 = f16[1]{0} constant({0})
  %constant.158 = f16[1]{0} constant({nan})
  %fusion.16 = f16[1]{0} fusion(s64[1]{0} %reshape.1, s64[1]{0} %constant.122, s64[1]{0} %constant.121, f16[1]{0} %constant.157, f16[1]{0} %constant.158), kind=kCustom, calls=%_pop_op_arithmetic_expression.8
  %fusion.26 = f16[1,10]{1,0} fusion(f16[1,10]{1,0} %fusion.25, f16[1]{0} %fusion.16), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.4, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %negate = f16[1,10]{1,0} negate(f16[1,10]{1,0} %fusion.26), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %fusion.27 = pred[1,10]{1,0} fusion(f16[1,10]{1,0} %fusion.26), kind=kCustom, calls=%_pop_op_implicit_binary.1, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %arg4.0 = f32[8,10]{1,0} parameter(4), metadata={op_name="XLA_Args/_AnonymousVar13"}
  %convert.10 = f16[8,10]{1,0} convert(f32[8,10]{1,0} %arg4.0), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="dense/MatMul/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=146}
  %transpose.7 = f16[10,8]{0,1} transpose(f16[8,10]{1,0} %convert.10), dimensions={1,0}, frontend_attributes={ML_TYPE="TRAINING_FWD"}
  %arg0.2 = f16[1,6,6,4]{3,2,1,0} parameter(0), metadata={op_name="XLA_Args"}
  %arg2.0 = f32[1,1,4,8]{3,2,1,0} parameter(2), metadata={op_name="XLA_Args/_AnonymousVar11"}
  %convert.8 = f16[1,1,4,8]{3,2,1,0} convert(f32[1,1,4,8]{3,2,1,0} %arg2.0), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="conv2d_1/Conv2D/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=146}
  %convolution.1 = f16[1,6,6,8]{3,2,1,0} convolution(f16[1,6,6,4]{3,2,1,0} %arg0.2, f16[1,1,4,8]{3,2,1,0} %convert.8), window={size=1x1}, dim_labels=b01f_01io->b01f, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Conv2D" op_name="conv2d_1/Conv2D" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/convolutional.py" source_line=249}
  %arg3.0 = f32[8]{0} parameter(3), metadata={op_name="XLA_Args/_AnonymousVar12"}
  %convert.9 = f16[8]{0} convert(f32[8]{0} %arg3.0), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="conv2d_1/BiasAdd/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=146}
  %fusion.7 = f16[1,6,6,8]{3,2,1,0} fusion(f16[1,6,6,8]{3,2,1,0} %convolution.1, f16[8]{0} %convert.9), kind=kCustom, calls=%_pop_op_conv_biasadd.1, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="BiasAdd" op_name="conv2d_1/BiasAdd" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/convolutional.py" source_line=268}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %relu.3 = f16[1,6,6,8]{3,2,1,0} custom-call(f16[1,6,6,8]{3,2,1,0} %fusion.7), custom_call_target="Relu", frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Relu" op_name="conv2d_1/Relu" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4712}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %max-pool.3 = f16[1,1,1,8]{3,2,1,0} custom-call(f16[1,6,6,8]{3,2,1,0} %relu.3), custom_call_target="MaxPool", frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="MaxPool" op_name="max_pooling2d_1/MaxPool" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/pooling.py" source_line=360}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"5506129868324849241\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %reshape.81 = f16[8]{0} reshape(f16[1,1,1,8]{3,2,1,0} %max-pool.3), frontend_attributes={ML_TYPE="TRAINING_FWD"}
  %fusion.28 = f16[10,8]{0,1} fusion(f16[10,8]{0,1} %transpose.7, f16[8]{0} %reshape.81), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.5, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %constant.156 = f16[] constant(0)
  %reduce.21.clone = f16[10]{0} reduce(f16[10,8]{0,1} %fusion.28, f16[] %constant.156), dimensions={1}, to_apply=%scalar_add_computation, frontend_attributes={ML_TYPE="TRAINING_FWD"}
  %arg5.0 = f32[10]{0} parameter(5), metadata={op_name="XLA_Args/_AnonymousVar14"}
  %convert.11 = f16[10]{0} convert(f32[10]{0} %arg5.0), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="dense/BiasAdd/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=146}
  %add.14 = f16[10]{0} add(f16[10]{0} %reduce.21.clone, f16[10]{0} %convert.11), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="BiasAdd" op_name="dense/BiasAdd" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/core.py" source_line=1240}
  %reshape.91 = f16[1,10]{1,0} reshape(f16[10]{0} %add.14), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="BiasAdd" op_name="dense/BiasAdd" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/core.py" source_line=1240}
  %constant.159 = f16[] constant(-inf)
  %reduce = f16[1]{0} reduce(f16[1,10]{1,0} %reshape.91, f16[] %constant.159), dimensions={1}, to_apply=%max_half_.53, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %fusion.29 = f16[1,10]{1,0} fusion(f16[1,10]{1,0} %reshape.91, f16[1]{0} %reduce), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.6, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %exponential = f16[1,10]{1,0} exponential(f16[1,10]{1,0} %fusion.29), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %reduce.1.clone = f16[1]{0} reduce(f16[1,10]{1,0} %exponential, f16[] %constant.156), dimensions={1}, to_apply=%add_float_.57, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %log = f16[1]{0} log(f16[1]{0} %reduce.1.clone), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %fusion.30 = f16[1,10]{1,0} fusion(f16[1,10]{1,0} %fusion.29, f16[1]{0} %log), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.7, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %fusion.31 = f16[1,10]{1,0} fusion(pred[1,10]{1,0} %fusion.27, f16[1,10]{1,0} %fusion.30), kind=kCustom, calls=%_pop_op_implicit_ternary.1, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %multiply.14 = f16[1,10]{1,0} multiply(f16[1,10]{1,0} %negate, f16[1,10]{1,0} %fusion.31), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %reduce.2.clone = f16[1]{0} reduce(f16[1,10]{1,0} %multiply.14, f16[] %constant.156), dimensions={1}, to_apply=%add_float_.61, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %convert.24 = f32[1]{0} convert(f16[1]{0} %reduce.2.clone), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="loss/weighted_loss/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/utils/losses_utils.py" source_line=316}
  %reshape.70 = f32[] reshape(f32[1]{0} %convert.24), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Sum" op_name="loss/weighted_loss/Sum" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/utils/losses_utils.py" source_line=265}
  %add.6 = f32[] add(f32[] %arg6.0, f32[] %reshape.70), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="AssignAddVariableOp" op_name="AssignAddVariableOp" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=217}
  %arg9.0 = f32[] parameter(9), metadata={op_name="XLA_Args/_AnonymousVar21"}
  %add.7 = f32[] add(f32[] %arg9.0, f32[] %constant.20), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="AssignAddVariableOp" op_name="AssignAddVariableOp_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=444}
  %arg8.0 = f32[] parameter(8), metadata={op_name="XLA_Args/_AnonymousVar20"}
  %fusion.32 = f16[1,10]{1,0} fusion(f16[1,10]{1,0} %exponential, f16[1]{0} %reduce.1.clone), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.8, metadata={op_name="dense/Softmax"}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %convert.35 = f32[1,10]{1,0} convert(f16[1,10]{1,0} %fusion.32), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="Cast_5" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=673}
  %arg-max.3 = s64[1]{0} custom-call(f32[1,10]{1,0} %convert.35), custom_call_target="ArgMax", frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="ArgMax" op_name="ArgMax_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3530}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"1\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %convert.34 = f32[1,1]{1,0} convert(s32[1,1]{1,0} %arg1.1), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="Cast_4" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=672}
  %reshape.9 = f32[1]{0} reshape(f32[1,1]{1,0} %convert.34), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Squeeze" op_name="Squeeze_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3529}
  %fusion.13 = f32[1]{0} fusion(s64[1]{0} %arg-max.3, f32[1]{0} %reshape.9), kind=kCustom, calls=%_pop_op_arithmetic_expression.5
  %reshape.71 = f32[] reshape(f32[1]{0} %fusion.13), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Sum" op_name="Sum_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=423}
  %add.8 = f32[] add(f32[] %arg8.0, f32[] %reshape.71), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="AssignAddVariableOp" op_name="AssignAddVariableOp_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=425}
  %subtract.3 = f16[1,10]{1,0} subtract(f16[1,10]{1,0} %fusion.32, f16[1,10]{1,0} %fusion.26), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %reshape.2 = f16[1,8]{1,0} reshape(f16[1,1,1,8]{3,2,1,0} %max-pool.3), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Reshape" op_name="flatten/Reshape" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/core.py" source_line=674}
  %arg-max.2 = s64[1]{0} custom-call(f16[1,10]{1,0} %fusion.32), custom_call_target="ArgMax", frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="ArgMax" op_name="ArgMax" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3530}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"1\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %reshape.4 = s32[1]{0} reshape(s32[1,1]{1,0} %arg1.1), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Squeeze" op_name="Squeeze" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/metrics.py" source_line=3529}
  %fusion.15 = f32[1]{0} fusion(s64[1]{0} %arg-max.2, s32[1]{0} %reshape.4), kind=kCustom, calls=%_pop_op_arithmetic_expression.7
  %reshape.67 = f32[] reshape(f32[1]{0} %fusion.15), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Mean" op_name="Mean" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/metrics/metric_enqueuer.py" source_line=21}
  %constant.127 = f32[] constant(-1)
  %constant.13 = f32[] constant(0), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %fusion.14 = f32[] fusion(f32[] %add.6, f32[] %add.5, f32[] %arg7.0, f32[] %constant.127, f32[] %constant.13), kind=kCustom, calls=%_pop_op_arithmetic_expression.6
  %fusion.12 = f32[] fusion(f32[] %add.8, f32[] %add.7, f32[] %arg9.0, f32[] %constant.127, f32[] %constant.13), kind=kCustom, calls=%_pop_op_arithmetic_expression.4
  %tuple.21 = (f32[], f32[]) tuple(f32[] %fusion.14, f32[] %fusion.12), metadata={op_type="PopDatastreamOutfeedEnqueue" op_name="PopDatastreamOutfeedEnqueue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1519}
  ROOT %tuple.63 = (f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) tuple(f32[] %add.5, f32[] %add.6, f32[] %add.7, f32[] %add.8, f16[1,10]{1,0} %subtract.3, /*index=5*/f16[8,10]{1,0} %convert.10, f16[1,8]{1,0} %reshape.2, f16[1,6,6,8]{3,2,1,0} %relu.3, f16[1,1,1,8]{3,2,1,0} %max-pool.3, f16[1,6,6,4]{3,2,1,0} %arg0.2, /*index=10*/f16[1,1,4,8]{3,2,1,0} %convert.8, f16[1]{0} %reduce.2.clone, f32[] %reshape.67, (f32[], f32[]) %tuple.21)
}

%region_0.256 (Arg_0.257: f32[], Arg_1.258: f32[]) -> f32[] {
  %Arg_0.257 = f32[] parameter(0)
  %Arg_1.258 = f32[] parameter(1)
  ROOT %add.259 = f32[] add(f32[] %Arg_0.257, f32[] %Arg_1.258), metadata={op_name="gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"}
}

%_pop_op_serialized_gradient_accumulation (p: f32[1,1,4,8], p.1: f32[1,1,4,8], p.2: f32[], p.3: f32[]) -> f32[1,1,4,8] {
  %p = f32[1,1,4,8]{3,2,1,0} parameter(0)
  %p.1 = f32[1,1,4,8]{3,2,1,0} parameter(1)
  %p.2 = f32[] parameter(2)
  %p.3 = f32[] parameter(3)
  ROOT %scaled-inplacea-xb-y.clone = f32[1,1,4,8]{3,2,1,0} custom-call(f32[1,1,4,8]{3,2,1,0} %p, f32[1,1,4,8]{3,2,1,0} %p.1, f32[] %p.2, f32[] %p.3), custom_call_target="ScaledInplaceaXbY", metadata={op_type="GradientAccumulatorAddWithScale" op_name="GradientAccumulatorAddWithScale_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=357}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"1\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
}

%_pop_op_serialized_gradient_accumulation.1 (p.4: f32[8], p.5: f32[8], p.6: f32[], p.7: f32[]) -> f32[8] {
  %p.4 = f32[8]{0} parameter(0)
  %p.5 = f32[8]{0} parameter(1)
  %p.6 = f32[] parameter(2)
  %p.7 = f32[] parameter(3)
  ROOT %scaled-inplacea-xb-y.1.clone = f32[8]{0} custom-call(f32[8]{0} %p.4, f32[8]{0} %p.5, f32[] %p.6, f32[] %p.7), custom_call_target="ScaledInplaceaXbY", metadata={op_type="GradientAccumulatorAddWithScale" op_name="GradientAccumulatorAddWithScale_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=357}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"1\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
}

%_pop_op_serialized_gradient_accumulation.2 (p.8: f32[8,10], p.9: f32[8,10], p.10: f32[], p.11: f32[]) -> f32[8,10] {
  %p.8 = f32[8,10]{1,0} parameter(0)
  %p.9 = f32[8,10]{1,0} parameter(1)
  %p.10 = f32[] parameter(2)
  %p.11 = f32[] parameter(3)
  ROOT %scaled-inplacea-xb-y.2.clone = f32[8,10]{1,0} custom-call(f32[8,10]{1,0} %p.8, f32[8,10]{1,0} %p.9, f32[] %p.10, f32[] %p.11), custom_call_target="ScaledInplaceaXbY", metadata={op_type="GradientAccumulatorAddWithScale" op_name="GradientAccumulatorAddWithScale_4" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=357}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"1\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
}

%_pop_op_serialized_gradient_accumulation.3 (p.12: f32[10], p.13: f32[], p.14: f32[10]) -> f32[10] {
  %p.12 = f32[10]{0} parameter(0)
  %p.13 = f32[] parameter(1)
  %broadcast.150.clone = f32[10]{0} broadcast(f32[] %p.13), dimensions={}
  %multiply.105.clone = f32[10]{0} multiply(f32[10]{0} %p.12, f32[10]{0} %broadcast.150.clone)
  %p.14 = f32[10]{0} parameter(2)
  ROOT %add.18.clone = f32[10]{0} add(f32[10]{0} %multiply.105.clone, f32[10]{0} %p.14), metadata={op_type="GradientAccumulatorAddWithScale" op_name="GradientAccumulatorAddWithScale_5" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=357}
}

%_pop_op_arithmetic_expression.10 (p.55: f16[8], p.56: f32[8]) -> f32[8] {
  %p.55 = f16[8]{0} parameter(0)
  %convert.123.clone = f32[8]{0} convert(f16[8]{0} %p.55), metadata={op_type="Cast" op_name="gradients/conv2d_1/BiasAdd/Cast_grad/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %p.56 = f32[8]{0} parameter(1)
  ROOT %multiply.90.clone = f32[8]{0} multiply(f32[8]{0} %convert.123.clone, f32[8]{0} %p.56), metadata={op_type="Mul" op_name="mul_4" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
}

%_pop_op_implicit_binary_inplace.9 (arg_0.15: f16[1,10], arg_1.13: f16[]) -> f16[1,10] {
  %arg_0.15 = f16[1,10]{1,0} parameter(0)
  %arg_1.13 = f16[] parameter(1)
  %broadcast.175 = f16[1,10]{1,0} broadcast(f16[] %arg_1.13), dimensions={}, metadata={op_type="Mul" op_name="gradients/loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  ROOT %multiply.113 = f16[1,10]{1,0} multiply(f16[1,10]{1,0} %arg_0.15, f16[1,10]{1,0} %broadcast.175), metadata={op_type="Mul" op_name="gradients/loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
}

%_pop_op_implicit_binary_inplace.10 (arg_0.16: f16[8,10], arg_1.14: f16[10]) -> f16[8,10] {
  %arg_0.16 = f16[8,10]{1,0} parameter(0)
  %arg_1.14 = f16[10]{0} parameter(1)
  %broadcast.176 = f16[8,10]{1,0} broadcast(f16[10]{0} %arg_1.14), dimensions={1}
  ROOT %multiply.114 = f16[8,10]{1,0} multiply(f16[8,10]{1,0} %arg_0.16, f16[8,10]{1,0} %broadcast.176)
}

%_pop_op_implicit_binary_inplace.11 (arg_0.17: f32[1,1,4,8], arg_1.15: f32[]) -> f32[1,1,4,8] {
  %arg_0.17 = f32[1,1,4,8]{3,2,1,0} parameter(0)
  %arg_1.15 = f32[] parameter(1)
  %broadcast.177 = f32[1,1,4,8]{3,2,1,0} broadcast(f32[] %arg_1.15), dimensions={}, metadata={op_type="Mul" op_name="mul_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
  ROOT %multiply.115 = f32[1,1,4,8]{3,2,1,0} multiply(f32[1,1,4,8]{3,2,1,0} %arg_0.17, f32[1,1,4,8]{3,2,1,0} %broadcast.177), metadata={op_type="Mul" op_name="mul_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
}

%_pop_op_implicit_binary_inplace.12 (arg_0.18: f32[8,10], arg_1.16: f32[]) -> f32[8,10] {
  %arg_0.18 = f32[8,10]{1,0} parameter(0)
  %arg_1.16 = f32[] parameter(1)
  %broadcast.179 = f32[8,10]{1,0} broadcast(f32[] %arg_1.16), dimensions={}, metadata={op_type="Mul" op_name="mul_5" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
  ROOT %multiply.116 = f32[8,10]{1,0} multiply(f32[8,10]{1,0} %arg_0.18, f32[8,10]{1,0} %broadcast.179), metadata={op_type="Mul" op_name="mul_5" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
}

%_pop_op_implicit_binary_inplace.13 (arg_0.19: f32[1,10], arg_1.17: f32[]) -> f32[1,10] {
  %arg_0.19 = f32[1,10]{1,0} parameter(0)
  %arg_1.17 = f32[] parameter(1)
  %broadcast.180 = f32[1,10]{1,0} broadcast(f32[] %arg_1.17), dimensions={}, metadata={op_type="Mul" op_name="mul_6" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
  ROOT %multiply.117 = f32[1,10]{1,0} multiply(f32[1,10]{1,0} %arg_0.19, f32[1,10]{1,0} %broadcast.180), metadata={op_type="Mul" op_name="mul_6" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
}

%_pop_op_implicit_binary_inplace.14 (arg_0.20: f32[1,10], arg_1.18: f32[]) -> f32[1,10] {
  %arg_0.20 = f32[1,10]{1,0} parameter(0)
  %arg_1.18 = f32[] parameter(1)
  %broadcast.181 = f32[1,10]{1,0} broadcast(f32[] %arg_1.18), dimensions={}, metadata={op_type="Mul" op_name="mul_13" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/ipu/extensions/extensions_base.py" source_line=762}
  ROOT %multiply.118 = f32[1,10]{1,0} multiply(f32[1,10]{1,0} %arg_0.20, f32[1,10]{1,0} %broadcast.181), metadata={op_type="Mul" op_name="mul_13" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/ipu/extensions/extensions_base.py" source_line=762}
}

%pipeline_stage_1_func_1182_grad_1316__.3 (arg7.4: f16[1,10], arg8.4: f16[8,10], arg9.4: f16[1,8], arg10.3: f16[1,6,6,8], arg11.3: f16[1,1,1,8], arg12.3: f16[1,6,6,4], arg13.3: f16[1,1,4,8], input_10.3: f32[], gradient-accumulator-create.36: f32[1,1,4,8], gradient-accumulator-create.37: f32[8], gradient-accumulator-create.38: f32[8,10], gradient-accumulator-create.39: f32[10]) -> (f16[1,6,6,4], f32[], f32[1,1,4,8], f32[8], f32[8,10], /*index=5*/f32[10], f32[], f32[]) {
  %stateful-noop.15 = () custom-call(), custom_call_target="StatefulNoop", custom_call_has_side_effect=true, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %arg10.3 = f16[1,6,6,8]{3,2,1,0} parameter(3), metadata={op_name="XLA_Args"}
  %arg11.3 = f16[1,1,1,8]{3,2,1,0} parameter(4), metadata={op_name="XLA_Args"}
  %arg8.4 = f16[8,10]{1,0} parameter(1), metadata={op_name="XLA_Args"}
  %arg7.4 = f16[1,10]{1,0} parameter(0), metadata={op_name="XLA_Args"}
  %input_10.3 = f32[] parameter(7)
  %convert.110 = f16[] convert(f32[] %input_10.3), metadata={op_type="Cast" op_name="Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=644}
  %fusion.33 = f16[1,10]{1,0} fusion(f16[1,10]{1,0} %arg7.4, f16[] %convert.110), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.9, metadata={op_type="Mul" op_name="gradients/loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %reshape.85 = f16[10]{0} reshape(f16[1,10]{1,0} %fusion.33)
  %fusion.34 = f16[8,10]{1,0} fusion(f16[8,10]{1,0} %arg8.4, f16[10]{0} %reshape.85), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.10, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %constant.165 = f16[] constant(0)
  %reduce.28.clone = f16[8]{0} reduce(f16[8,10]{1,0} %fusion.34, f16[] %constant.165), dimensions={1}, to_apply=%scalar_add_computation, frontend_attributes={ML_TYPE="TRAINING_BWD"}
  %reshape.86 = f16[1,1,1,8]{3,2,1,0} reshape(f16[8]{0} %reduce.28.clone), metadata={op_type="Reshape" op_name="gradients/flatten/Reshape_grad/Reshape" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %max-pool-grad.11 = f16[1,6,6,8]{3,2,1,0} custom-call(f16[1,6,6,8]{3,2,1,0} %arg10.3, f16[1,1,1,8]{3,2,1,0} %arg11.3, f16[1,1,1,8]{3,2,1,0} %reshape.86), custom_call_target="MaxPoolGrad", metadata={op_type="MaxPoolGrad" op_name="gradients/max_pooling2d_1/MaxPool_grad/MaxPoolGrad" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"5506129868324849241\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %relu-grad.11 = f16[1,6,6,8]{3,2,1,0} custom-call(f16[1,6,6,8]{3,2,1,0} %arg10.3, f16[1,6,6,8]{3,2,1,0} %max-pool-grad.11), custom_call_target="ReluGrad", metadata={op_type="ReluGrad" op_name="gradients/conv2d_1/Relu_grad/ReluGrad" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %arg13.3 = f16[1,1,4,8]{3,2,1,0} parameter(6), metadata={op_name="XLA_Args"}
  %conv-with-reverse.1 = f16[1,6,6,4]{3,2,1,0} custom-call(f16[1,6,6,8]{3,2,1,0} %relu-grad.11, f16[1,1,4,8]{3,2,1,0} %arg13.3), custom_call_target="ConvWithReverse", batch_group_count=1, feature_group_count=1, dim_labels=b01f_01oi->b01f, frontend_attributes={ML_TYPE="TRAINING_BWD"}, metadata={op_type="Conv2DBackpropInput" op_name="gradients/conv2d_1/Conv2D_grad/Conv2DBackpropInput" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"5477076295434082907\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %execution-counter.5 = s32[] custom-call(), custom_call_target="ExecutionCounter", metadata={op_type="ExecutionCounter" op_name="ExecutionCounter" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=212}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"1\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %convert.117 = f32[] convert(s32[] %execution-counter.5), metadata={op_type="Cast" op_name="Cast_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/ipu/extensions/extensions_base.py" source_line=762}
  %constant.142 = f32[] constant(1), metadata={op_type="DivNoNan" op_name="gradients/loss/weighted_loss/value_grad/div_no_nan" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %add.13 = f32[] add(f32[] %convert.117, f32[] %constant.142), metadata={op_type="AddV2" op_name="add" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/ipu/extensions/extensions_base.py" source_line=762}
  %inverse = f32[] custom-call(f32[] %add.13), custom_call_target="Inverse", metadata={op_type="RealDiv" op_name="truediv_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/ipu/extensions/extensions_base.py" source_line=762}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %multiply.87 = f32[] multiply(f32[] %convert.117, f32[] %inverse), metadata={op_type="Mul" op_name="mul_7" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/ipu/extensions/extensions_base.py" source_line=762}
  %gradient-accumulator-create.36 = f32[1,1,4,8]{3,2,1,0} parameter(8)
  %arg12.3 = f16[1,6,6,4]{3,2,1,0} parameter(5), metadata={op_name="XLA_Args"}
  %convolution.14 = f16[1,1,4,8]{3,2,1,0} convolution(f16[1,6,6,4]{3,2,1,0} %arg12.3, f16[1,6,6,8]{3,2,1,0} %relu-grad.11), window={size=6x6}, dim_labels=f01b_i01o->01bf, frontend_attributes={ML_TYPE="TRAINING_WU"}, metadata={op_type="Conv2DBackpropFilter" op_name="gradients/conv2d_1/Conv2D_grad/Conv2DBackpropFilter" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %convert.119 = f32[1,1,4,8]{3,2,1,0} convert(f16[1,1,4,8]{3,2,1,0} %convolution.14), metadata={op_type="Cast" op_name="gradients/conv2d_1/Conv2D/Cast_grad/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %inverse.1 = f32[] custom-call(f32[] %input_10.3), custom_call_target="Inverse", metadata={op_type="RealDiv" op_name="truediv" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=667}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %fusion.35 = f32[1,1,4,8]{3,2,1,0} fusion(f32[1,1,4,8]{3,2,1,0} %convert.119, f32[] %inverse.1), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.11, metadata={op_type="Mul" op_name="mul_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %fusion = f32[1,1,4,8]{3,2,1,0} fusion(f32[1,1,4,8]{3,2,1,0} %gradient-accumulator-create.36, f32[1,1,4,8]{3,2,1,0} %fusion.35, f32[] %multiply.87, f32[] %inverse), kind=kCustom, calls=%_pop_op_serialized_gradient_accumulation
  %gradient-accumulator-create.37 = f32[8]{0} parameter(9)
  %reduce.29.clone = f16[8]{0} reduce(f16[1,6,6,8]{3,2,1,0} %relu-grad.11, f16[] %constant.165), dimensions={0,1,2}, to_apply=%region_0.256, metadata={op_name="gradients/conv2d_1/BiasAdd_grad/BiasAddGrad"}
  %broadcast.133 = f32[8]{0} broadcast(f32[] %inverse.1), dimensions={}, metadata={op_type="Mul" op_name="mul_4" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
  %fusion.18 = f32[8]{0} fusion(f16[8]{0} %reduce.29.clone, f32[8]{0} %broadcast.133), kind=kCustom, calls=%_pop_op_arithmetic_expression.10
  %fusion.1 = f32[8]{0} fusion(f32[8]{0} %gradient-accumulator-create.37, f32[8]{0} %fusion.18, f32[] %multiply.87, f32[] %inverse), kind=kCustom, calls=%_pop_op_serialized_gradient_accumulation.1
  %gradient-accumulator-create.38 = f32[8,10]{1,0} parameter(10)
  %arg9.4 = f16[1,8]{1,0} parameter(2), metadata={op_name="XLA_Args"}
  %reshape.87 = f16[8]{0} reshape(f16[1,8]{1,0} %arg9.4)
  %dot.10 = f16[8,10]{1,0} dot(f16[8]{0} %reshape.87, f16[10]{0} %reshape.85), lhs_contracting_dims={}, rhs_contracting_dims={}, frontend_attributes={ML_TYPE="TRAINING_WU"}, metadata={op_type="MatMul" op_name="gradients/dense/MatMul_grad/MatMul_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %convert.126 = f32[8,10]{1,0} convert(f16[8,10]{1,0} %dot.10), metadata={op_type="Cast" op_name="gradients/dense/MatMul/Cast_grad/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %fusion.36 = f32[8,10]{1,0} fusion(f32[8,10]{1,0} %convert.126, f32[] %inverse.1), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.12, metadata={op_type="Mul" op_name="mul_5" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %fusion.2 = f32[8,10]{1,0} fusion(f32[8,10]{1,0} %gradient-accumulator-create.38, f32[8,10]{1,0} %fusion.36, f32[] %multiply.87, f32[] %inverse), kind=kCustom, calls=%_pop_op_serialized_gradient_accumulation.2
  %gradient-accumulator-create.39 = f32[10]{0} parameter(11)
  %convert.146 = f32[1,10]{1,0} convert(f16[1,10]{1,0} %fusion.33), metadata={op_type="Cast" op_name="gradients/dense/BiasAdd/Cast_grad/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %fusion.37 = f32[1,10]{1,0} fusion(f32[1,10]{1,0} %convert.146, f32[] %inverse.1), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.13, metadata={op_type="Mul" op_name="mul_6" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %fusion.38 = f32[1,10]{1,0} fusion(f32[1,10]{1,0} %fusion.37, f32[] %inverse), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.14, metadata={op_type="Mul" op_name="mul_13" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/ipu/extensions/extensions_base.py" source_line=762}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %reshape.96 = f32[10]{0} reshape(f32[1,10]{1,0} %fusion.38), metadata={op_type="Mul" op_name="mul_13" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/ipu/extensions/extensions_base.py" source_line=762}
  %fusion.3 = f32[10]{0} fusion(f32[10]{0} %gradient-accumulator-create.39, f32[] %multiply.87, f32[10]{0} %reshape.96), kind=kCustom, calls=%_pop_op_serialized_gradient_accumulation.3
  ROOT %tuple.59 = (f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) tuple(f16[1,6,6,4]{3,2,1,0} %conv-with-reverse.1, f32[] %multiply.87, f32[1,1,4,8]{3,2,1,0} %fusion, f32[8]{0} %fusion.1, f32[8,10]{1,0} %fusion.2, /*index=5*/f32[10]{0} %fusion.3, f32[] %inverse.1, f32[] %inverse)
}

%region_0.417 (Arg_0.418: f32[], Arg_1.419: f32[]) -> f32[] {
  %Arg_0.418 = f32[] parameter(0)
  %Arg_1.419 = f32[] parameter(1)
  ROOT %add.420 = f32[] add(f32[] %Arg_0.418, f32[] %Arg_1.419), metadata={op_name="gradients/conv2d_0/BiasAdd_grad/BiasAddGrad"}
}

%_pop_op_serialized_gradient_accumulation.4 (p.15: f32[3,3,3,4], p.16: f32[3,3,3,4], p.17: f32[], p.18: f32[]) -> f32[3,3,3,4] {
  %p.15 = f32[3,3,3,4]{3,2,1,0} parameter(0)
  %p.16 = f32[3,3,3,4]{3,2,1,0} parameter(1)
  %p.17 = f32[] parameter(2)
  %p.18 = f32[] parameter(3)
  ROOT %scaled-inplacea-xb-y.3.clone = f32[3,3,3,4]{3,2,1,0} custom-call(f32[3,3,3,4]{3,2,1,0} %p.15, f32[3,3,3,4]{3,2,1,0} %p.16, f32[] %p.17, f32[] %p.18), custom_call_target="ScaledInplaceaXbY", metadata={op_type="GradientAccumulatorAddWithScale" op_name="GradientAccumulatorAddWithScale" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=357}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"1\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
}

%_pop_op_serialized_gradient_accumulation.5 (p.19: f32[4], p.20: f32[4], p.21: f32[], p.22: f32[]) -> f32[4] {
  %p.19 = f32[4]{0} parameter(0)
  %p.20 = f32[4]{0} parameter(1)
  %p.21 = f32[] parameter(2)
  %p.22 = f32[] parameter(3)
  ROOT %scaled-inplacea-xb-y.4.clone = f32[4]{0} custom-call(f32[4]{0} %p.19, f32[4]{0} %p.20, f32[] %p.21, f32[] %p.22), custom_call_target="ScaledInplaceaXbY", metadata={op_type="GradientAccumulatorAddWithScale" op_name="GradientAccumulatorAddWithScale_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=357}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"1\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
}

%_pop_op_arithmetic_expression.11 (p.57: f16[4], p.58: f32[4]) -> f32[4] {
  %p.57 = f16[4]{0} parameter(0)
  %convert.135.clone = f32[4]{0} convert(f16[4]{0} %p.57), metadata={op_type="Cast" op_name="gradients/conv2d_0/BiasAdd/Cast_grad/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %p.58 = f32[4]{0} parameter(1)
  ROOT %multiply.98.clone = f32[4]{0} multiply(f32[4]{0} %convert.135.clone, f32[4]{0} %p.58), metadata={op_type="Mul" op_name="mul_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
}

%_pop_op_implicit_binary_inplace.15 (arg_0.21: f32[3,3,3,4], arg_1.19: f32[]) -> f32[3,3,3,4] {
  %arg_0.21 = f32[3,3,3,4]{3,2,1,0} parameter(0)
  %arg_1.19 = f32[] parameter(1)
  %broadcast.182 = f32[3,3,3,4]{3,2,1,0} broadcast(f32[] %arg_1.19), dimensions={}, metadata={op_type="Mul" op_name="mul_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
  ROOT %multiply.119 = f32[3,3,3,4]{3,2,1,0} multiply(f32[3,3,3,4]{3,2,1,0} %arg_0.21, f32[3,3,3,4]{3,2,1,0} %broadcast.182), metadata={op_type="Mul" op_name="mul_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
}

%pipeline_stage_0_func_1158_grad_1454__.6 (arg0.11: f16[1,6,6,4], arg1.11: f16[1,30,30,4], arg2.11: f16[1,6,6,4], arg3.11: f16[1,32,32,3], gradient-accumulator-create.40: f32[3,3,3,4], get-tuple-element.123: f32[], gradient-accumulator-create.41: f32[4], get-tuple-element.124: f32[], get-tuple-element.125: f32[]) -> (f32[3,3,3,4], f32[4]) {
  %stateful-noop.16 = () custom-call(), custom_call_target="StatefulNoop", custom_call_has_side_effect=true, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %gradient-accumulator-create.40 = f32[3,3,3,4]{3,2,1,0} parameter(4)
  %arg3.11 = f16[1,32,32,3]{3,2,1,0} parameter(3), metadata={op_name="XLA_Args"}
  %arg1.11 = f16[1,30,30,4]{3,2,1,0} parameter(1), metadata={op_name="XLA_Args"}
  %arg2.11 = f16[1,6,6,4]{3,2,1,0} parameter(2), metadata={op_name="XLA_Args"}
  %arg0.11 = f16[1,6,6,4]{3,2,1,0} parameter(0), metadata={op_name="XLA_Args"}
  %max-pool-grad.12 = f16[1,30,30,4]{3,2,1,0} custom-call(f16[1,30,30,4]{3,2,1,0} %arg1.11, f16[1,6,6,4]{3,2,1,0} %arg2.11, f16[1,6,6,4]{3,2,1,0} %arg0.11), custom_call_target="MaxPoolGrad", metadata={op_type="MaxPoolGrad" op_name="gradients/max_pooling2d/MaxPool_grad/MaxPoolGrad" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"5506129868324849241\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %relu-grad.12 = f16[1,30,30,4]{3,2,1,0} custom-call(f16[1,30,30,4]{3,2,1,0} %arg1.11, f16[1,30,30,4]{3,2,1,0} %max-pool-grad.12), custom_call_target="ReluGrad", metadata={op_type="ReluGrad" op_name="gradients/conv2d_0/Relu_grad/ReluGrad" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %convolution.15 = f16[3,3,3,4]{3,2,1,0} convolution(f16[1,32,32,3]{3,2,1,0} %arg3.11, f16[1,30,30,4]{3,2,1,0} %relu-grad.12), window={size=30x30}, dim_labels=f01b_i01o->01bf, frontend_attributes={ML_TYPE="TRAINING_WU"}, metadata={op_type="Conv2DBackpropFilter" op_name="gradients/conv2d_0/Conv2D_grad/Conv2DBackpropFilter" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %convert.132 = f32[3,3,3,4]{3,2,1,0} convert(f16[3,3,3,4]{3,2,1,0} %convolution.15), metadata={op_type="Cast" op_name="gradients/conv2d_0/Conv2D/Cast_grad/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %get-tuple-element.124 = f32[] parameter(7)
  %fusion.39 = f32[3,3,3,4]{3,2,1,0} fusion(f32[3,3,3,4]{3,2,1,0} %convert.132, f32[] %get-tuple-element.124), kind=kCustom, calls=%_pop_op_implicit_binary_inplace.15, metadata={op_type="Mul" op_name="mul_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.123 = f32[] parameter(5)
  %get-tuple-element.125 = f32[] parameter(8)
  %fusion.4 = f32[3,3,3,4]{3,2,1,0} fusion(f32[3,3,3,4]{3,2,1,0} %gradient-accumulator-create.40, f32[3,3,3,4]{3,2,1,0} %fusion.39, f32[] %get-tuple-element.123, f32[] %get-tuple-element.125), kind=kCustom, calls=%_pop_op_serialized_gradient_accumulation.4
  %gradient-accumulator-create.41 = f32[4]{0} parameter(6)
  %constant.168 = f16[] constant(0), metadata={op_type="BiasAddGrad" op_name="gradients/conv2d_0/BiasAdd_grad/BiasAddGrad" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/optimizer_v2/optimizer_v2.py" source_line=748}
  %reduce.30.clone = f16[4]{0} reduce(f16[1,30,30,4]{3,2,1,0} %relu-grad.12, f16[] %constant.168), dimensions={0,1,2}, to_apply=%region_0.417, metadata={op_name="gradients/conv2d_0/BiasAdd_grad/BiasAddGrad"}
  %broadcast.142 = f32[4]{0} broadcast(f32[] %get-tuple-element.124), dimensions={}, metadata={op_type="Mul" op_name="mul_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/loss_scale_optimizer.py" source_line=1209}
  %fusion.19 = f32[4]{0} fusion(f16[4]{0} %reduce.30.clone, f32[4]{0} %broadcast.142), kind=kCustom, calls=%_pop_op_arithmetic_expression.11
  %fusion.5 = f32[4]{0} fusion(f32[4]{0} %gradient-accumulator-create.41, f32[4]{0} %fusion.19, f32[] %get-tuple-element.123, f32[] %get-tuple-element.125), kind=kCustom, calls=%_pop_op_serialized_gradient_accumulation.5
  ROOT %tuple.58 = (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}) tuple(f32[3,3,3,4]{3,2,1,0} %fusion.4, f32[4]{0} %fusion.5)
}

%_pop_op_conv_biasadd.clone (arg_0.22: f16[1,30,30,4], arg_1.20: f16[4]) -> f16[1,30,30,4] {
  %arg_0.22 = f16[1,30,30,4]{3,2,1,0} parameter(0)
  %arg_1.20 = f16[4]{0} parameter(1)
  %broadcast.183 = f16[1,30,30,4]{3,2,1,0} broadcast(f16[4]{0} %arg_1.20), dimensions={3}, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="BiasAdd" op_name="conv2d_0/BiasAdd" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/convolutional.py" source_line=268}
  ROOT %add.22 = f16[1,30,30,4]{3,2,1,0} add(f16[1,30,30,4]{3,2,1,0} %arg_0.22, f16[1,30,30,4]{3,2,1,0} %broadcast.183), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="BiasAdd" op_name="conv2d_0/BiasAdd" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/convolutional.py" source_line=268}
}

%pipeline_stage_0_func_1158_rewritten__.1 (arg0.12: f32[3,3,3,4], arg1.12: f32[4], arg_get-tuple-element.63: (f16[1,32,32,3], s32[1])) -> (f16[1,6,6,4], s32[1,1], f16[1,30,30,4], f16[1,32,32,3]) {
  %stateful-noop.17 = () custom-call(), custom_call_target="StatefulNoop", custom_call_has_side_effect=true, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %arg_get-tuple-element.63 = (f16[1,32,32,3]{3,2,1,0}, s32[1]{0}) parameter(2), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1198}
  %get-tuple-element.127 = f16[1,32,32,3]{3,2,1,0} get-tuple-element((f16[1,32,32,3]{3,2,1,0}, s32[1]{0}) %arg_get-tuple-element.63), index=0, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1198}
  %arg0.12 = f32[3,3,3,4]{3,2,1,0} parameter(0), metadata={op_name="XLA_Args/_AnonymousVar9"}
  %convert.148 = f16[3,3,3,4]{3,2,1,0} convert(f32[3,3,3,4]{3,2,1,0} %arg0.12), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="conv2d_0/Conv2D/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=146}
  %convolution.16 = f16[1,30,30,4]{3,2,1,0} convolution(f16[1,32,32,3]{3,2,1,0} %get-tuple-element.127, f16[3,3,3,4]{3,2,1,0} %convert.148), window={size=3x3}, dim_labels=b01f_01io->b01f, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Conv2D" op_name="conv2d_0/Conv2D" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/convolutional.py" source_line=249}
  %arg1.12 = f32[4]{0} parameter(1), metadata={op_name="XLA_Args/_AnonymousVar10"}
  %convert.152 = f16[4]{0} convert(f32[4]{0} %arg1.12), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Cast" op_name="conv2d_0/BiasAdd/Cast" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/mixed_precision/autocast_variable.py" source_line=146}
  %fusion.40 = f16[1,30,30,4]{3,2,1,0} fusion(f16[1,30,30,4]{3,2,1,0} %convolution.16, f16[4]{0} %convert.152), kind=kCustom, calls=%_pop_op_conv_biasadd.clone, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="BiasAdd" op_name="conv2d_0/BiasAdd" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/convolutional.py" source_line=268}, backend_config="{\"fusion_config\":{\"feature_group_count\":\"0\",\"batch_group_count\":\"0\",\"inplace_descriptions\":[{\"operand_number\":\"0\",\"operand_index\":[],\"output_index\":[],\"kind\":\"USE_ALIAS_READ_WRITE\"}],\"allow_non_inplace\":false},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %relu.4 = f16[1,30,30,4]{3,2,1,0} custom-call(f16[1,30,30,4]{3,2,1,0} %fusion.40), custom_call_target="Relu", frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Relu" op_name="conv2d_0/Relu" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4712}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %max-pool.4 = f16[1,6,6,4]{3,2,1,0} custom-call(f16[1,30,30,4]{3,2,1,0} %relu.4), custom_call_target="MaxPool", frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="MaxPool" op_name="max_pooling2d/MaxPool" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/layers/pooling.py" source_line=360}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"5506129868324849241\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.128 = s32[1]{0} get-tuple-element((f16[1,32,32,3]{3,2,1,0}, s32[1]{0}) %arg_get-tuple-element.63), index=1, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1198}
  %reshape.97 = s32[1,1]{1,0} reshape(s32[1]{0} %get-tuple-element.128), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="ExpandDims" op_name="ExpandDims" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/engine/data_adapter.py" source_line=1449}
  ROOT %tuple.60 = (f16[1,6,6,4]{3,2,1,0}, s32[1,1]{1,0}, f16[1,30,30,4]{3,2,1,0}, f16[1,32,32,3]{3,2,1,0}) tuple(f16[1,6,6,4]{3,2,1,0} %max-pool.4, s32[1,1]{1,0} %reshape.97, f16[1,30,30,4]{3,2,1,0} %relu.4, f16[1,32,32,3]{3,2,1,0} %get-tuple-element.127), sharding={{maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}}
}

%pipeline_wrapper.1044 (input_0.1045: f32[3,3,3,4], input_1.1046: f32[4], input_2.1047: f32[1,1,4,8], input_3.1048: f32[8], input_4.1049: f32[8,10], input_5.1050: f32[10], input_6.1051: f32[], input_7.1052: f32[], input_8.1053: f32[], input_9.1054: f32[], input_10.1055: f32[], input_11.1056: s64[], input_12.1057: s64[], input_13.1058: f32[], input_14.1059: s32[], input_15.1060: f32[], input_16.1061: s32[]) -> (f32[3,3,3,4], f32[4], f32[1,1,4,8], f32[8], f32[8,10], /*index=5*/f32[10], f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) {
  %input_0.1045 = f32[3,3,3,4]{3,2,1,0} parameter(0)
  %input_1.1046 = f32[4]{0} parameter(1)
  %after-all.1.clone = token[] after-all(), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1198}
  %infeed.1 = ((f16[1,32,32,3]{3,2,1,0}, s32[1]{0}), token[]) infeed(token[] %after-all.1.clone), infeed_config="\022\0011\"\002\023\003(\003", frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1198}
  %get-tuple-element.126 = (f16[1,32,32,3]{3,2,1,0}, s32[1]{0}) get-tuple-element(((f16[1,32,32,3]{3,2,1,0}, s32[1]{0}), token[]) %infeed.1), index=0, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1198}
  %call.18 = (f16[1,6,6,4]{3,2,1,0}, s32[1,1]{1,0}, f16[1,30,30,4]{3,2,1,0}, f16[1,32,32,3]{3,2,1,0}) call(f32[3,3,3,4]{3,2,1,0} %input_0.1045, f32[4]{0} %input_1.1046, (f16[1,32,32,3]{3,2,1,0}, s32[1]{0}) %get-tuple-element.126), to_apply=%pipeline_stage_0_func_1158_rewritten__.1, sharding={{maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}}, frontend_attributes={CALL_CONFIG_TYPE="PipelineStage",PIPELINE_STAGE_ID="0"}, metadata={op_type="PipelineStage" op_name="pipeline_stage_0/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}, backend_config="{\"call_config\":{\"type\":\"PipelineStage\",\"pipeline_stage_config\":{\"stage_id\":\"0\"}},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element = f16[1,6,6,4]{3,2,1,0} get-tuple-element((f16[1,6,6,4]{3,2,1,0}, s32[1,1]{1,0}, f16[1,30,30,4]{3,2,1,0}, f16[1,32,32,3]{3,2,1,0}) %call.18), index=0, sharding={maximal device=0}, metadata={op_type="PipelineStage" op_name="pipeline_stage_0/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.1 = s32[1,1]{1,0} get-tuple-element((f16[1,6,6,4]{3,2,1,0}, s32[1,1]{1,0}, f16[1,30,30,4]{3,2,1,0}, f16[1,32,32,3]{3,2,1,0}) %call.18), index=1, sharding={maximal device=0}, metadata={op_type="PipelineStage" op_name="pipeline_stage_0/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %input_2.1047 = f32[1,1,4,8]{3,2,1,0} parameter(2)
  %input_3.1048 = f32[8]{0} parameter(3)
  %input_4.1049 = f32[8,10]{1,0} parameter(4)
  %input_5.1050 = f32[10]{0} parameter(5)
  %input_6.1051 = f32[] parameter(6)
  %input_7.1052 = f32[] parameter(7)
  %input_8.1053 = f32[] parameter(8)
  %input_9.1054 = f32[] parameter(9)
  %call.6 = (f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) call(f16[1,6,6,4]{3,2,1,0} %get-tuple-element, s32[1,1]{1,0} %get-tuple-element.1, f32[1,1,4,8]{3,2,1,0} %input_2.1047, f32[8]{0} %input_3.1048, f32[8,10]{1,0} %input_4.1049, /*index=5*/f32[10]{0} %input_5.1050, f32[] %input_6.1051, f32[] %input_7.1052, f32[] %input_8.1053, f32[] %input_9.1054), to_apply=%pipeline_stage_1_func_1182_rewritten__.0, sharding={{maximal device=1}, {maximal device=1}, {maximal device=1}, {maximal device=1}, {maximal device=1}, {maximal device=1}, {maximal device=1}, {maximal device=1}, {maximal device=1}, {maximal device=1}, {maximal device=1}}, frontend_attributes={CALL_CONFIG_TYPE="PipelineStage",PIPELINE_STAGE_ID="1"}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}, backend_config="{\"call_config\":{\"type\":\"PipelineStage\",\"pipeline_stage_config\":{\"stage_id\":\"1\"}},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.10 = f16[1,10]{1,0} get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=4, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.11 = f16[8,10]{1,0} get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=5, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.12 = f16[1,8]{1,0} get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=6, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.13 = f16[1,6,6,8]{3,2,1,0} get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=7, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.14 = f16[1,1,1,8]{3,2,1,0} get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=8, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.15 = f16[1,6,6,4]{3,2,1,0} get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=9, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.16 = f16[1,1,4,8]{3,2,1,0} get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=10, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %input_10.1055 = f32[] parameter(10)
  %gradient-accumulator-create.8 = f32[1,1,4,8]{3,2,1,0} custom-call(f32[1,1,4,8]{3,2,1,0} %input_2.1047), custom_call_target="GradientAccumulatorCreate", custom_call_has_side_effect=true, metadata={op_type="GradientAccumulatorCreate" op_name="GradientAccumulatorCreate_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=442}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"-4057868178344909203\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %gradient-accumulator-create.9 = f32[8]{0} custom-call(f32[8]{0} %input_3.1048), custom_call_target="GradientAccumulatorCreate", custom_call_has_side_effect=true, metadata={op_type="GradientAccumulatorCreate" op_name="GradientAccumulatorCreate_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=442}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"-4057868178344909203\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %gradient-accumulator-create.10 = f32[8,10]{1,0} custom-call(f32[8,10]{1,0} %input_4.1049), custom_call_target="GradientAccumulatorCreate", custom_call_has_side_effect=true, metadata={op_type="GradientAccumulatorCreate" op_name="GradientAccumulatorCreate_4" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=442}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"-4057868178344909203\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %gradient-accumulator-create.11 = f32[10]{0} custom-call(f32[10]{0} %input_5.1050), custom_call_target="GradientAccumulatorCreate", custom_call_has_side_effect=true, metadata={op_type="GradientAccumulatorCreate" op_name="GradientAccumulatorCreate_5" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=442}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"-4057868178344909203\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %call.16 = (f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) call(f16[1,10]{1,0} %get-tuple-element.10, f16[8,10]{1,0} %get-tuple-element.11, f16[1,8]{1,0} %get-tuple-element.12, f16[1,6,6,8]{3,2,1,0} %get-tuple-element.13, f16[1,1,1,8]{3,2,1,0} %get-tuple-element.14, /*index=5*/f16[1,6,6,4]{3,2,1,0} %get-tuple-element.15, f16[1,1,4,8]{3,2,1,0} %get-tuple-element.16, f32[] %input_10.1055, f32[1,1,4,8]{3,2,1,0} %gradient-accumulator-create.8, f32[8]{0} %gradient-accumulator-create.9, /*index=10*/f32[8,10]{1,0} %gradient-accumulator-create.10, f32[10]{0} %gradient-accumulator-create.11), to_apply=%pipeline_stage_1_func_1182_grad_1316__.3, frontend_attributes={CALL_CONFIG_TYPE="PipelineStageBackward",PIPELINE_STAGE_ID="1"}, metadata={op_type="PipelineStageBackward" op_name="SGDW/gradients/gradients/pipeline_stage_1/PipelineStage_grad/PipelineStageBackward" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=642}, backend_config="{\"call_config\":{\"type\":\"PipelineStageBackward\",\"pipeline_stage_config\":{\"stage_id\":\"1\"}},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.17 = f16[1,6,6,4]{3,2,1,0} get-tuple-element((f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) %call.16), index=0, metadata={op_type="PipelineStageBackward" op_name="SGDW/gradients/gradients/pipeline_stage_1/PipelineStage_grad/PipelineStageBackward" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=642}
  %get-tuple-element.18 = f16[1,30,30,4]{3,2,1,0} get-tuple-element((f16[1,6,6,4]{3,2,1,0}, s32[1,1]{1,0}, f16[1,30,30,4]{3,2,1,0}, f16[1,32,32,3]{3,2,1,0}) %call.18), index=2, sharding={maximal device=0}, metadata={op_type="PipelineStage" op_name="pipeline_stage_0/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %fifo.1 = f16[1,30,30,4]{3,2,1,0} custom-call(f16[1,30,30,4]{3,2,1,0} %get-tuple-element.18), custom_call_target="Fifo", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"-7046029254386352126\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %fifo = f16[1,6,6,4]{3,2,1,0} custom-call(f16[1,6,6,4]{3,2,1,0} %get-tuple-element), custom_call_target="Fifo", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"-7046029254386352126\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.20 = f16[1,32,32,3]{3,2,1,0} get-tuple-element((f16[1,6,6,4]{3,2,1,0}, s32[1,1]{1,0}, f16[1,30,30,4]{3,2,1,0}, f16[1,32,32,3]{3,2,1,0}) %call.18), index=3, sharding={maximal device=0}, metadata={op_type="PipelineStage" op_name="pipeline_stage_0/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %fifo.2 = f16[1,32,32,3]{3,2,1,0} custom-call(f16[1,32,32,3]{3,2,1,0} %get-tuple-element.20), custom_call_target="Fifo", backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"-7046029254386352126\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %gradient-accumulator-create.6 = f32[3,3,3,4]{3,2,1,0} custom-call(f32[3,3,3,4]{3,2,1,0} %input_0.1045), custom_call_target="GradientAccumulatorCreate", custom_call_has_side_effect=true, metadata={op_type="GradientAccumulatorCreate" op_name="GradientAccumulatorCreate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=442}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"-4057868178344909203\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.68 = f32[] get-tuple-element((f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) %call.16), index=1
  %gradient-accumulator-create.7 = f32[4]{0} custom-call(f32[4]{0} %input_1.1046), custom_call_target="GradientAccumulatorCreate", custom_call_has_side_effect=true, metadata={op_type="GradientAccumulatorCreate" op_name="GradientAccumulatorCreate_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=442}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"-4057868178344909203\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.89 = f32[] get-tuple-element((f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) %call.16), index=6
  %get-tuple-element.96 = f32[] get-tuple-element((f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) %call.16), index=7
  %call.17 = (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}) call(f16[1,6,6,4]{3,2,1,0} %get-tuple-element.17, f16[1,30,30,4]{3,2,1,0} %fifo.1, f16[1,6,6,4]{3,2,1,0} %fifo, f16[1,32,32,3]{3,2,1,0} %fifo.2, f32[3,3,3,4]{3,2,1,0} %gradient-accumulator-create.6, /*index=5*/f32[] %get-tuple-element.68, f32[4]{0} %gradient-accumulator-create.7, f32[] %get-tuple-element.89, f32[] %get-tuple-element.96), to_apply=%pipeline_stage_0_func_1158_grad_1454__.6, frontend_attributes={CALL_CONFIG_TYPE="PipelineStageBackward",PIPELINE_STAGE_ID="0"}, metadata={op_type="PipelineStageBackward" op_name="SGDW/gradients/gradients/pipeline_stage_0/PipelineStage_grad/PipelineStageBackward" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=642}, backend_config="{\"call_config\":{\"type\":\"PipelineStageBackward\",\"pipeline_stage_config\":{\"stage_id\":\"0\"}},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.82 = f32[3,3,3,4]{3,2,1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}) %call.17), index=0
  %gradient-accumulator-sink.6 = f32[3,3,3,4]{3,2,1,0} custom-call(f32[3,3,3,4]{3,2,1,0} %get-tuple-element.82), custom_call_target="GradientAccumulatorSink", metadata={op_type="GradientAccumulatorSink" op_name="GradientAccumulatorSink" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=601}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.83 = f32[4]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}) %call.17), index=1
  %gradient-accumulator-sink.7 = f32[4]{0} custom-call(f32[4]{0} %get-tuple-element.83), custom_call_target="GradientAccumulatorSink", metadata={op_type="GradientAccumulatorSink" op_name="GradientAccumulatorSink_1" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=601}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.72 = f32[1,1,4,8]{3,2,1,0} get-tuple-element((f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) %call.16), index=2
  %gradient-accumulator-sink.8 = f32[1,1,4,8]{3,2,1,0} custom-call(f32[1,1,4,8]{3,2,1,0} %get-tuple-element.72), custom_call_target="GradientAccumulatorSink", metadata={op_type="GradientAccumulatorSink" op_name="GradientAccumulatorSink_2" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=601}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.73 = f32[8]{0} get-tuple-element((f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) %call.16), index=3
  %gradient-accumulator-sink.9 = f32[8]{0} custom-call(f32[8]{0} %get-tuple-element.73), custom_call_target="GradientAccumulatorSink", metadata={op_type="GradientAccumulatorSink" op_name="GradientAccumulatorSink_3" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=601}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.74 = f32[8,10]{1,0} get-tuple-element((f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) %call.16), index=4
  %gradient-accumulator-sink.10 = f32[8,10]{1,0} custom-call(f32[8,10]{1,0} %get-tuple-element.74), custom_call_target="GradientAccumulatorSink", metadata={op_type="GradientAccumulatorSink" op_name="GradientAccumulatorSink_4" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=601}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.75 = f32[10]{0} get-tuple-element((f16[1,6,6,4]{3,2,1,0}, f32[], f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[]) %call.16), index=5
  %gradient-accumulator-sink.11 = f32[10]{0} custom-call(f32[10]{0} %get-tuple-element.75), custom_call_target="GradientAccumulatorSink", metadata={op_type="GradientAccumulatorSink" op_name="GradientAccumulatorSink_5" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_poputil_ops.py" source_line=601}, backend_config="{\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %input_11.1056 = s64[] parameter(11)
  %input_12.1057 = s64[] parameter(12)
  %input_13.1058 = f32[] parameter(13)
  %input_14.1059 = s32[] parameter(14)
  %input_15.1060 = f32[] parameter(15)
  %call.4 = (s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) call(f32[3,3,3,4]{3,2,1,0} %gradient-accumulator-sink.6, f32[4]{0} %gradient-accumulator-sink.7, f32[1,1,4,8]{3,2,1,0} %gradient-accumulator-sink.8, f32[8]{0} %gradient-accumulator-sink.9, f32[8,10]{1,0} %gradient-accumulator-sink.10, /*index=5*/f32[10]{0} %gradient-accumulator-sink.11, s64[] %input_11.1056, f32[] %input_10.1055, s64[] %input_12.1057, f32[] %input_13.1058, /*index=10*/s32[] %input_14.1059, f32[] %input_15.1060, f32[3,3,3,4]{3,2,1,0} %input_0.1045, f32[4]{0} %input_1.1046, f32[1,1,4,8]{3,2,1,0} %input_2.1047, /*index=15*/f32[8]{0} %input_3.1048, f32[8,10]{1,0} %input_4.1049, f32[10]{0} %input_5.1050), to_apply=%pipeline_WU_func_1525__.742, frontend_attributes={CALL_CONFIG_TYPE="ResourceUpdate",OFFLOAD_WEIGHT_UPDATE_VARIABLES="THREESTATE_ON",PARTITION_OFFLOADED_WEIGHT_UPDATE_VARIABLES="THREESTATE_OFF"}, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}, backend_config="{\"call_config\":{\"type\":\"ResourceUpdate\",\"resource_update_config\":{\"offload_variables\":\"THREESTATE_ON\",\"partition_offloaded_variables\":\"THREESTATE_OFF\"}},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.31 = f32[3,3,3,4]{3,2,1,0} get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=6, sharding={maximal device=0}, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.33 = f32[4]{0} get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=7, sharding={maximal device=0}, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.35 = f32[1,1,4,8]{3,2,1,0} get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=8, sharding={maximal device=1}, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.37 = f32[8]{0} get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=9, sharding={maximal device=1}, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.39 = f32[8,10]{1,0} get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=10, sharding={maximal device=1}, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.41 = f32[10]{0} get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=11, sharding={maximal device=1}, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.43 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=1, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.45 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=0, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.47 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=3, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.49 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=2, sharding={maximal device=1}, metadata={op_type="PipelineStage" op_name="pipeline_stage_1/PipelineStage" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=528}
  %get-tuple-element.51 = f32[] get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=1, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.53 = s64[] get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=0, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.55 = s64[] get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=2, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.57 = f32[] get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=3, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.59 = s32[] get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=4, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %get-tuple-element.61 = f32[] get-tuple-element((s64[], f32[], s64[], f32[], s32[], /*index=5*/f32[], f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, /*index=10*/f32[8,10]{1,0}, f32[10]{0}) %call.4), index=5, metadata={op_type="ResourceUpdate" op_name="ResourceUpdate" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=839}
  %input_16.1061 = s32[] parameter(16)
  ROOT %tuple.1079 = (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) tuple(f32[3,3,3,4]{3,2,1,0} %get-tuple-element.31, f32[4]{0} %get-tuple-element.33, f32[1,1,4,8]{3,2,1,0} %get-tuple-element.35, f32[8]{0} %get-tuple-element.37, f32[8,10]{1,0} %get-tuple-element.39, /*index=5*/f32[10]{0} %get-tuple-element.41, f32[] %get-tuple-element.43, f32[] %get-tuple-element.45, f32[] %get-tuple-element.47, f32[] %get-tuple-element.49, /*index=10*/f32[] %get-tuple-element.51, s64[] %get-tuple-element.53, s64[] %get-tuple-element.55, f32[] %get-tuple-element.57, s32[] %get-tuple-element.59, /*index=15*/f32[] %get-tuple-element.61, s32[] %input_16.1061)
  %get-tuple-element.129 = f16[1]{0} get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=11, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="SparseSoftmaxCrossEntropyWithLogits" op_name="loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/keras/backend.py" source_line=4957}
  %after-all.2.clone = token[] after-all(), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamOutfeedEnqueue" op_name="loss/PopDatastreamOutfeedEnqueue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1519}
  %outfeed.4 = token[] outfeed(f16[1]{0} %get-tuple-element.129, token[] %after-all.2.clone), outfeed_config="\022\0012\"\001\023(\003", frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamOutfeedEnqueue" op_name="loss/PopDatastreamOutfeedEnqueue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1519}
  %get-tuple-element.130 = f32[] get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=12, frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="Mean" op_name="Mean" source_file="/localdata/babakk/tf2/POPLARSDKTESTSVIEW/public_examples/applications/tensorflow2/image_classification/metrics/metric_enqueuer.py" source_line=21}
  %after-all.3.clone = token[] after-all(), frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamOutfeedEnqueue" op_name="PopDatastreamOutfeedEnqueue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1519}
  %outfeed.5 = token[] outfeed(f32[] %get-tuple-element.130, token[] %after-all.3.clone), outfeed_config="\022\0013\"\001\001(\003", frontend_attributes={ML_TYPE="TRAINING_FWD"}, metadata={op_type="PopDatastreamOutfeedEnqueue" op_name="PopDatastreamOutfeedEnqueue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1519}
  %get-tuple-element.131 = (f32[], f32[]) get-tuple-element((f32[], f32[], f32[], f32[], f16[1,10]{1,0}, /*index=5*/f16[8,10]{1,0}, f16[1,8]{1,0}, f16[1,6,6,8]{3,2,1,0}, f16[1,1,1,8]{3,2,1,0}, f16[1,6,6,4]{3,2,1,0}, /*index=10*/f16[1,1,4,8]{3,2,1,0}, f16[1]{0}, f32[], (f32[], f32[])) %call.6), index=13, metadata={op_type="PopDatastreamOutfeedEnqueue" op_name="PopDatastreamOutfeedEnqueue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1519}
  %after-all.4.clone = token[] after-all(), metadata={op_type="PopDatastreamOutfeedEnqueue" op_name="PopDatastreamOutfeedEnqueue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1519}
  %outfeed.6 = token[] outfeed((f32[], f32[]) %get-tuple-element.131, token[] %after-all.4.clone), outfeed_config="\022\0014\"\002\001\001(\003", metadata={op_type="PopDatastreamOutfeedEnqueue" op_name="PopDatastreamOutfeedEnqueue" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_pop_datastream_ops.py" source_line=1519}
}

ENTRY %a_inference_pipeline_function_1751__XlaMustCompile_true_config_proto___n_007_n_0...02_001_000__executor_type____.1146 (arg0.1: f32[3,3,3,4], arg1.2: f32[4], arg2.3: f32[1,1,4,8], arg3.4: f32[8], arg4.5: f32[8,10], arg5.6: f32[10], arg6.7: f32[], arg7.8: f32[], arg8.9: f32[], arg9.10: f32[], arg10.11: f32[], arg11.12: s64[], arg12.13: s64[], arg13.14: f32[], arg14.15: s32[], arg15.16: f32[]) -> (f32[3,3,3,4], f32[4], f32[1,1,4,8], f32[8], f32[8,10], /*index=5*/f32[10], f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[]) {
  %arg0.1 = f32[3,3,3,4]{3,2,1,0} parameter(0), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar9"}
  %arg1.2 = f32[4]{0} parameter(1), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar10"}
  %arg2.3 = f32[1,1,4,8]{3,2,1,0} parameter(2), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar11"}
  %arg3.4 = f32[8]{0} parameter(3), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar12"}
  %arg4.5 = f32[8,10]{1,0} parameter(4), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar13"}
  %arg5.6 = f32[10]{0} parameter(5), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar14"}
  %arg6.7 = f32[] parameter(6), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar24"}
  %arg7.8 = f32[] parameter(7), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar25"}
  %arg8.9 = f32[] parameter(8), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar20"}
  %arg9.10 = f32[] parameter(9), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar21"}
  %arg10.11 = f32[] parameter(10), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar22"}
  %arg11.12 = s64[] parameter(11), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar23"}
  %arg12.13 = s64[] parameter(12), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar27"}
  %arg13.14 = f32[] parameter(13), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar18"}
  %arg14.15 = s32[] parameter(14), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar29"}
  %arg15.16 = f32[] parameter(15), parameter_replication={false}, metadata={op_name="XLA_Args/_AnonymousVar19"}
  %constant.17 = s32[] constant(4), metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %call.1080 = (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) call(f32[3,3,3,4]{3,2,1,0} %arg0.1, f32[4]{0} %arg1.2, f32[1,1,4,8]{3,2,1,0} %arg2.3, f32[8]{0} %arg3.4, f32[8,10]{1,0} %arg4.5, /*index=5*/f32[10]{0} %arg5.6, f32[] %arg6.7, f32[] %arg7.8, f32[] %arg8.9, f32[] %arg9.10, /*index=10*/f32[] %arg10.11, s64[] %arg11.12, s64[] %arg12.13, f32[] %arg13.14, s32[] %arg14.15, /*index=15*/f32[] %arg15.16, s32[] %constant.17), to_apply=%pipeline_wrapper.1044, frontend_attributes={CALL_CONFIG_TYPE="Pipeline",GradientAccumulationOperandIndex="16",OFFLOAD_ACTIVATIONS="THREESTATE_UNDEFINED",OFFLOAD_GRADIENT_ACCUMULATION_BUFFERS="THREESTATE_UNDEFINED",OFFLOAD_VARIABLES="THREESTATE_UNDEFINED",PARTITION_VARIABLES="THREESTATE_UNDEFINED",PIPELINE_BATCH_SERIALIZATION_ITERATIONS="1",PIPELINE_POPLAR_CONFIG="{
  \"forwardStages\": [
    {},
    {}
  ],
  \"backwardStages\": [
    {},
    {}
  ],
  \"resourceUpdate\": {}
}",PIPELINE_REPEAT_COUNT="12500",PIPELINE_SCHEDULE="0",RECOMPUTATION_MODE="Auto"}, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}, backend_config="{\"call_config\":{\"type\":\"Pipeline\",\"pipeline_config\":{\"batch_serialization_iterations\":\"1\",\"repeat_count\":\"12500\",\"schedule\":\"Grouped\",\"offload_activations\":\"THREESTATE_UNDEFINED\",\"offload_gradient_accumulation_buffers\":\"THREESTATE_UNDEFINED\",\"partition_variables\":\"THREESTATE_UNDEFINED\",\"offload_variables\":\"THREESTATE_UNDEFINED\",\"recomputation_mode\":\"Auto\",\"gradient_accumulation_index\":\"16\"}},\"is_inplace\":false,\"hash_of_custom_attributes\":\"0\",\"stochastic_rounding\":\"THREESTATE_OFF\",\"ml_type\":\"NONE\",\"partials_type\":\"PRIMITIVE_TYPE_INVALID\",\"convolution_options\":[],\"matmul_options\":[],\"slice_options\":[],\"tileset\":\"TILESET_COMPUTE_TILES\",\"is_replica_identical\":false,\"stochastic_rounding_method\":\"StochasticRoundingMethod_Undefined\"}"
  %get-tuple-element.1081 = f32[3,3,3,4]{3,2,1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=0, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1082 = f32[4]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=1, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1083 = f32[1,1,4,8]{3,2,1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=2, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1084 = f32[8]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=3, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1085 = f32[8,10]{1,0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=4, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1086 = f32[10]{0} get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=5, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1087 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=6, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1088 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=7, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1089 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=8, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1090 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=9, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1091 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=10, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1092 = s64[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=11, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1093 = s64[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=12, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1094 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=13, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1095 = s32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=14, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  %get-tuple-element.1096 = f32[] get-tuple-element((f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[], s32[]) %call.1080), index=15, metadata={op_type="Pipeline" op_name="pipeline/Pipeline" source_file="/localdata/babakk/tf2/test_env/lib/python3.6/site-packages/tensorflow/compiler/plugin/poplar/ops/gen_functional_ops.py" source_line=384}
  ROOT %tuple.1145 = (f32[3,3,3,4]{3,2,1,0}, f32[4]{0}, f32[1,1,4,8]{3,2,1,0}, f32[8]{0}, f32[8,10]{1,0}, /*index=5*/f32[10]{0}, f32[], f32[], f32[], f32[], /*index=10*/f32[], s64[], s64[], f32[], s32[], /*index=15*/f32[]) tuple(f32[3,3,3,4]{3,2,1,0} %get-tuple-element.1081, f32[4]{0} %get-tuple-element.1082, f32[1,1,4,8]{3,2,1,0} %get-tuple-element.1083, f32[8]{0} %get-tuple-element.1084, f32[8,10]{1,0} %get-tuple-element.1085, /*index=5*/f32[10]{0} %get-tuple-element.1086, f32[] %get-tuple-element.1087, f32[] %get-tuple-element.1088, f32[] %get-tuple-element.1089, f32[] %get-tuple-element.1090, /*index=10*/f32[] %get-tuple-element.1091, s64[] %get-tuple-element.1092, s64[] %get-tuple-element.1093, f32[] %get-tuple-element.1094, s32[] %get-tuple-element.1095, /*index=15*/f32[] %get-tuple-element.1096), metadata={op_name="XLA_Retvals"}
}
)";

#endif  // TENSORFLOW_COMPILER_PLUGIN_POPLAR_TESTS_T62382_HLO_H_
