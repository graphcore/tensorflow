/* Copyright 2022 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#ifndef TENSORFLOW_COMPILER_PLUGIN_POPLAR_TESTS_HLO_SAMPLES_RNN_HLO_H_
#define TENSORFLOW_COMPILER_PLUGIN_POPLAR_TESTS_HLO_SAMPLES_RNN_HLO_H_

const char* rnn_hlo = R"(
HloModule cluster_8012243920778734216__.1367

%rnn_while_body_91_rewritten_const_0_rearrange_0__.28 (arg_tuple.29: (s32[], s32[], s32[], (f32[5,2,128], s32[]), f32[2,128], /*index=5*/f32[2,128], s32[], (f32[5,2,16], s32[]), (s32[5], s32[]), (f32[5,2,128], s32[]), /*index=10*/(f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,256,128], s32[]), (f32[5,2,256], s32[]), (f32[5,2,128], s32[]), /*index=15*/(f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,144,128], s32[]), (f32[5,2,144], s32[]), f32[144,128], /*index=20*/f32[128], f32[256,128], f32[128])) -> (s32[], s32[], s32[], (f32[5,2,128], s32[]), f32[2,128], /*index=5*/f32[2,128], s32[], (f32[5,2,16], s32[]), (s32[5], s32[]), (f32[5,2,128], s32[]), /*index=10*/(f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,256,128], s32[]), (f32[5,2,256], s32[]), (f32[5,2,128], s32[]), /*index=15*/(f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,144,128], s32[]), (f32[5,2,144], s32[]), f32[144,128], /*index=20*/f32[128], f32[256,128], f32[128]) {
  %constant.53 = s32[] constant(1), metadata={op_type="AddV2" op_name="add_0"}
  %constant.56 = s32[2]{0} constant({2, 128}), metadata={op_type="RandomUniform" op_name="rnn/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"}
  %constant.60 = f32[] constant(0.25), metadata={op_type="GreaterEqual" op_name="rnn/multi_rnn_cell/cell_0/dropout/GreaterEqual"}
  %constant.65 = s32[2]{0} constant({2, 128}), metadata={op_type="RandomUniform" op_name="rnn/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"}
  %constant.69 = f32[] constant(0.25), metadata={op_type="GreaterEqual" op_name="rnn/multi_rnn_cell/cell_1/dropout/GreaterEqual"}
  %constant.74 = s32[] constant(1), metadata={op_type="AddV2" op_name="add_1_0"}
  %constant.81 = s32[] constant(1), metadata={op_type="ConcatV2" op_name="rnn/multi_rnn_cell/cell_0/RNNCell0/concat"}
  %constant.88 = f32[] constant(1.33333337), metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_0/dropout/Mul"}
  %constant.93 = s32[] constant(1), metadata={op_type="ConcatV2" op_name="rnn/multi_rnn_cell/cell_1/RNNCell1/concat"}
  %constant.100 = f32[] constant(1.33333337), metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_1/dropout/Mul"}
  %arg_tuple.29 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.33 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=3
  %get-tuple-element.105 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.33), index=0, metadata={op_type="TensorListSetItem" op_name="TensorArrayV2Write/TensorListSetItem"}
  %constant.106 = s32[] constant(5), metadata={op_type="TensorListSetItem" op_name="TensorArrayV2Write/TensorListSetItem"}
  %get-tuple-element.48 = (f32[5,2,144]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=18
  %get-tuple-element.113 = f32[5,2,144]{2,1,0} get-tuple-element((f32[5,2,144]{2,1,0}, s32[]) %get-tuple-element.48), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %constant.114 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %get-tuple-element.39 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=9
  %get-tuple-element.123 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.39), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %constant.124 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %get-tuple-element.40 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=10
  %get-tuple-element.133 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.40), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %constant.134 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %get-tuple-element.41 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=11
  %get-tuple-element.143 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.41), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %constant.144 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %get-tuple-element.42 = (f32[5,256,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=12
  %get-tuple-element.153 = f32[5,256,128]{2,1,0} get-tuple-element((f32[5,256,128]{2,1,0}, s32[]) %get-tuple-element.42), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %constant.154 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %get-tuple-element.43 = (f32[5,2,256]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=13
  %get-tuple-element.163 = f32[5,2,256]{2,1,0} get-tuple-element((f32[5,2,256]{2,1,0}, s32[]) %get-tuple-element.43), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %constant.164 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %get-tuple-element.44 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=14
  %get-tuple-element.173 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.44), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %constant.174 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %get-tuple-element.45 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=15
  %get-tuple-element.183 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.45), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %constant.184 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %get-tuple-element.46 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=16
  %get-tuple-element.193 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.46), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %constant.194 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %get-tuple-element.47 = (f32[5,144,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=17
  %get-tuple-element.203 = f32[5,144,128]{2,1,0} get-tuple-element((f32[5,144,128]{2,1,0}, s32[]) %get-tuple-element.47), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %constant.204 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %get-tuple-element.38 = (s32[5]{0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=8
  %get-tuple-element.213 = s32[5]{0} get-tuple-element((s32[5]{0}, s32[]) %get-tuple-element.38), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %constant.214 = s32[] constant(5), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %constant.217 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %get-tuple-element.30 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=0
  %constant.75 = s32[] constant(1), metadata={op_type="AddV2" op_name="add_1_0"}
  %add.76 = s32[] add(s32[] %get-tuple-element.30, s32[] %constant.75), metadata={op_type="AddV2" op_name="add_1_0"}
  %get-tuple-element.31 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=1
  %get-tuple-element.32 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=2
  %constant.54 = s32[] constant(1), metadata={op_type="AddV2" op_name="add_0"}
  %add.55 = s32[] add(s32[] %get-tuple-element.32, s32[] %constant.54), metadata={op_type="AddV2" op_name="add_0"}
  %get-tuple-element.109 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.33), index=0, metadata={op_type="TensorListSetItem" op_name="TensorArrayV2Write/TensorListSetItem"}
  %get-tuple-element.37 = (f32[5,2,16]{2,0,1}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=7
  %get-tuple-element.78 = f32[5,2,16]{2,0,1} get-tuple-element((f32[5,2,16]{2,0,1}, s32[]) %get-tuple-element.37), index=0, metadata={op_type="TensorListGetItem" op_name="TensorArrayV2Read/TensorListGetItem"}
  %constant.77 = s32[] constant(0), metadata={op_type="TensorListGetItem" op_name="TensorArrayV2Read/TensorListGetItem"}
  %dynamic-slice.79 = f32[1,2,16]{2,1,0} dynamic-slice(f32[5,2,16]{2,0,1} %get-tuple-element.78, s32[] %get-tuple-element.32, s32[] %constant.77, s32[] %constant.77), dynamic_slice_sizes={1,2,16}, metadata={op_type="TensorListGetItem" op_name="TensorArrayV2Read/TensorListGetItem"}
  %reshape.80 = f32[2,16]{1,0} reshape(f32[1,2,16]{2,1,0} %dynamic-slice.79), metadata={op_type="TensorListGetItem" op_name="TensorArrayV2Read/TensorListGetItem"}
  %get-tuple-element.34 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=4
  %concatenate.82 = f32[2,144]{1,0} concatenate(f32[2,16]{1,0} %reshape.80, f32[2,128]{1,0} %get-tuple-element.34), dimensions={1}, metadata={op_type="ConcatV2" op_name="rnn/multi_rnn_cell/cell_0/RNNCell0/concat"}
  %get-tuple-element.49 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=19
  %dot.83 = f32[2,128]{1,0} dot(f32[2,144]{1,0} %concatenate.82, f32[144,128]{1,0} %get-tuple-element.49), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul"}
  %transpose.84 = f32[2,128]{1,0} transpose(f32[2,128]{1,0} %dot.83), dimensions={0,1}, metadata={op_type="MatMul" op_name="rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul"}
  %get-tuple-element.50 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=20
  %broadcast.85 = f32[2,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.50), dimensions={1}, metadata={op_type="BiasAdd" op_name="rnn/multi_rnn_cell/cell_0/RNNCell0/BiasAdd"}
  %add.86 = f32[2,128]{1,0} add(f32[2,128]{1,0} %transpose.84, f32[2,128]{1,0} %broadcast.85), metadata={op_type="BiasAdd" op_name="rnn/multi_rnn_cell/cell_0/RNNCell0/BiasAdd"}
  %tanh.87 = f32[2,128]{1,0} tanh(f32[2,128]{1,0} %add.86), metadata={op_name="rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh"}
  %constant.89 = f32[] constant(1.33333337), metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_0/dropout/Mul"}
  %broadcast.90 = f32[2,128]{1,0} broadcast(f32[] %constant.89), dimensions={}, metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_0/dropout/Mul"}
  %multiply.91 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %tanh.87, f32[2,128]{1,0} %broadcast.90), metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_0/dropout/Mul"}
  %constant.58 = f32[] constant(0), metadata={op_type="RandomUniform" op_name="rnn/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"}
  %constant.57 = f32[] constant(1), metadata={op_type="RandomUniform" op_name="rnn/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"}
  %rng.59 = f32[2,128]{1,0} rng(f32[] %constant.58, f32[] %constant.57), distribution=rng_uniform, metadata={op_type="RandomUniform" op_name="rnn/multi_rnn_cell/cell_0/dropout/random_uniform/RandomUniform"}
  %constant.61 = f32[] constant(0.25), metadata={op_type="GreaterEqual" op_name="rnn/multi_rnn_cell/cell_0/dropout/GreaterEqual"}
  %broadcast.62 = f32[2,128]{1,0} broadcast(f32[] %constant.61), dimensions={}, metadata={op_type="GreaterEqual" op_name="rnn/multi_rnn_cell/cell_0/dropout/GreaterEqual"}
  %compare.63 = pred[2,128]{1,0} compare(f32[2,128]{1,0} %rng.59, f32[2,128]{1,0} %broadcast.62), direction=GE, metadata={op_type="GreaterEqual" op_name="rnn/multi_rnn_cell/cell_0/dropout/GreaterEqual"}
  %convert.64 = f32[2,128]{1,0} convert(pred[2,128]{1,0} %compare.63), metadata={op_type="Cast" op_name="rnn/multi_rnn_cell/cell_0/dropout/Cast"}
  %multiply.92 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %multiply.91, f32[2,128]{1,0} %convert.64), metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_0/dropout/Mul_1"}
  %get-tuple-element.35 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=5
  %concatenate.94 = f32[2,256]{1,0} concatenate(f32[2,128]{1,0} %multiply.92, f32[2,128]{1,0} %get-tuple-element.35), dimensions={1}, metadata={op_type="ConcatV2" op_name="rnn/multi_rnn_cell/cell_1/RNNCell1/concat"}
  %get-tuple-element.51 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=21
  %dot.95 = f32[2,128]{1,0} dot(f32[2,256]{1,0} %concatenate.94, f32[256,128]{1,0} %get-tuple-element.51), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul"}
  %transpose.96 = f32[2,128]{1,0} transpose(f32[2,128]{1,0} %dot.95), dimensions={0,1}, metadata={op_type="MatMul" op_name="rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul"}
  %get-tuple-element.52 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=22
  %broadcast.97 = f32[2,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.52), dimensions={1}, metadata={op_type="BiasAdd" op_name="rnn/multi_rnn_cell/cell_1/RNNCell1/BiasAdd"}
  %add.98 = f32[2,128]{1,0} add(f32[2,128]{1,0} %transpose.96, f32[2,128]{1,0} %broadcast.97), metadata={op_type="BiasAdd" op_name="rnn/multi_rnn_cell/cell_1/RNNCell1/BiasAdd"}
  %tanh.99 = f32[2,128]{1,0} tanh(f32[2,128]{1,0} %add.98), metadata={op_name="rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh"}
  %constant.101 = f32[] constant(1.33333337), metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_1/dropout/Mul"}
  %broadcast.102 = f32[2,128]{1,0} broadcast(f32[] %constant.101), dimensions={}, metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_1/dropout/Mul"}
  %multiply.103 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %tanh.99, f32[2,128]{1,0} %broadcast.102), metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_1/dropout/Mul"}
  %constant.67 = f32[] constant(0), metadata={op_type="RandomUniform" op_name="rnn/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"}
  %constant.66 = f32[] constant(1), metadata={op_type="RandomUniform" op_name="rnn/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"}
  %rng.68 = f32[2,128]{1,0} rng(f32[] %constant.67, f32[] %constant.66), distribution=rng_uniform, metadata={op_type="RandomUniform" op_name="rnn/multi_rnn_cell/cell_1/dropout/random_uniform/RandomUniform"}
  %constant.70 = f32[] constant(0.25), metadata={op_type="GreaterEqual" op_name="rnn/multi_rnn_cell/cell_1/dropout/GreaterEqual"}
  %broadcast.71 = f32[2,128]{1,0} broadcast(f32[] %constant.70), dimensions={}, metadata={op_type="GreaterEqual" op_name="rnn/multi_rnn_cell/cell_1/dropout/GreaterEqual"}
  %compare.72 = pred[2,128]{1,0} compare(f32[2,128]{1,0} %rng.68, f32[2,128]{1,0} %broadcast.71), direction=GE, metadata={op_type="GreaterEqual" op_name="rnn/multi_rnn_cell/cell_1/dropout/GreaterEqual"}
  %convert.73 = f32[2,128]{1,0} convert(pred[2,128]{1,0} %compare.72), metadata={op_type="Cast" op_name="rnn/multi_rnn_cell/cell_1/dropout/Cast"}
  %multiply.104 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %multiply.103, f32[2,128]{1,0} %convert.73), metadata={op_type="Mul" op_name="rnn/multi_rnn_cell/cell_1/dropout/Mul_1"}
  %reshape.107 = f32[1,2,128]{2,1,0} reshape(f32[2,128]{1,0} %multiply.104), metadata={op_type="TensorListSetItem" op_name="TensorArrayV2Write/TensorListSetItem"}
  %constant.108 = s32[] constant(0), metadata={op_type="TensorListSetItem" op_name="TensorArrayV2Write/TensorListSetItem"}
  %dynamic-update-slice.110 = f32[5,2,128]{2,1,0} dynamic-update-slice(f32[5,2,128]{2,1,0} %get-tuple-element.109, f32[1,2,128]{2,1,0} %reshape.107, s32[] %get-tuple-element.32, s32[] %constant.108, s32[] %constant.108), metadata={op_type="TensorListSetItem" op_name="TensorArrayV2Write/TensorListSetItem"}
  %get-tuple-element.111 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.33), index=1, metadata={op_type="TensorListSetItem" op_name="TensorArrayV2Write/TensorListSetItem"}
  %tuple.112 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %dynamic-update-slice.110, s32[] %get-tuple-element.111), metadata={op_type="TensorListSetItem" op_name="TensorArrayV2Write/TensorListSetItem"}
  %get-tuple-element.36 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.29), index=6
  %get-tuple-element.218 = s32[5]{0} get-tuple-element((s32[5]{0}, s32[]) %get-tuple-element.38), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %reshape.216 = s32[1]{0} reshape(s32[] %get-tuple-element.32), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %get-tuple-element.215 = s32[] get-tuple-element((s32[5]{0}, s32[]) %get-tuple-element.38), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %dynamic-update-slice.219 = s32[5]{0} dynamic-update-slice(s32[5]{0} %get-tuple-element.218, s32[1]{0} %reshape.216, s32[] %get-tuple-element.215), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %constant.220 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %add.221 = s32[] add(s32[] %get-tuple-element.215, s32[] %constant.220), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %tuple.222 = (s32[5]{0}, s32[]) tuple(s32[5]{0} %dynamic-update-slice.219, s32[] %add.221), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack"}
  %get-tuple-element.128 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.39), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %reshape.126 = f32[1,2,128]{2,1,0} reshape(f32[2,128]{1,0} %convert.73), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %get-tuple-element.125 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.39), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %constant.127 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %dynamic-update-slice.129 = f32[5,2,128]{2,1,0} dynamic-update-slice(f32[5,2,128]{2,1,0} %get-tuple-element.128, f32[1,2,128]{2,1,0} %reshape.126, s32[] %get-tuple-element.125, s32[] %constant.127, s32[] %constant.127), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %constant.130 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %add.131 = s32[] add(s32[] %get-tuple-element.125, s32[] %constant.130), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %tuple.132 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %dynamic-update-slice.129, s32[] %add.131), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_1"}
  %get-tuple-element.138 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.40), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %reshape.136 = f32[1,2,128]{2,1,0} reshape(f32[2,128]{1,0} %multiply.103), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %get-tuple-element.135 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.40), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %constant.137 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %dynamic-update-slice.139 = f32[5,2,128]{2,1,0} dynamic-update-slice(f32[5,2,128]{2,1,0} %get-tuple-element.138, f32[1,2,128]{2,1,0} %reshape.136, s32[] %get-tuple-element.135, s32[] %constant.137, s32[] %constant.137), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %constant.140 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %add.141 = s32[] add(s32[] %get-tuple-element.135, s32[] %constant.140), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %tuple.142 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %dynamic-update-slice.139, s32[] %add.141), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_2"}
  %get-tuple-element.148 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.41), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %reshape.146 = f32[1,2,128]{2,1,0} reshape(f32[2,128]{1,0} %tanh.99), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %get-tuple-element.145 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.41), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %constant.147 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %dynamic-update-slice.149 = f32[5,2,128]{2,1,0} dynamic-update-slice(f32[5,2,128]{2,1,0} %get-tuple-element.148, f32[1,2,128]{2,1,0} %reshape.146, s32[] %get-tuple-element.145, s32[] %constant.147, s32[] %constant.147), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %constant.150 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %add.151 = s32[] add(s32[] %get-tuple-element.145, s32[] %constant.150), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %tuple.152 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %dynamic-update-slice.149, s32[] %add.151), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_3"}
  %get-tuple-element.158 = f32[5,256,128]{2,1,0} get-tuple-element((f32[5,256,128]{2,1,0}, s32[]) %get-tuple-element.42), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %reshape.156 = f32[1,256,128]{2,1,0} reshape(f32[256,128]{1,0} %get-tuple-element.51), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %get-tuple-element.155 = s32[] get-tuple-element((f32[5,256,128]{2,1,0}, s32[]) %get-tuple-element.42), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %constant.157 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %dynamic-update-slice.159 = f32[5,256,128]{2,1,0} dynamic-update-slice(f32[5,256,128]{2,1,0} %get-tuple-element.158, f32[1,256,128]{2,1,0} %reshape.156, s32[] %get-tuple-element.155, s32[] %constant.157, s32[] %constant.157), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %constant.160 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %add.161 = s32[] add(s32[] %get-tuple-element.155, s32[] %constant.160), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %tuple.162 = (f32[5,256,128]{2,1,0}, s32[]) tuple(f32[5,256,128]{2,1,0} %dynamic-update-slice.159, s32[] %add.161), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_4"}
  %get-tuple-element.168 = f32[5,2,256]{2,1,0} get-tuple-element((f32[5,2,256]{2,1,0}, s32[]) %get-tuple-element.43), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %reshape.166 = f32[1,2,256]{2,1,0} reshape(f32[2,256]{1,0} %concatenate.94), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %get-tuple-element.165 = s32[] get-tuple-element((f32[5,2,256]{2,1,0}, s32[]) %get-tuple-element.43), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %constant.167 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %dynamic-update-slice.169 = f32[5,2,256]{2,1,0} dynamic-update-slice(f32[5,2,256]{2,1,0} %get-tuple-element.168, f32[1,2,256]{2,1,0} %reshape.166, s32[] %get-tuple-element.165, s32[] %constant.167, s32[] %constant.167), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %constant.170 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %add.171 = s32[] add(s32[] %get-tuple-element.165, s32[] %constant.170), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %tuple.172 = (f32[5,2,256]{2,1,0}, s32[]) tuple(f32[5,2,256]{2,1,0} %dynamic-update-slice.169, s32[] %add.171), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_5"}
  %get-tuple-element.178 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.44), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %reshape.176 = f32[1,2,128]{2,1,0} reshape(f32[2,128]{1,0} %convert.64), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %get-tuple-element.175 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.44), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %constant.177 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %dynamic-update-slice.179 = f32[5,2,128]{2,1,0} dynamic-update-slice(f32[5,2,128]{2,1,0} %get-tuple-element.178, f32[1,2,128]{2,1,0} %reshape.176, s32[] %get-tuple-element.175, s32[] %constant.177, s32[] %constant.177), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %constant.180 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %add.181 = s32[] add(s32[] %get-tuple-element.175, s32[] %constant.180), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %tuple.182 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %dynamic-update-slice.179, s32[] %add.181), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_6"}
  %get-tuple-element.188 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.45), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %reshape.186 = f32[1,2,128]{2,1,0} reshape(f32[2,128]{1,0} %multiply.91), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %get-tuple-element.185 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.45), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %constant.187 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %dynamic-update-slice.189 = f32[5,2,128]{2,1,0} dynamic-update-slice(f32[5,2,128]{2,1,0} %get-tuple-element.188, f32[1,2,128]{2,1,0} %reshape.186, s32[] %get-tuple-element.185, s32[] %constant.187, s32[] %constant.187), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %constant.190 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %add.191 = s32[] add(s32[] %get-tuple-element.185, s32[] %constant.190), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %tuple.192 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %dynamic-update-slice.189, s32[] %add.191), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_7"}
  %get-tuple-element.198 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.46), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %reshape.196 = f32[1,2,128]{2,1,0} reshape(f32[2,128]{1,0} %tanh.87), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %get-tuple-element.195 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.46), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %constant.197 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %dynamic-update-slice.199 = f32[5,2,128]{2,1,0} dynamic-update-slice(f32[5,2,128]{2,1,0} %get-tuple-element.198, f32[1,2,128]{2,1,0} %reshape.196, s32[] %get-tuple-element.195, s32[] %constant.197, s32[] %constant.197), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %constant.200 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %add.201 = s32[] add(s32[] %get-tuple-element.195, s32[] %constant.200), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %tuple.202 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %dynamic-update-slice.199, s32[] %add.201), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_8"}
  %get-tuple-element.208 = f32[5,144,128]{2,1,0} get-tuple-element((f32[5,144,128]{2,1,0}, s32[]) %get-tuple-element.47), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %reshape.206 = f32[1,144,128]{2,1,0} reshape(f32[144,128]{1,0} %get-tuple-element.49), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %get-tuple-element.205 = s32[] get-tuple-element((f32[5,144,128]{2,1,0}, s32[]) %get-tuple-element.47), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %constant.207 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %dynamic-update-slice.209 = f32[5,144,128]{2,1,0} dynamic-update-slice(f32[5,144,128]{2,1,0} %get-tuple-element.208, f32[1,144,128]{2,1,0} %reshape.206, s32[] %get-tuple-element.205, s32[] %constant.207, s32[] %constant.207), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %constant.210 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %add.211 = s32[] add(s32[] %get-tuple-element.205, s32[] %constant.210), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %tuple.212 = (f32[5,144,128]{2,1,0}, s32[]) tuple(f32[5,144,128]{2,1,0} %dynamic-update-slice.209, s32[] %add.211), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_9"}
  %get-tuple-element.118 = f32[5,2,144]{2,1,0} get-tuple-element((f32[5,2,144]{2,1,0}, s32[]) %get-tuple-element.48), index=0, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %reshape.116 = f32[1,2,144]{2,1,0} reshape(f32[2,144]{1,0} %concatenate.82), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %get-tuple-element.115 = s32[] get-tuple-element((f32[5,2,144]{2,1,0}, s32[]) %get-tuple-element.48), index=1, metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %constant.117 = s32[] constant(0), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %dynamic-update-slice.119 = f32[5,2,144]{2,1,0} dynamic-update-slice(f32[5,2,144]{2,1,0} %get-tuple-element.118, f32[1,2,144]{2,1,0} %reshape.116, s32[] %get-tuple-element.115, s32[] %constant.117, s32[] %constant.117), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %constant.120 = s32[] constant(1), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %add.121 = s32[] add(s32[] %get-tuple-element.115, s32[] %constant.120), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %tuple.122 = (f32[5,2,144]{2,1,0}, s32[]) tuple(f32[5,2,144]{2,1,0} %dynamic-update-slice.119, s32[] %add.121), metadata={op_type="TensorListPushBack" op_name="TensorListPushBack_10"}
  %tuple.223 = (f32[144,128]{1,0}) tuple(f32[144,128]{1,0} %get-tuple-element.49), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.224 = f32[144,128]{1,0} get-tuple-element((f32[144,128]{1,0}) %tuple.223), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.225 = (f32[128]{0}) tuple(f32[128]{0} %get-tuple-element.50), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.226 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.225), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.227 = (f32[256,128]{1,0}) tuple(f32[256,128]{1,0} %get-tuple-element.51), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.228 = f32[256,128]{1,0} get-tuple-element((f32[256,128]{1,0}) %tuple.227), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.229 = (f32[128]{0}) tuple(f32[128]{0} %get-tuple-element.52), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.230 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.229), index=0, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.231 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) tuple(s32[] %add.76, s32[] %get-tuple-element.31, s32[] %add.55, (f32[5,2,128]{2,1,0}, s32[]) %tuple.112, f32[2,128]{1,0} %tanh.87, /*index=5*/f32[2,128]{1,0} %tanh.99, s32[] %get-tuple-element.36, (f32[5,2,16]{2,0,1}, s32[]) %get-tuple-element.37, (s32[5]{0}, s32[]) %tuple.222, (f32[5,2,128]{2,1,0}, s32[]) %tuple.132, /*index=10*/(f32[5,2,128]{2,1,0}, s32[]) %tuple.142, (f32[5,2,128]{2,1,0}, s32[]) %tuple.152, (f32[5,256,128]{2,1,0}, s32[]) %tuple.162, (f32[5,2,256]{2,1,0}, s32[]) %tuple.172, (f32[5,2,128]{2,1,0}, s32[]) %tuple.182, /*index=15*/(f32[5,2,128]{2,1,0}, s32[]) %tuple.192, (f32[5,2,128]{2,1,0}, s32[]) %tuple.202, (f32[5,144,128]{2,1,0}, s32[]) %tuple.212, (f32[5,2,144]{2,1,0}, s32[]) %tuple.122, f32[144,128]{1,0} %get-tuple-element.224, /*index=20*/f32[128]{0} %get-tuple-element.226, f32[256,128]{1,0} %get-tuple-element.228, f32[128]{0} %get-tuple-element.230), metadata={op_name="XLA_Retvals"}
}

%rnn_while_cond_90_rewritten_const_0_rearrange_0__.232 (arg_tuple.233: (s32[], s32[], s32[], (f32[5,2,128], s32[]), f32[2,128], /*index=5*/f32[2,128], s32[], (f32[5,2,16], s32[]), (s32[5], s32[]), (f32[5,2,128], s32[]), /*index=10*/(f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,256,128], s32[]), (f32[5,2,256], s32[]), (f32[5,2,128], s32[]), /*index=15*/(f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,144,128], s32[]), (f32[5,2,144], s32[]), f32[144,128], /*index=20*/f32[128], f32[256,128], f32[128])) -> (pred[]) {
  %arg_tuple.233 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.235 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=1
  %get-tuple-element.237 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=3
  %get-tuple-element.238 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=4
  %get-tuple-element.239 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=5
  %get-tuple-element.240 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=6
  %get-tuple-element.241 = (f32[5,2,16]{2,0,1}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=7
  %get-tuple-element.242 = (s32[5]{0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=8
  %get-tuple-element.243 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=9
  %get-tuple-element.244 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=10
  %get-tuple-element.245 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=11
  %get-tuple-element.246 = (f32[5,256,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=12
  %get-tuple-element.247 = (f32[5,2,256]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=13
  %get-tuple-element.248 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=14
  %get-tuple-element.249 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=15
  %get-tuple-element.250 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=16
  %get-tuple-element.251 = (f32[5,144,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=17
  %get-tuple-element.252 = (f32[5,2,144]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=18
  %get-tuple-element.253 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=19
  %get-tuple-element.254 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=20
  %get-tuple-element.255 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=21
  %get-tuple-element.256 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=22
  %constant.257 = s32[] constant(5), metadata={op_type="Less" op_name="Less"}
  %constant.260 = s32[] constant(5), metadata={op_type="Less" op_name="Less_1"}
  %get-tuple-element.234 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=0
  %constant.261 = s32[] constant(5), metadata={op_type="Less" op_name="Less_1"}
  %compare.262 = pred[] compare(s32[] %get-tuple-element.234, s32[] %constant.261), direction=LT, metadata={op_type="Less" op_name="Less_1"}
  %get-tuple-element.236 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %arg_tuple.233), index=2
  %constant.258 = s32[] constant(5), metadata={op_type="Less" op_name="Less"}
  %compare.259 = pred[] compare(s32[] %get-tuple-element.236, s32[] %constant.258), direction=LT, metadata={op_type="Less" op_name="Less"}
  %and.263 = pred[] and(pred[] %compare.262, pred[] %compare.259), metadata={op_type="LogicalAnd" op_name="LogicalAnd"}
  ROOT %tuple.264 = (pred[]) tuple(pred[] %and.263), metadata={op_name="XLA_Retvals"}
}

%cond_wrapper.265 (inputs.266: (s32[], s32[], s32[], (f32[5,2,128], s32[]), f32[2,128], /*index=5*/f32[2,128], s32[], (f32[5,2,16], s32[]), (s32[5], s32[]), (f32[5,2,128], s32[]), /*index=10*/(f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,256,128], s32[]), (f32[5,2,256], s32[]), (f32[5,2,128], s32[]), /*index=15*/(f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,144,128], s32[]), (f32[5,2,144], s32[]), f32[144,128], /*index=20*/f32[128], f32[256,128], f32[128])) -> pred[] {
  %inputs.266 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) parameter(0)
  %call.267 = (pred[]) call((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %inputs.266), to_apply=%rnn_while_cond_90_rewritten_const_0_rearrange_0__.232
  ROOT %get-tuple-element.268 = pred[] get-tuple-element((pred[]) %call.267), index=0
}

%mean_squared_error_Sum-reduction.269 (x.270: f32[], y.271: f32[]) -> f32[] {
  %x.270 = f32[] parameter(0)
  %y.271 = f32[] parameter(1)
  ROOT %add.272 = f32[] add(f32[] %x.270, f32[] %y.271)
}

%gradients_mean_squared_error_Mul_grad_Sum-reduction.273 (x.274: f32[], y.275: f32[]) -> f32[] {
  %x.274 = f32[] parameter(0)
  %y.275 = f32[] parameter(1)
  ROOT %add.276 = f32[] add(f32[] %x.274, f32[] %y.275)
}

%region_0.277 (Arg_0.278: f32[], Arg_1.279: f32[]) -> f32[] {
  %Arg_0.278 = f32[] parameter(0)
  %Arg_1.279 = f32[] parameter(1)
  ROOT %add.280 = f32[] add(f32[] %Arg_0.278, f32[] %Arg_1.279), metadata={op_name="gradients/dense/BiasAdd_grad/BiasAddGrad"}
}

%gradients_rnn_multi_rnn_cell_cell_1_dropout_Mul_grad_Sum-reduction.281 (x.282: f32[], y.283: f32[]) -> f32[] {
  %x.282 = f32[] parameter(0)
  %y.283 = f32[] parameter(1)
  ROOT %add.284 = f32[] add(f32[] %x.282, f32[] %y.283)
}

%region_0.285 (Arg_0.286: f32[], Arg_1.287: f32[]) -> f32[] {
  %Arg_0.286 = f32[] parameter(0)
  %Arg_1.287 = f32[] parameter(1)
  ROOT %add.288 = f32[] add(f32[] %Arg_0.286, f32[] %Arg_1.287), metadata={op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/BiasAdd_grad/BiasAddGrad"}
}

%region_0.289 (Arg_0.290: f32[], Arg_1.291: f32[]) -> f32[] {
  %Arg_0.290 = f32[] parameter(0)
  %Arg_1.291 = f32[] parameter(1)
  ROOT %add.292 = f32[] add(f32[] %Arg_0.290, f32[] %Arg_1.291), metadata={op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/BiasAdd_grad/BiasAddGrad"}
}

%gradients_rnn_multi_rnn_cell_cell_0_dropout_Mul_grad_Sum-reduction.293 (x.294: f32[], y.295: f32[]) -> f32[] {
  %x.294 = f32[] parameter(0)
  %y.295 = f32[] parameter(1)
  ROOT %add.296 = f32[] add(f32[] %x.294, f32[] %y.295)
}

%rnn_while_body_91_grad_340_const_0__.297 (arg_tuple.298: (s32[], s32[], s32[], (f32[5,2,128], s32[]), f32[2,128], /*index=5*/f32[2,128], (f32[5,2,16], s32[]), f32[144,128], f32[128], f32[256,128], /*index=10*/f32[128], (s32[5], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), /*index=15*/(f32[5,256,128], s32[]), (f32[5,2,256], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), /*index=20*/(f32[5,144,128], s32[]), (f32[5,2,144], s32[]), (f32[5,2,16], s32[]))) -> (s32[], s32[], s32[], (f32[5,2,128], s32[]), f32[2,128], /*index=5*/f32[2,128], (f32[5,2,16], s32[]), f32[144,128], f32[128], f32[256,128], /*index=10*/f32[128], (s32[5], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), /*index=15*/(f32[5,256,128], s32[]), (f32[5,2,256], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), /*index=20*/(f32[5,144,128], s32[]), (f32[5,2,144], s32[]), (f32[5,2,16], s32[])) {
  %constant.324 = s32[2]{0} constant({2, 128}), metadata={op_type="BroadcastGradientArgs" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/BroadcastGradientArgs"}
  %constant.325 = s32[0]{0} constant({}), metadata={op_type="BroadcastGradientArgs" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/BroadcastGradientArgs"}
  %constant.406 = s32[2]{0} constant({2, 16}), metadata={op_type="TensorListElementShape" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListElementShape"}
  %arg_tuple.298 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.321 = (f32[5,2,16]{2,0,1}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=22
  %get-tuple-element.407 = f32[5,2,16]{2,0,1} get-tuple-element((f32[5,2,16]{2,0,1}, s32[]) %get-tuple-element.321), index=0, metadata={op_type="TensorListLength" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListLength"}
  %constant.408 = s32[] constant(5), metadata={op_type="TensorListLength" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListLength"}
  %constant.409 = s32[] constant(5), metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %constant.410 = s32[] constant(2), metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %constant.411 = s32[] constant(16), metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %constant.422 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem/TensorListPopBack"}
  %constant.427 = s32[] constant(1), metadata={op_type="AddV2" op_name="add"}
  %constant.435 = f32[] constant(1.33333337), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul"}
  %constant.445 = s32[0]{0} constant({}), metadata={op_type="Reshape" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Reshape"}
  %get-tuple-element.313 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=14
  %get-tuple-element.386 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.313), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %get-tuple-element.382 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.313), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %constant.383 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %subtract.384 = s32[] subtract(s32[] %get-tuple-element.382, s32[] %constant.383), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %constant.385 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %dynamic-slice.387 = f32[1,2,128]{2,1,0} dynamic-slice(f32[5,2,128]{2,1,0} %get-tuple-element.386, s32[] %subtract.384, s32[] %constant.385, s32[] %constant.385), dynamic_slice_sizes={1,2,128}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %reshape.388 = f32[2,128]{1,0} reshape(f32[1,2,128]{2,1,0} %dynamic-slice.387), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %get-tuple-element.302 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=3
  %get-tuple-element.431 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.302), index=0, metadata={op_type="TensorListGetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListGetItem"}
  %get-tuple-element.310 = (s32[5]{0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=11
  %get-tuple-element.423 = s32[5]{0} get-tuple-element((s32[5]{0}, s32[]) %get-tuple-element.310), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem/TensorListPopBack"}
  %get-tuple-element.419 = s32[] get-tuple-element((s32[5]{0}, s32[]) %get-tuple-element.310), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem/TensorListPopBack"}
  %constant.420 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem/TensorListPopBack"}
  %subtract.421 = s32[] subtract(s32[] %get-tuple-element.419, s32[] %constant.420), metadata={op_type="TensorListPopBack" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem/TensorListPopBack"}
  %dynamic-slice.424 = s32[1]{0} dynamic-slice(s32[5]{0} %get-tuple-element.423, s32[] %subtract.421), dynamic_slice_sizes={1}, metadata={op_type="TensorListPopBack" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem/TensorListPopBack"}
  %reshape.425 = s32[] reshape(s32[1]{0} %dynamic-slice.424), metadata={op_type="TensorListPopBack" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem/TensorListPopBack"}
  %constant.430 = s32[] constant(0), metadata={op_type="TensorListGetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListGetItem"}
  %dynamic-slice.432 = f32[1,2,128]{2,1,0} dynamic-slice(f32[5,2,128]{2,1,0} %get-tuple-element.431, s32[] %reshape.425, s32[] %constant.430, s32[] %constant.430), dynamic_slice_sizes={1,2,128}, metadata={op_type="TensorListGetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListGetItem"}
  %reshape.433 = f32[2,128]{1,0} reshape(f32[1,2,128]{2,1,0} %dynamic-slice.432), metadata={op_type="TensorListGetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListGetItem"}
  %get-tuple-element.311 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=12
  %get-tuple-element.378 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.311), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %get-tuple-element.374 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.311), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %constant.375 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %subtract.376 = s32[] subtract(s32[] %get-tuple-element.374, s32[] %constant.375), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %constant.377 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %dynamic-slice.379 = f32[1,2,128]{2,1,0} dynamic-slice(f32[5,2,128]{2,1,0} %get-tuple-element.378, s32[] %subtract.376, s32[] %constant.377, s32[] %constant.377), dynamic_slice_sizes={1,2,128}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %reshape.380 = f32[2,128]{1,0} reshape(f32[1,2,128]{2,1,0} %dynamic-slice.379), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %multiply.434 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %reshape.433, f32[2,128]{1,0} %reshape.380), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul"}
  %multiply.439 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %reshape.388, f32[2,128]{1,0} %multiply.434), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul_1"}
  %convert.440 = f32[2,128]{1,0} convert(f32[2,128]{1,0} %multiply.439), metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Sum"}
  %constant.441 = f32[] constant(0), metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Sum"}
  %convert.442 = f32[] convert(f32[] %constant.441), metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Sum"}
  %reduce.443 = f32[] reduce(f32[2,128]{1,0} %convert.440, f32[] %convert.442), dimensions={0,1}, to_apply=%gradients_rnn_multi_rnn_cell_cell_1_dropout_Mul_grad_Sum-reduction.281, metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Sum"}
  %convert.444 = f32[] convert(f32[] %reduce.443), metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Sum"}
  %reshape.446 = f32[] reshape(f32[] %convert.444), metadata={op_type="Reshape" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Reshape"}
  %get-tuple-element.312 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=13
  %get-tuple-element.370 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.312), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %get-tuple-element.366 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.312), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %constant.367 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %subtract.368 = s32[] subtract(s32[] %get-tuple-element.366, s32[] %constant.367), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %constant.369 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %dynamic-slice.371 = f32[1,2,128]{2,1,0} dynamic-slice(f32[5,2,128]{2,1,0} %get-tuple-element.370, s32[] %subtract.368, s32[] %constant.369, s32[] %constant.369), dynamic_slice_sizes={1,2,128}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %reshape.372 = f32[2,128]{1,0} reshape(f32[1,2,128]{2,1,0} %dynamic-slice.371), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %multiply.447 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %reshape.433, f32[2,128]{1,0} %reshape.372), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul_1"}
  %get-tuple-element.448 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.302), index=0, metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem"}
  %constant.449 = s32[] constant(5), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem"}
  %constant.463 = s32[] constant(0), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_grad/Slice"}
  %broadcast.464 = s32[2]{0} broadcast(s32[] %constant.463), dimensions={}, metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_grad/Slice"}
  %constant.465 = s32[2]{0} constant({2, 128}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_grad/Slice"}
  %constant.467 = s32[2]{0} constant({2, 128}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_grad/Slice"}
  %constant.469 = f32[] constant(1.33333337), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul"}
  %constant.479 = s32[] constant(0), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_grad/Slice"}
  %broadcast.480 = s32[2]{0} broadcast(s32[] %constant.479), dimensions={}, metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_grad/Slice"}
  %constant.481 = s32[2]{0} constant({2, 16}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_grad/Slice"}
  %constant.483 = s32[2]{0} constant({2, 16}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_grad/Slice"}
  %constant.412 = f32[] constant(0), metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %broadcast.413 = f32[5,2,16]{2,1,0} broadcast(f32[] %constant.412), dimensions={}, metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %constant.414 = s32[] constant(0), metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %tuple.415 = (f32[5,2,16]{2,1,0}, s32[]) tuple(f32[5,2,16]{2,1,0} %broadcast.413, s32[] %constant.414), metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %get-tuple-element.417 = f32[5,2,16]{2,1,0} get-tuple-element((f32[5,2,16]{2,1,0}, s32[]) %tuple.415), index=0, metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %constant.416 = s32[] constant(5), metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %tuple.418 = (f32[5,2,16]{2,1,0}, s32[]) tuple(f32[5,2,16]{2,1,0} %get-tuple-element.417, s32[] %constant.416), metadata={op_type="TensorListReserve" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListReserve"}
  %get-tuple-element.484 = f32[5,2,16]{2,1,0} get-tuple-element((f32[5,2,16]{2,1,0}, s32[]) %tuple.418), index=0, metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListSetItem"}
  %constant.485 = s32[] constant(5), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListSetItem"}
  %constant.492 = s32[2]{0} constant({0, 16}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_grad/Slice_1"}
  %constant.493 = s32[2]{0} constant({2, 128}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_grad/Slice_1"}
  %constant.495 = s32[2]{0} constant({2, 128}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_grad/Slice_1"}
  %constant.504 = s32[0]{0} constant({}), metadata={op_type="Reshape" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Reshape"}
  %get-tuple-element.318 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=19
  %get-tuple-element.346 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.318), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %get-tuple-element.342 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.318), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %constant.343 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %subtract.344 = s32[] subtract(s32[] %get-tuple-element.342, s32[] %constant.343), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %constant.345 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %dynamic-slice.347 = f32[1,2,128]{2,1,0} dynamic-slice(f32[5,2,128]{2,1,0} %get-tuple-element.346, s32[] %subtract.344, s32[] %constant.345, s32[] %constant.345), dynamic_slice_sizes={1,2,128}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %reshape.348 = f32[2,128]{1,0} reshape(f32[1,2,128]{2,1,0} %dynamic-slice.347), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %get-tuple-element.304 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=5
  %constant.436 = f32[] constant(1.33333337), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul"}
  %broadcast.437 = f32[2,128]{1,0} broadcast(f32[] %constant.436), dimensions={}, metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul"}
  %multiply.438 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %multiply.434, f32[2,128]{1,0} %broadcast.437), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul"}
  %add.456 = f32[2,128]{1,0} add(f32[2,128]{1,0} %get-tuple-element.304, f32[2,128]{1,0} %multiply.438), metadata={op_type="AddN" op_name="gradients/AddN"}
  %custom-call.457 = f32[2,128]{1,0} custom-call(f32[2,128]{1,0} %reshape.388, f32[2,128]{1,0} %add.456), custom_call_target="TanhGrad", metadata={op_type="TanhGrad" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_grad/TanhGrad"}, backend_config="null"
  %get-tuple-element.314 = (f32[5,256,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=15
  %get-tuple-element.402 = f32[5,256,128]{2,1,0} get-tuple-element((f32[5,256,128]{2,1,0}, s32[]) %get-tuple-element.314), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul/TensorListPopBack"}
  %get-tuple-element.398 = s32[] get-tuple-element((f32[5,256,128]{2,1,0}, s32[]) %get-tuple-element.314), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul/TensorListPopBack"}
  %constant.399 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul/TensorListPopBack"}
  %subtract.400 = s32[] subtract(s32[] %get-tuple-element.398, s32[] %constant.399), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul/TensorListPopBack"}
  %constant.401 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul/TensorListPopBack"}
  %dynamic-slice.403 = f32[1,256,128]{2,1,0} dynamic-slice(f32[5,256,128]{2,1,0} %get-tuple-element.402, s32[] %subtract.400, s32[] %constant.401, s32[] %constant.401), dynamic_slice_sizes={1,256,128}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul/TensorListPopBack"}
  %reshape.404 = f32[256,128]{1,0} reshape(f32[1,256,128]{2,1,0} %dynamic-slice.403), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul/TensorListPopBack"}
  %dot.461 = f32[2,256]{1,0} dot(f32[2,128]{1,0} %custom-call.457, f32[256,128]{1,0} %reshape.404), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul"}
  %transpose.462 = f32[2,256]{1,0} transpose(f32[2,256]{1,0} %dot.461), dimensions={0,1}, metadata={op_type="MatMul" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul"}
  %slice.466 = f32[2,128]{1,0} slice(f32[2,256]{1,0} %transpose.462), slice={[0:2], [0:128]}, metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_grad/Slice"}
  %get-tuple-element.316 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=17
  %get-tuple-element.338 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.316), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %get-tuple-element.334 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.316), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %constant.335 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %subtract.336 = s32[] subtract(s32[] %get-tuple-element.334, s32[] %constant.335), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %constant.337 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %dynamic-slice.339 = f32[1,2,128]{2,1,0} dynamic-slice(f32[5,2,128]{2,1,0} %get-tuple-element.338, s32[] %subtract.336, s32[] %constant.337, s32[] %constant.337), dynamic_slice_sizes={1,2,128}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %reshape.340 = f32[2,128]{1,0} reshape(f32[1,2,128]{2,1,0} %dynamic-slice.339), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %multiply.468 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %slice.466, f32[2,128]{1,0} %reshape.340), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul"}
  %multiply.498 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %reshape.348, f32[2,128]{1,0} %multiply.468), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul_1"}
  %convert.499 = f32[2,128]{1,0} convert(f32[2,128]{1,0} %multiply.498), metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Sum"}
  %constant.500 = f32[] constant(0), metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Sum"}
  %convert.501 = f32[] convert(f32[] %constant.500), metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Sum"}
  %reduce.502 = f32[] reduce(f32[2,128]{1,0} %convert.499, f32[] %convert.501), dimensions={0,1}, to_apply=%gradients_rnn_multi_rnn_cell_cell_0_dropout_Mul_grad_Sum-reduction.293, metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Sum"}
  %convert.503 = f32[] convert(f32[] %reduce.502), metadata={op_type="Sum" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Sum"}
  %reshape.505 = f32[] reshape(f32[] %convert.503), metadata={op_type="Reshape" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Reshape"}
  %get-tuple-element.317 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=18
  %get-tuple-element.330 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.317), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %get-tuple-element.326 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.317), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %constant.327 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %subtract.328 = s32[] subtract(s32[] %get-tuple-element.326, s32[] %constant.327), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %constant.329 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %dynamic-slice.331 = f32[1,2,128]{2,1,0} dynamic-slice(f32[5,2,128]{2,1,0} %get-tuple-element.330, s32[] %subtract.328, s32[] %constant.329, s32[] %constant.329), dynamic_slice_sizes={1,2,128}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %reshape.332 = f32[2,128]{1,0} reshape(f32[1,2,128]{2,1,0} %dynamic-slice.331), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %multiply.506 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %slice.466, f32[2,128]{1,0} %reshape.332), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul_1"}
  %constant.507 = s32[2]{0} constant({0, 128}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_grad/Slice_1"}
  %constant.508 = s32[2]{0} constant({2, 128}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_grad/Slice_1"}
  %constant.510 = s32[2]{0} constant({2, 128}), metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_grad/Slice_1"}
  %get-tuple-element.299 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=0
  %constant.428 = s32[] constant(1), metadata={op_type="AddV2" op_name="add"}
  %add.429 = s32[] add(s32[] %get-tuple-element.299, s32[] %constant.428), metadata={op_type="AddV2" op_name="add"}
  %get-tuple-element.300 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=1
  %get-tuple-element.301 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=2
  %get-tuple-element.452 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.302), index=0, metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem"}
  %constant.322 = f32[] constant(0), metadata={op_type="Const" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/zeros_like"}
  %broadcast.323 = f32[2,128]{1,0} broadcast(f32[] %constant.322), dimensions={}, metadata={op_type="Const" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/zeros_like"}
  %reshape.450 = f32[1,2,128]{2,1,0} reshape(f32[2,128]{1,0} %broadcast.323), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem"}
  %constant.451 = s32[] constant(0), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem"}
  %dynamic-update-slice.453 = f32[5,2,128]{2,1,0} dynamic-update-slice(f32[5,2,128]{2,1,0} %get-tuple-element.452, f32[1,2,128]{2,1,0} %reshape.450, s32[] %reshape.425, s32[] %constant.451, s32[] %constant.451), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem"}
  %get-tuple-element.454 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.302), index=1, metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem"}
  %tuple.455 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %dynamic-update-slice.453, s32[] %get-tuple-element.454), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem"}
  %get-tuple-element.303 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=4
  %constant.470 = f32[] constant(1.33333337), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul"}
  %broadcast.471 = f32[2,128]{1,0} broadcast(f32[] %constant.470), dimensions={}, metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul"}
  %multiply.472 = f32[2,128]{1,0} multiply(f32[2,128]{1,0} %multiply.468, f32[2,128]{1,0} %broadcast.471), metadata={op_type="Mul" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul"}
  %add.473 = f32[2,128]{1,0} add(f32[2,128]{1,0} %get-tuple-element.303, f32[2,128]{1,0} %multiply.472), metadata={op_type="AddN" op_name="gradients/AddN_3"}
  %custom-call.474 = f32[2,128]{1,0} custom-call(f32[2,128]{1,0} %reshape.348, f32[2,128]{1,0} %add.473), custom_call_target="TanhGrad", metadata={op_type="TanhGrad" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_grad/TanhGrad"}, backend_config="null"
  %get-tuple-element.319 = (f32[5,144,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=20
  %get-tuple-element.362 = f32[5,144,128]{2,1,0} get-tuple-element((f32[5,144,128]{2,1,0}, s32[]) %get-tuple-element.319), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul/TensorListPopBack"}
  %get-tuple-element.358 = s32[] get-tuple-element((f32[5,144,128]{2,1,0}, s32[]) %get-tuple-element.319), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul/TensorListPopBack"}
  %constant.359 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul/TensorListPopBack"}
  %subtract.360 = s32[] subtract(s32[] %get-tuple-element.358, s32[] %constant.359), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul/TensorListPopBack"}
  %constant.361 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul/TensorListPopBack"}
  %dynamic-slice.363 = f32[1,144,128]{2,1,0} dynamic-slice(f32[5,144,128]{2,1,0} %get-tuple-element.362, s32[] %subtract.360, s32[] %constant.361, s32[] %constant.361), dynamic_slice_sizes={1,144,128}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul/TensorListPopBack"}
  %reshape.364 = f32[144,128]{1,0} reshape(f32[1,144,128]{2,1,0} %dynamic-slice.363), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul/TensorListPopBack"}
  %dot.477 = f32[2,144]{1,0} dot(f32[2,128]{1,0} %custom-call.474, f32[144,128]{1,0} %reshape.364), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul"}
  %transpose.478 = f32[2,144]{1,0} transpose(f32[2,144]{1,0} %dot.477), dimensions={0,1}, metadata={op_type="MatMul" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul"}
  %slice.494 = f32[2,128]{1,0} slice(f32[2,144]{1,0} %transpose.478), slice={[0:2], [16:144]}, metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_grad/Slice_1"}
  %slice.509 = f32[2,128]{1,0} slice(f32[2,256]{1,0} %transpose.462), slice={[0:2], [128:256]}, metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_grad/Slice_1"}
  %get-tuple-element.305 = (f32[5,2,16]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=6
  %get-tuple-element.513 = f32[5,2,16]{2,1,0} get-tuple-element((f32[5,2,16]{2,1,0}, s32[]) %get-tuple-element.305), index=0, metadata={op_type="AddN" op_name="gradients/AddN_6"}
  %get-tuple-element.488 = f32[5,2,16]{2,1,0} get-tuple-element((f32[5,2,16]{2,1,0}, s32[]) %tuple.418), index=0, metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListSetItem"}
  %slice.482 = f32[2,16]{1,0} slice(f32[2,144]{1,0} %transpose.478), slice={[0:2], [0:16]}, metadata={op_type="Slice" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_grad/Slice"}
  %reshape.486 = f32[1,2,16]{2,1,0} reshape(f32[2,16]{1,0} %slice.482), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListSetItem"}
  %constant.487 = s32[] constant(0), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListSetItem"}
  %dynamic-update-slice.489 = f32[5,2,16]{2,1,0} dynamic-update-slice(f32[5,2,16]{2,1,0} %get-tuple-element.488, f32[1,2,16]{2,1,0} %reshape.486, s32[] %reshape.425, s32[] %constant.487, s32[] %constant.487), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListSetItem"}
  %get-tuple-element.490 = s32[] get-tuple-element((f32[5,2,16]{2,1,0}, s32[]) %tuple.418), index=1, metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListSetItem"}
  %tuple.491 = (f32[5,2,16]{2,1,0}, s32[]) tuple(f32[5,2,16]{2,1,0} %dynamic-update-slice.489, s32[] %get-tuple-element.490), metadata={op_type="TensorListSetItem" op_name="gradients/TensorArrayV2Read/TensorListGetItem_grad/TensorListSetItem"}
  %get-tuple-element.514 = f32[5,2,16]{2,1,0} get-tuple-element((f32[5,2,16]{2,1,0}, s32[]) %tuple.491), index=0, metadata={op_type="AddN" op_name="gradients/AddN_6"}
  %add.515 = f32[5,2,16]{2,1,0} add(f32[5,2,16]{2,1,0} %get-tuple-element.513, f32[5,2,16]{2,1,0} %get-tuple-element.514), metadata={op_type="AddN" op_name="gradients/AddN_6"}
  %get-tuple-element.516 = s32[] get-tuple-element((f32[5,2,16]{2,1,0}, s32[]) %get-tuple-element.305), index=1, metadata={op_type="AddN" op_name="gradients/AddN_6"}
  %tuple.517 = (f32[5,2,16]{2,1,0}, s32[]) tuple(f32[5,2,16]{2,1,0} %add.515, s32[] %get-tuple-element.516), metadata={op_type="AddN" op_name="gradients/AddN_6"}
  %get-tuple-element.306 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=7
  %get-tuple-element.320 = (f32[5,2,144]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=21
  %get-tuple-element.354 = f32[5,2,144]{2,1,0} get-tuple-element((f32[5,2,144]{2,1,0}, s32[]) %get-tuple-element.320), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1/TensorListPopBack"}
  %get-tuple-element.350 = s32[] get-tuple-element((f32[5,2,144]{2,1,0}, s32[]) %get-tuple-element.320), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1/TensorListPopBack"}
  %constant.351 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1/TensorListPopBack"}
  %subtract.352 = s32[] subtract(s32[] %get-tuple-element.350, s32[] %constant.351), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1/TensorListPopBack"}
  %constant.353 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1/TensorListPopBack"}
  %dynamic-slice.355 = f32[1,2,144]{2,1,0} dynamic-slice(f32[5,2,144]{2,1,0} %get-tuple-element.354, s32[] %subtract.352, s32[] %constant.353, s32[] %constant.353), dynamic_slice_sizes={1,2,144}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1/TensorListPopBack"}
  %reshape.356 = f32[2,144]{1,0} reshape(f32[1,2,144]{2,1,0} %dynamic-slice.355), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1/TensorListPopBack"}
  %dot.496 = f32[144,128]{1,0} dot(f32[2,144]{1,0} %reshape.356, f32[2,128]{1,0} %custom-call.474), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1"}
  %transpose.497 = f32[144,128]{1,0} transpose(f32[144,128]{1,0} %dot.496), dimensions={0,1}, metadata={op_type="MatMul" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1"}
  %add.518 = f32[144,128]{1,0} add(f32[144,128]{1,0} %get-tuple-element.306, f32[144,128]{1,0} %transpose.497), metadata={op_type="AddN" op_name="gradients/AddN_5"}
  %get-tuple-element.307 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=8
  %constant.475 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/BiasAdd_grad/BiasAddGrad"}
  %reduce.476 = f32[128]{0} reduce(f32[2,128]{1,0} %custom-call.474, f32[] %constant.475), dimensions={0}, to_apply=%region_0.289, metadata={op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/BiasAdd_grad/BiasAddGrad"}
  %add.519 = f32[128]{0} add(f32[128]{0} %get-tuple-element.307, f32[128]{0} %reduce.476), metadata={op_type="AddN" op_name="gradients/AddN_4"}
  %get-tuple-element.308 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=9
  %get-tuple-element.315 = (f32[5,2,256]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=16
  %get-tuple-element.394 = f32[5,2,256]{2,1,0} get-tuple-element((f32[5,2,256]{2,1,0}, s32[]) %get-tuple-element.315), index=0, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1/TensorListPopBack"}
  %get-tuple-element.390 = s32[] get-tuple-element((f32[5,2,256]{2,1,0}, s32[]) %get-tuple-element.315), index=1, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1/TensorListPopBack"}
  %constant.391 = s32[] constant(1), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1/TensorListPopBack"}
  %subtract.392 = s32[] subtract(s32[] %get-tuple-element.390, s32[] %constant.391), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1/TensorListPopBack"}
  %constant.393 = s32[] constant(0), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1/TensorListPopBack"}
  %dynamic-slice.395 = f32[1,2,256]{2,1,0} dynamic-slice(f32[5,2,256]{2,1,0} %get-tuple-element.394, s32[] %subtract.392, s32[] %constant.393, s32[] %constant.393), dynamic_slice_sizes={1,2,256}, metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1/TensorListPopBack"}
  %reshape.396 = f32[2,256]{1,0} reshape(f32[1,2,256]{2,1,0} %dynamic-slice.395), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1/TensorListPopBack"}
  %dot.511 = f32[256,128]{1,0} dot(f32[2,256]{1,0} %reshape.396, f32[2,128]{1,0} %custom-call.457), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1"}
  %transpose.512 = f32[256,128]{1,0} transpose(f32[256,128]{1,0} %dot.511), dimensions={0,1}, metadata={op_type="MatMul" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1"}
  %add.520 = f32[256,128]{1,0} add(f32[256,128]{1,0} %get-tuple-element.308, f32[256,128]{1,0} %transpose.512), metadata={op_type="AddN" op_name="gradients/AddN_2"}
  %get-tuple-element.309 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.298), index=10
  %constant.458 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/BiasAdd_grad/BiasAddGrad"}
  %reduce.459 = f32[128]{0} reduce(f32[2,128]{1,0} %custom-call.457, f32[] %constant.458), dimensions={0}, to_apply=%region_0.285, metadata={op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/BiasAdd_grad/BiasAddGrad"}
  %add.460 = f32[128]{0} add(f32[128]{0} %get-tuple-element.309, f32[128]{0} %reduce.459), metadata={op_type="AddN" op_name="gradients/AddN_1"}
  %tuple.426 = (s32[5]{0}, s32[]) tuple(s32[5]{0} %get-tuple-element.423, s32[] %subtract.421), metadata={op_type="TensorListPopBack" op_name="gradients/TensorArrayV2Write/TensorListSetItem_grad/TensorListSetItem/TensorListPopBack"}
  %tuple.381 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %get-tuple-element.378, s32[] %subtract.376), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %tuple.373 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %get-tuple-element.370, s32[] %subtract.368), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %tuple.389 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %get-tuple-element.386, s32[] %subtract.384), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %tuple.405 = (f32[5,256,128]{2,1,0}, s32[]) tuple(f32[5,256,128]{2,1,0} %get-tuple-element.402, s32[] %subtract.400), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul/TensorListPopBack"}
  %tuple.397 = (f32[5,2,256]{2,1,0}, s32[]) tuple(f32[5,2,256]{2,1,0} %get-tuple-element.394, s32[] %subtract.392), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul_grad/MatMul_1/TensorListPopBack"}
  %tuple.341 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %get-tuple-element.338, s32[] %subtract.336), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul/TensorListPopBack"}
  %tuple.333 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %get-tuple-element.330, s32[] %subtract.328), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_1_grad/Mul_1/TensorListPopBack"}
  %tuple.349 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %get-tuple-element.346, s32[] %subtract.344), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/dropout/Mul_grad/Mul_1/TensorListPopBack"}
  %tuple.365 = (f32[5,144,128]{2,1,0}, s32[]) tuple(f32[5,144,128]{2,1,0} %get-tuple-element.362, s32[] %subtract.360), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul/TensorListPopBack"}
  %tuple.357 = (f32[5,2,144]{2,1,0}, s32[]) tuple(f32[5,2,144]{2,1,0} %get-tuple-element.354, s32[] %subtract.352), metadata={op_type="TensorListPopBack" op_name="gradients/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul_grad/MatMul_1/TensorListPopBack"}
  ROOT %tuple.521 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) tuple(s32[] %add.429, s32[] %get-tuple-element.300, s32[] %get-tuple-element.301, (f32[5,2,128]{2,1,0}, s32[]) %tuple.455, f32[2,128]{1,0} %slice.494, /*index=5*/f32[2,128]{1,0} %slice.509, (f32[5,2,16]{2,1,0}, s32[]) %tuple.517, f32[144,128]{1,0} %add.518, f32[128]{0} %add.519, f32[256,128]{1,0} %add.520, /*index=10*/f32[128]{0} %add.460, (s32[5]{0}, s32[]) %tuple.426, (f32[5,2,128]{2,1,0}, s32[]) %tuple.381, (f32[5,2,128]{2,1,0}, s32[]) %tuple.373, (f32[5,2,128]{2,1,0}, s32[]) %tuple.389, /*index=15*/(f32[5,256,128]{2,1,0}, s32[]) %tuple.405, (f32[5,2,256]{2,1,0}, s32[]) %tuple.397, (f32[5,2,128]{2,1,0}, s32[]) %tuple.341, (f32[5,2,128]{2,1,0}, s32[]) %tuple.333, (f32[5,2,128]{2,1,0}, s32[]) %tuple.349, /*index=20*/(f32[5,144,128]{2,1,0}, s32[]) %tuple.365, (f32[5,2,144]{2,1,0}, s32[]) %tuple.357, (f32[5,2,16]{2,0,1}, s32[]) %get-tuple-element.321), metadata={op_name="XLA_Retvals"}
}

%rnn_while_cond_90_rewritten_grad_551_const_0__.522 (arg_tuple.523: (s32[], s32[], s32[], (f32[5,2,128], s32[]), f32[2,128], /*index=5*/f32[2,128], (f32[5,2,16], s32[]), f32[144,128], f32[128], f32[256,128], /*index=10*/f32[128], (s32[5], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), /*index=15*/(f32[5,256,128], s32[]), (f32[5,2,256], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), /*index=20*/(f32[5,144,128], s32[]), (f32[5,2,144], s32[]), (f32[5,2,16], s32[]))) -> (pred[]) {
  %arg_tuple.523 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.525 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=1
  %get-tuple-element.527 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=3
  %get-tuple-element.528 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=4
  %get-tuple-element.529 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=5
  %get-tuple-element.530 = (f32[5,2,16]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=6
  %get-tuple-element.531 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=7
  %get-tuple-element.532 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=8
  %get-tuple-element.533 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=9
  %get-tuple-element.534 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=10
  %get-tuple-element.535 = (s32[5]{0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=11
  %get-tuple-element.536 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=12
  %get-tuple-element.537 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=13
  %get-tuple-element.538 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=14
  %get-tuple-element.539 = (f32[5,256,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=15
  %get-tuple-element.540 = (f32[5,2,256]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=16
  %get-tuple-element.541 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=17
  %get-tuple-element.542 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=18
  %get-tuple-element.543 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=19
  %get-tuple-element.544 = (f32[5,144,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=20
  %get-tuple-element.545 = (f32[5,2,144]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=21
  %get-tuple-element.546 = (f32[5,2,16]{2,0,1}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=22
  %get-tuple-element.524 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=0
  %get-tuple-element.526 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %arg_tuple.523), index=2
  %compare.547 = pred[] compare(s32[] %get-tuple-element.524, s32[] %get-tuple-element.526), direction=LT, metadata={op_type="Less" op_name="Less"}
  ROOT %tuple.548 = (pred[]) tuple(pred[] %compare.547), metadata={op_name="XLA_Retvals"}
}

%cond_wrapper.549 (inputs.550: (s32[], s32[], s32[], (f32[5,2,128], s32[]), f32[2,128], /*index=5*/f32[2,128], (f32[5,2,16], s32[]), f32[144,128], f32[128], f32[256,128], /*index=10*/f32[128], (s32[5], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), /*index=15*/(f32[5,256,128], s32[]), (f32[5,2,256], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), (f32[5,2,128], s32[]), /*index=20*/(f32[5,144,128], s32[]), (f32[5,2,144], s32[]), (f32[5,2,16], s32[]))) -> pred[] {
  %inputs.550 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) parameter(0)
  %call.551 = (pred[]) call((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %inputs.550), to_apply=%rnn_while_cond_90_rewritten_grad_551_const_0__.522
  ROOT %get-tuple-element.552 = pred[] get-tuple-element((pred[]) %call.551), index=0
}

%while_body_23_const_0__.553 (arg_tuple.554: (s32[], s32[], s32[], f32[144,128], f32[128], /*index=5*/f32[256,128], f32[128], f32[128,16], f32[16], f32[], /*index=10*/f32[], f32[144,128], f32[144,128], f32[128], f32[128], /*index=15*/f32[256,128], f32[256,128], f32[128], f32[128], f32[128,16], /*index=20*/f32[128,16], f32[16], f32[16])) -> (s32[], s32[], s32[], f32[144,128], f32[128], /*index=5*/f32[256,128], f32[128], f32[128,16], f32[16], f32[], /*index=10*/f32[], f32[144,128], f32[144,128], f32[128], f32[128], /*index=15*/f32[256,128], f32[256,128], f32[128], f32[128], f32[128,16], /*index=20*/f32[128,16], f32[16], f32[16]) {
  %arg_tuple.554 = (s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.557 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=2
  %constant.585 = s32[2]{0} constant({2, 16}), metadata={op_type="BroadcastGradientArgs" op_name="gradients/mean_squared_error/Mul_grad/BroadcastGradientArgs"}
  %constant.586 = s32[0]{0} constant({}), metadata={op_type="BroadcastGradientArgs" op_name="gradients/mean_squared_error/Mul_grad/BroadcastGradientArgs"}
  %constant.587 = s32[0]{0} constant({}), metadata={op_type="BroadcastGradientArgs" op_name="gradients/mean_squared_error/value_grad/BroadcastGradientArgs"}
  %constant.588 = s32[0]{0} constant({}), metadata={op_type="BroadcastGradientArgs" op_name="gradients/mean_squared_error/value_grad/BroadcastGradientArgs"}
  %constant.589 = f32[] constant(1), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %constant.590 = f32[] constant(32), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %constant.599 = s32[0]{0} constant({}), metadata={op_type="Reshape" op_name="gradients/mean_squared_error/value_grad/Reshape"}
  %constant.592 = f32[] constant(32), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %constant.593 = f32[] constant(0), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %compare.594 = pred[] compare(f32[] %constant.592, f32[] %constant.593), direction=EQ, metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %constant.595 = f32[] constant(0), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %broadcast.596 = f32[] broadcast(f32[] %constant.595), dimensions={}, metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %constant.591 = f32[] constant(1), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %divide.597 = f32[] divide(f32[] %constant.591, f32[] %constant.592), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %select.598 = f32[] select(pred[] %compare.594, f32[] %broadcast.596, f32[] %divide.597), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan"}
  %reshape.600 = f32[] reshape(f32[] %select.598), metadata={op_type="Reshape" op_name="gradients/mean_squared_error/value_grad/Reshape"}
  %constant.601 = s32[3]{0} constant({1, 0, 2}), metadata={op_type="Transpose" op_name="rnn/transpose"}
  %constant.605 = s32[] constant(0), metadata={op_type="ConcatV2" op_name="rnn/concat_1"}
  %constant.606 = s32[1]{0} constant({2}), metadata={op_type="ConcatV2" op_name="rnn/concat_1"}
  %constant.607 = s32[1]{0} constant({128}), metadata={op_type="ConcatV2" op_name="rnn/concat_1"}
  %concatenate.608 = s32[2]{0} concatenate(s32[1]{0} %constant.606, s32[1]{0} %constant.607), dimensions={0}, metadata={op_type="ConcatV2" op_name="rnn/concat_1"}
  %constant.609 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/Placeholder_0/accumulator"}
  %constant.610 = s32[0]{0} constant({}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/Placeholder_0/accumulator"}
  %constant.611 = s32[0]{0} constant({}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/Placeholder_0/accumulator"}
  %constant.612 = s32[0]{0} constant({}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/Placeholder_0/accumulator"}
  %constant.613 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/Placeholder_0/accumulator"}
  %constant.618 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %constant.619 = s32[2]{0} constant({144, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %constant.620 = s32[2]{0} constant({144, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %constant.621 = s32[2]{0} constant({144, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %constant.622 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %constant.623 = s32[] constant(144), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %constant.624 = s32[] constant(128), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %constant.629 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %constant.630 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %constant.631 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %constant.632 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %constant.633 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %constant.634 = s32[] constant(2), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %constant.635 = s32[] constant(128), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %constant.640 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %constant.641 = s32[2]{0} constant({2, 144}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %constant.642 = s32[2]{0} constant({2, 144}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %constant.643 = s32[2]{0} constant({2, 144}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %constant.644 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %constant.645 = s32[] constant(2), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %constant.646 = s32[] constant(144), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %constant.651 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %constant.652 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %constant.653 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %constant.654 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %constant.655 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %constant.656 = s32[] constant(2), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %constant.657 = s32[] constant(128), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %constant.662 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %constant.663 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %constant.664 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %constant.665 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %constant.666 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %constant.667 = s32[] constant(2), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %constant.668 = s32[] constant(128), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %constant.673 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %constant.674 = s32[2]{0} constant({256, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %constant.675 = s32[2]{0} constant({256, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %constant.676 = s32[2]{0} constant({256, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %constant.677 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %constant.678 = s32[] constant(256), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %constant.679 = s32[] constant(128), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %constant.684 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %constant.685 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %constant.686 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %constant.687 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %constant.688 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %constant.689 = s32[] constant(2), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %constant.690 = s32[] constant(128), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %constant.695 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %constant.696 = s32[2]{0} constant({2, 256}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %constant.697 = s32[2]{0} constant({2, 256}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %constant.698 = s32[2]{0} constant({2, 256}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %constant.699 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %constant.700 = s32[] constant(2), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %constant.701 = s32[] constant(256), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %constant.706 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %constant.707 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %constant.708 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %constant.709 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %constant.710 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %constant.711 = s32[] constant(2), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %constant.712 = s32[] constant(128), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %constant.717 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %constant.718 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %constant.719 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %constant.720 = s32[2]{0} constant({2, 128}), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %constant.721 = s32[] constant(5), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %constant.722 = s32[] constant(2), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %constant.723 = s32[] constant(128), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %constant.728 = s32[] constant(5), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.729 = s32[2]{0} constant({2, 128}), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.730 = s32[2]{0} constant({2, 128}), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.731 = s32[2]{0} constant({2, 128}), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.732 = s32[] constant(5), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.733 = s32[] constant(2), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.734 = s32[] constant(128), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.742 = s32[] constant(5), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.743 = s32[2]{0} constant({2, 16}), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.744 = s32[2]{0} constant({2, 16}), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.745 = s32[2]{0} constant({2, 16}), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.746 = s32[] constant(5), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.747 = s32[] constant(2), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.748 = s32[] constant(16), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.749 = f32[] constant(0), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %broadcast.750 = f32[5,2,16]{2,1,0} broadcast(f32[] %constant.749), dimensions={}, metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.751 = s32[] constant(0), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %tuple.752 = (f32[5,2,16]{2,1,0}, s32[]) tuple(f32[5,2,16]{2,1,0} %broadcast.750, s32[] %constant.751), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %get-tuple-element.754 = f32[5,2,16]{2,1,0} get-tuple-element((f32[5,2,16]{2,1,0}, s32[]) %tuple.752), index=0, metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.753 = s32[] constant(5), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %tuple.755 = (f32[5,2,16]{2,1,0}, s32[]) tuple(f32[5,2,16]{2,1,0} %get-tuple-element.754, s32[] %constant.753), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2_1"}
  %constant.756 = f32[] constant(0), metadata={op_type="Fill" op_name="rnn/zeros"}
  %broadcast.757 = f32[2,128]{1,0} broadcast(f32[] %constant.756), dimensions={}, metadata={op_type="Fill" op_name="rnn/zeros"}
  %constant.758 = s32[1]{0} constant({128}), metadata={op_type="Fill" op_name="gradients/zeros_1"}
  %constant.759 = s32[1]{0} constant({128}), metadata={op_type="Fill" op_name="gradients/zeros_1"}
  %constant.762 = s32[2]{0} constant({144, 128}), metadata={op_type="Fill" op_name="gradients/zeros"}
  %constant.763 = s32[2]{0} constant({144, 128}), metadata={op_type="Fill" op_name="gradients/zeros"}
  %constant.766 = s32[1]{0} constant({128}), metadata={op_type="Fill" op_name="gradients/zeros_3"}
  %constant.767 = s32[1]{0} constant({128}), metadata={op_type="Fill" op_name="gradients/zeros_3"}
  %constant.770 = s32[2]{0} constant({256, 128}), metadata={op_type="Fill" op_name="gradients/zeros_2"}
  %constant.771 = s32[2]{0} constant({256, 128}), metadata={op_type="Fill" op_name="gradients/zeros_2"}
  %constant.774 = s32[] constant(0), metadata={op_type="While" op_name="rnn/while"}
  %constant.775 = s32[] constant(5), metadata={op_type="While" op_name="rnn/while"}
  %constant.776 = s32[] constant(0), metadata={op_type="While" op_name="rnn/while"}
  %constant.777 = f32[] constant(0), metadata={op_type="While" op_name="rnn/while"}
  %broadcast.778 = f32[2,128]{1,0} broadcast(f32[] %constant.777), dimensions={}, metadata={op_type="While" op_name="rnn/while"}
  %constant.779 = f32[] constant(0), metadata={op_type="While" op_name="rnn/while"}
  %broadcast.780 = f32[2,128]{1,0} broadcast(f32[] %constant.779), dimensions={}, metadata={op_type="While" op_name="rnn/while"}
  %constant.781 = s32[] constant(5), metadata={op_type="While" op_name="rnn/while"}
  %constant.782 = s32[] constant(0), metadata={op_type="While" op_name="rnn/while"}
  %constant.783 = s32[] constant(5), metadata={op_type="While" op_name="rnn/while"}
  %constant.784 = s32[] constant(0), metadata={op_type="While" op_name="rnn/while"}
  %constant.735 = f32[] constant(0), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %broadcast.736 = f32[5,2,128]{2,1,0} broadcast(f32[] %constant.735), dimensions={}, metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.737 = s32[] constant(0), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %tuple.738 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %broadcast.736, s32[] %constant.737), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %get-tuple-element.740 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %tuple.738), index=0, metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.739 = s32[] constant(5), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %tuple.741 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %get-tuple-element.740, s32[] %constant.739), metadata={op_type="TensorListReserve" op_name="rnn/TensorArrayV2"}
  %constant.785 = f32[] constant(0), metadata={op_type="While" op_name="rnn/while"}
  %broadcast.786 = f32[2,128]{1,0} broadcast(f32[] %constant.785), dimensions={}, metadata={op_type="While" op_name="rnn/while"}
  %constant.787 = f32[] constant(0), metadata={op_type="While" op_name="rnn/while"}
  %broadcast.788 = f32[2,128]{1,0} broadcast(f32[] %constant.787), dimensions={}, metadata={op_type="While" op_name="rnn/while"}
  %constant.789 = s32[] constant(5), metadata={op_type="While" op_name="rnn/while"}
  %after-all.578 = token[] after-all(), metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue"}
  %infeed.579 = ((f32[2,5,16]{2,1,0}, f32[2,16]{1,0}), token[]) infeed(token[] %after-all.578), infeed_config="\022\0011\"\002\001\001(\003", metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue"}
  %get-tuple-element.580 = (f32[2,5,16]{2,1,0}, f32[2,16]{1,0}) get-tuple-element(((f32[2,5,16]{2,1,0}, f32[2,16]{1,0}), token[]) %infeed.579), index=0, metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue"}
  %get-tuple-element.581 = f32[2,5,16]{2,1,0} get-tuple-element((f32[2,5,16]{2,1,0}, f32[2,16]{1,0}) %get-tuple-element.580), index=0, metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue"}
  %transpose.602 = f32[5,2,16]{2,0,1} transpose(f32[2,5,16]{2,1,0} %get-tuple-element.581), dimensions={1,0,2}, metadata={op_type="Transpose" op_name="rnn/transpose"}
  %constant.603 = s32[] constant(5), metadata={op_type="TensorListFromTensor" op_name="rnn/TensorArrayUnstack/TensorListFromTensor"}
  %tuple.604 = (f32[5,2,16]{2,0,1}, s32[]) tuple(f32[5,2,16]{2,0,1} %transpose.602, s32[] %constant.603), metadata={op_type="TensorListFromTensor" op_name="rnn/TensorArrayUnstack/TensorListFromTensor"}
  %constant.614 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/Placeholder_0/accumulator"}
  %broadcast.615 = s32[5]{0} broadcast(s32[] %constant.614), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/Placeholder_0/accumulator"}
  %constant.616 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/Placeholder_0/accumulator"}
  %tuple.617 = (s32[5]{0}, s32[]) tuple(s32[5]{0} %broadcast.615, s32[] %constant.616), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/Placeholder_0/accumulator"}
  %constant.713 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %broadcast.714 = f32[5,2,128]{2,1,0} broadcast(f32[] %constant.713), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %constant.715 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %tuple.716 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %broadcast.714, s32[] %constant.715), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Cast_0/accumulator"}
  %constant.724 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %broadcast.725 = f32[5,2,128]{2,1,0} broadcast(f32[] %constant.724), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %constant.726 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %tuple.727 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %broadcast.725, s32[] %constant.726), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/dropout/Mul_0/accumulator"}
  %constant.691 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %broadcast.692 = f32[5,2,128]{2,1,0} broadcast(f32[] %constant.691), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %constant.693 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %tuple.694 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %broadcast.692, s32[] %constant.693), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/Tanh_0/accumulator"}
  %constant.680 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %broadcast.681 = f32[5,256,128]{2,1,0} broadcast(f32[] %constant.680), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %constant.682 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %tuple.683 = (f32[5,256,128]{2,1,0}, s32[]) tuple(f32[5,256,128]{2,1,0} %broadcast.681, s32[] %constant.682), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/MatMul/ReadVariableOp_0/accumulator"}
  %constant.702 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %broadcast.703 = f32[5,2,256]{2,1,0} broadcast(f32[] %constant.702), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %constant.704 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %tuple.705 = (f32[5,2,256]{2,1,0}, s32[]) tuple(f32[5,2,256]{2,1,0} %broadcast.703, s32[] %constant.704), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_1/RNNCell1/concat_0/accumulator"}
  %constant.658 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %broadcast.659 = f32[5,2,128]{2,1,0} broadcast(f32[] %constant.658), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %constant.660 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %tuple.661 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %broadcast.659, s32[] %constant.660), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Cast_0/accumulator"}
  %constant.669 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %broadcast.670 = f32[5,2,128]{2,1,0} broadcast(f32[] %constant.669), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %constant.671 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %tuple.672 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %broadcast.670, s32[] %constant.671), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/dropout/Mul_0/accumulator"}
  %constant.636 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %broadcast.637 = f32[5,2,128]{2,1,0} broadcast(f32[] %constant.636), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %constant.638 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %tuple.639 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %broadcast.637, s32[] %constant.638), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/Tanh_0/accumulator"}
  %constant.625 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %broadcast.626 = f32[5,144,128]{2,1,0} broadcast(f32[] %constant.625), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %constant.627 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %tuple.628 = (f32[5,144,128]{2,1,0}, s32[]) tuple(f32[5,144,128]{2,1,0} %broadcast.626, s32[] %constant.627), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/MatMul/ReadVariableOp_0/accumulator"}
  %constant.647 = f32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %broadcast.648 = f32[5,2,144]{2,1,0} broadcast(f32[] %constant.647), dimensions={}, metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %constant.649 = s32[] constant(0), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %tuple.650 = (f32[5,2,144]{2,1,0}, s32[]) tuple(f32[5,2,144]{2,1,0} %broadcast.648, s32[] %constant.649), metadata={op_type="EmptyTensorList" op_name="gradients/rnn/while_grad/rnn/multi_rnn_cell/cell_0/RNNCell0/concat_0/accumulator"}
  %get-tuple-element.558 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=3
  %get-tuple-element.559 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=4
  %get-tuple-element.560 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=5
  %get-tuple-element.561 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=6
  %tuple.790 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) tuple(s32[] %constant.782, s32[] %constant.783, s32[] %constant.784, (f32[5,2,128]{2,1,0}, s32[]) %tuple.741, f32[2,128]{1,0} %broadcast.786, /*index=5*/f32[2,128]{1,0} %broadcast.788, s32[] %constant.789, (f32[5,2,16]{2,0,1}, s32[]) %tuple.604, (s32[5]{0}, s32[]) %tuple.617, (f32[5,2,128]{2,1,0}, s32[]) %tuple.716, /*index=10*/(f32[5,2,128]{2,1,0}, s32[]) %tuple.727, (f32[5,2,128]{2,1,0}, s32[]) %tuple.694, (f32[5,256,128]{2,1,0}, s32[]) %tuple.683, (f32[5,2,256]{2,1,0}, s32[]) %tuple.705, (f32[5,2,128]{2,1,0}, s32[]) %tuple.661, /*index=15*/(f32[5,2,128]{2,1,0}, s32[]) %tuple.672, (f32[5,2,128]{2,1,0}, s32[]) %tuple.639, (f32[5,144,128]{2,1,0}, s32[]) %tuple.628, (f32[5,2,144]{2,1,0}, s32[]) %tuple.650, f32[144,128]{1,0} %get-tuple-element.558, /*index=20*/f32[128]{0} %get-tuple-element.559, f32[256,128]{1,0} %get-tuple-element.560, f32[128]{0} %get-tuple-element.561), metadata={op_type="While" op_name="rnn/while"}
  %while.791 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) while((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.790), condition=%cond_wrapper.265, body=%rnn_while_body_91_rewritten_const_0_rearrange_0__.28, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.792 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=0, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.793 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=1, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.794 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=2, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.795 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=3, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.796 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=4, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.797 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=5, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.798 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=6, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.799 = (f32[5,2,16]{2,0,1}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=7, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.800 = (s32[5]{0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=8, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.801 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=9, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.802 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=10, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.803 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=11, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.804 = (f32[5,256,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=12, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.805 = (f32[5,2,256]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=13, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.806 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=14, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.807 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=15, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.808 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=16, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.809 = (f32[5,144,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=17, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.810 = (f32[5,2,144]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=18, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.811 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=19, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.812 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=20, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.813 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=21, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.814 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %while.791), index=22, metadata={op_type="While" op_name="rnn/while"}
  %tuple.815 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) tuple(s32[] %get-tuple-element.792, s32[] %get-tuple-element.793, s32[] %get-tuple-element.794, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.795, f32[2,128]{1,0} %get-tuple-element.796, /*index=5*/f32[2,128]{1,0} %get-tuple-element.797, s32[] %get-tuple-element.798, (f32[5,2,16]{2,0,1}, s32[]) %get-tuple-element.799, (s32[5]{0}, s32[]) %get-tuple-element.800, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.801, /*index=10*/(f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.802, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.803, (f32[5,256,128]{2,1,0}, s32[]) %get-tuple-element.804, (f32[5,2,256]{2,1,0}, s32[]) %get-tuple-element.805, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.806, /*index=15*/(f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.807, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.808, (f32[5,144,128]{2,1,0}, s32[]) %get-tuple-element.809, (f32[5,2,144]{2,1,0}, s32[]) %get-tuple-element.810, f32[144,128]{1,0} %get-tuple-element.811, /*index=20*/f32[128]{0} %get-tuple-element.812, f32[256,128]{1,0} %get-tuple-element.813, f32[128]{0} %get-tuple-element.814), metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.817 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=1, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.818 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=2, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.820 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=4, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.822 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=6, metadata={op_type="While" op_name="rnn/while"}
  %constant.841 = f32[] constant(1), metadata={op_type="Mul" op_name="mean_squared_error/Mul"}
  %constant.851 = f32[] constant(32), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_1"}
  %constant.859 = f32[] constant(32), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_2"}
  %constant.867 = f32[] constant(1), metadata={op_type="Mul" op_name="gradients/mean_squared_error/value_grad/mul"}
  %constant.870 = s32[0]{0} constant({}), metadata={op_type="Reshape" op_name="gradients/mean_squared_error/value_grad/Reshape_1"}
  %constant.868 = f32[] constant(1), metadata={op_type="Mul" op_name="gradients/mean_squared_error/value_grad/mul"}
  %constant.860 = f32[] constant(32), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_2"}
  %constant.861 = f32[] constant(0), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_2"}
  %compare.862 = pred[] compare(f32[] %constant.860, f32[] %constant.861), direction=EQ, metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_2"}
  %constant.863 = f32[] constant(0), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_2"}
  %broadcast.864 = f32[] broadcast(f32[] %constant.863), dimensions={}, metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_2"}
  %constant.852 = f32[] constant(32), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_1"}
  %constant.853 = f32[] constant(0), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_1"}
  %compare.854 = pred[] compare(f32[] %constant.852, f32[] %constant.853), direction=EQ, metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_1"}
  %constant.855 = f32[] constant(0), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_1"}
  %broadcast.856 = f32[] broadcast(f32[] %constant.855), dimensions={}, metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_1"}
  %get-tuple-element.821 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=5, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.562 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=7
  %dot.835 = f32[2,16]{1,0} dot(f32[2,128]{1,0} %get-tuple-element.821, f32[128,16]{1,0} %get-tuple-element.562), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="dense/MatMul"}
  %transpose.836 = f32[2,16]{1,0} transpose(f32[2,16]{1,0} %dot.835), dimensions={0,1}, metadata={op_type="MatMul" op_name="dense/MatMul"}
  %get-tuple-element.563 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=8
  %broadcast.837 = f32[2,16]{1,0} broadcast(f32[16]{0} %get-tuple-element.563), dimensions={1}, metadata={op_type="BiasAdd" op_name="dense/BiasAdd"}
  %add.838 = f32[2,16]{1,0} add(f32[2,16]{1,0} %transpose.836, f32[2,16]{1,0} %broadcast.837), metadata={op_type="BiasAdd" op_name="dense/BiasAdd"}
  %get-tuple-element.582 = f32[2,16]{1,0} get-tuple-element((f32[2,5,16]{2,1,0}, f32[2,16]{1,0}) %get-tuple-element.580), index=1, metadata={op_type="PopDatastreamInfeedDequeue" op_name="PopDatastreamInfeedDequeue"}
  %subtract.839 = f32[2,16]{1,0} subtract(f32[2,16]{1,0} %add.838, f32[2,16]{1,0} %get-tuple-element.582), metadata={op_type="SquaredDifference" op_name="mean_squared_error/SquaredDifference"}
  %multiply.840 = f32[2,16]{1,0} multiply(f32[2,16]{1,0} %subtract.839, f32[2,16]{1,0} %subtract.839), metadata={op_type="SquaredDifference" op_name="mean_squared_error/SquaredDifference"}
  %constant.842 = f32[] constant(1), metadata={op_type="Mul" op_name="mean_squared_error/Mul"}
  %broadcast.843 = f32[2,16]{1,0} broadcast(f32[] %constant.842), dimensions={}, metadata={op_type="Mul" op_name="mean_squared_error/Mul"}
  %multiply.844 = f32[2,16]{1,0} multiply(f32[2,16]{1,0} %multiply.840, f32[2,16]{1,0} %broadcast.843), metadata={op_type="Mul" op_name="mean_squared_error/Mul"}
  %convert.845 = f32[2,16]{1,0} convert(f32[2,16]{1,0} %multiply.844), metadata={op_type="Sum" op_name="mean_squared_error/Sum"}
  %constant.846 = f32[] constant(0), metadata={op_type="Sum" op_name="mean_squared_error/Sum"}
  %convert.847 = f32[] convert(f32[] %constant.846), metadata={op_type="Sum" op_name="mean_squared_error/Sum"}
  %reduce.848 = f32[] reduce(f32[2,16]{1,0} %convert.845, f32[] %convert.847), dimensions={0,1}, to_apply=%mean_squared_error_Sum-reduction.269, metadata={op_type="Sum" op_name="mean_squared_error/Sum"}
  %convert.849 = f32[] convert(f32[] %reduce.848), metadata={op_type="Sum" op_name="mean_squared_error/Sum"}
  %negate.850 = f32[] negate(f32[] %convert.849), metadata={op_type="Neg" op_name="gradients/mean_squared_error/value_grad/Neg"}
  %divide.857 = f32[] divide(f32[] %negate.850, f32[] %constant.852), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_1"}
  %select.858 = f32[] select(pred[] %compare.854, f32[] %broadcast.856, f32[] %divide.857), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_1"}
  %divide.865 = f32[] divide(f32[] %select.858, f32[] %constant.860), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_2"}
  %select.866 = f32[] select(pred[] %compare.862, f32[] %broadcast.864, f32[] %divide.865), metadata={op_type="DivNoNan" op_name="gradients/mean_squared_error/value_grad/div_no_nan_2"}
  %multiply.869 = f32[] multiply(f32[] %constant.868, f32[] %select.866), metadata={op_type="Mul" op_name="gradients/mean_squared_error/value_grad/mul"}
  %reshape.871 = f32[] reshape(f32[] %multiply.869), metadata={op_type="Reshape" op_name="gradients/mean_squared_error/value_grad/Reshape_1"}
  %constant.872 = f32[] constant(0.03125), metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul"}
  %broadcast.873 = f32[2,16]{1,0} broadcast(f32[] %constant.872), dimensions={}, metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul"}
  %constant.874 = f32[] constant(1), metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul"}
  %constant.875 = f32[] constant(0.03125), metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul"}
  %broadcast.876 = f32[2,16]{1,0} broadcast(f32[] %constant.875), dimensions={}, metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul"}
  %constant.877 = f32[] constant(1), metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul"}
  %broadcast.878 = f32[2,16]{1,0} broadcast(f32[] %constant.877), dimensions={}, metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul"}
  %multiply.879 = f32[2,16]{1,0} multiply(f32[2,16]{1,0} %broadcast.876, f32[2,16]{1,0} %broadcast.878), metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul"}
  %constant.880 = f32[] constant(0.03125), metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul_1"}
  %broadcast.881 = f32[2,16]{1,0} broadcast(f32[] %constant.880), dimensions={}, metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul_1"}
  %constant.890 = s32[0]{0} constant({}), metadata={op_type="Reshape" op_name="gradients/mean_squared_error/Mul_grad/Reshape"}
  %constant.882 = f32[] constant(0.03125), metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul_1"}
  %broadcast.883 = f32[2,16]{1,0} broadcast(f32[] %constant.882), dimensions={}, metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul_1"}
  %multiply.884 = f32[2,16]{1,0} multiply(f32[2,16]{1,0} %multiply.840, f32[2,16]{1,0} %broadcast.883), metadata={op_type="Mul" op_name="gradients/mean_squared_error/Mul_grad/Mul_1"}
  %convert.885 = f32[2,16]{1,0} convert(f32[2,16]{1,0} %multiply.884), metadata={op_type="Sum" op_name="gradients/mean_squared_error/Mul_grad/Sum"}
  %constant.886 = f32[] constant(0), metadata={op_type="Sum" op_name="gradients/mean_squared_error/Mul_grad/Sum"}
  %convert.887 = f32[] convert(f32[] %constant.886), metadata={op_type="Sum" op_name="gradients/mean_squared_error/Mul_grad/Sum"}
  %reduce.888 = f32[] reduce(f32[2,16]{1,0} %convert.885, f32[] %convert.887), dimensions={0,1}, to_apply=%gradients_mean_squared_error_Mul_grad_Sum-reduction.273, metadata={op_type="Sum" op_name="gradients/mean_squared_error/Mul_grad/Sum"}
  %convert.889 = f32[] convert(f32[] %reduce.888), metadata={op_type="Sum" op_name="gradients/mean_squared_error/Mul_grad/Sum"}
  %reshape.891 = f32[] reshape(f32[] %convert.889), metadata={op_type="Reshape" op_name="gradients/mean_squared_error/Mul_grad/Reshape"}
  %constant.893 = f32[] constant(0.0625), metadata={op_type="Mul" op_name="gradients/mean_squared_error/SquaredDifference_grad/mul_1"}
  %broadcast.894 = f32[2,16]{1,0} broadcast(f32[] %constant.893), dimensions={}, metadata={op_type="Mul" op_name="gradients/mean_squared_error/SquaredDifference_grad/mul_1"}
  %constant.895 = f32[] constant(0.0625), metadata={op_type="Mul" op_name="gradients/mean_squared_error/SquaredDifference_grad/mul_1"}
  %broadcast.896 = f32[2,16]{1,0} broadcast(f32[] %constant.895), dimensions={}, metadata={op_type="Mul" op_name="gradients/mean_squared_error/SquaredDifference_grad/mul_1"}
  %subtract.892 = f32[2,16]{1,0} subtract(f32[2,16]{1,0} %add.838, f32[2,16]{1,0} %get-tuple-element.582), metadata={op_type="Sub" op_name="gradients/mean_squared_error/SquaredDifference_grad/sub"}
  %multiply.897 = f32[2,16]{1,0} multiply(f32[2,16]{1,0} %broadcast.896, f32[2,16]{1,0} %subtract.892), metadata={op_type="Mul" op_name="gradients/mean_squared_error/SquaredDifference_grad/mul_1"}
  %negate.898 = f32[2,16]{1,0} negate(f32[2,16]{1,0} %multiply.897), metadata={op_type="Neg" op_name="gradients/mean_squared_error/SquaredDifference_grad/Neg"}
  %constant.933 = f32[] constant(32), metadata={op_type="DivNoNan" op_name="mean_squared_error/value"}
  %constant.934 = f32[] constant(32), metadata={op_type="DivNoNan" op_name="mean_squared_error/value"}
  %constant.935 = f32[] constant(0), metadata={op_type="DivNoNan" op_name="mean_squared_error/value"}
  %compare.936 = pred[] compare(f32[] %constant.934, f32[] %constant.935), direction=EQ, metadata={op_type="DivNoNan" op_name="mean_squared_error/value"}
  %constant.937 = f32[] constant(0), metadata={op_type="DivNoNan" op_name="mean_squared_error/value"}
  %broadcast.938 = f32[] broadcast(f32[] %constant.937), dimensions={}, metadata={op_type="DivNoNan" op_name="mean_squared_error/value"}
  %divide.939 = f32[] divide(f32[] %convert.849, f32[] %constant.934), metadata={op_type="DivNoNan" op_name="mean_squared_error/value"}
  %select.940 = f32[] select(pred[] %compare.936, f32[] %broadcast.938, f32[] %divide.939), metadata={op_type="DivNoNan" op_name="mean_squared_error/value"}
  %get-tuple-element.819 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=3, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.973 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.819), index=0, metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %constant.974 = s32[] constant(5), metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %constant.975 = s32[] constant(2), metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %constant.976 = s32[] constant(128), metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %get-tuple-element.823 = (f32[5,2,16]{2,0,1}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=7, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.984 = f32[5,2,16]{2,0,1} get-tuple-element((f32[5,2,16]{2,0,1}, s32[]) %get-tuple-element.823), index=0, metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %constant.985 = s32[] constant(5), metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %constant.986 = s32[] constant(2), metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %constant.987 = s32[] constant(16), metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %constant.995 = s32[] constant(0), metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %constant.996 = s32[] constant(5), metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %constant.997 = s32[] constant(0), metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %constant.998 = s32[] constant(5), metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.816 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=0, metadata={op_type="While" op_name="rnn/while"}
  %constant.977 = f32[] constant(0), metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %broadcast.978 = f32[5,2,128]{2,1,0} broadcast(f32[] %constant.977), dimensions={}, metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %constant.979 = s32[] constant(0), metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %tuple.980 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %broadcast.978, s32[] %constant.979), metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %get-tuple-element.982 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %tuple.980), index=0, metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %get-tuple-element.981 = s32[] get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.819), index=1, metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %tuple.983 = (f32[5,2,128]{2,1,0}, s32[]) tuple(f32[5,2,128]{2,1,0} %get-tuple-element.982, s32[] %get-tuple-element.981), metadata={op_type="ZerosLike" op_name="gradients/zeros_like"}
  %constant.583 = f32[] constant(0), metadata={op_type="Const" op_name="gradients/Const"}
  %broadcast.584 = f32[2,128]{1,0} broadcast(f32[] %constant.583), dimensions={}, metadata={op_type="Const" op_name="gradients/Const"}
  %dot.901 = f32[2,128]{1,0} dot(f32[2,16]{1,0} %multiply.897, f32[128,16]{1,0} %get-tuple-element.562), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="gradients/dense/MatMul_grad/MatMul"}
  %transpose.902 = f32[2,128]{1,0} transpose(f32[2,128]{1,0} %dot.901), dimensions={0,1}, metadata={op_type="MatMul" op_name="gradients/dense/MatMul_grad/MatMul"}
  %constant.988 = f32[] constant(0), metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %broadcast.989 = f32[5,2,16]{2,1,0} broadcast(f32[] %constant.988), dimensions={}, metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %constant.990 = s32[] constant(0), metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %tuple.991 = (f32[5,2,16]{2,1,0}, s32[]) tuple(f32[5,2,16]{2,1,0} %broadcast.989, s32[] %constant.990), metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %get-tuple-element.993 = f32[5,2,16]{2,1,0} get-tuple-element((f32[5,2,16]{2,1,0}, s32[]) %tuple.991), index=0, metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %get-tuple-element.992 = s32[] get-tuple-element((f32[5,2,16]{2,0,1}, s32[]) %get-tuple-element.823), index=1, metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %tuple.994 = (f32[5,2,16]{2,1,0}, s32[]) tuple(f32[5,2,16]{2,1,0} %get-tuple-element.993, s32[] %get-tuple-element.992), metadata={op_type="ZerosLike" op_name="gradients/zeros_like_1"}
  %constant.764 = f32[] constant(0), metadata={op_type="Fill" op_name="gradients/zeros"}
  %broadcast.765 = f32[144,128]{1,0} broadcast(f32[] %constant.764), dimensions={}, metadata={op_type="Fill" op_name="gradients/zeros"}
  %constant.760 = f32[] constant(0), metadata={op_type="Fill" op_name="gradients/zeros_1"}
  %broadcast.761 = f32[128]{0} broadcast(f32[] %constant.760), dimensions={}, metadata={op_type="Fill" op_name="gradients/zeros_1"}
  %constant.772 = f32[] constant(0), metadata={op_type="Fill" op_name="gradients/zeros_2"}
  %broadcast.773 = f32[256,128]{1,0} broadcast(f32[] %constant.772), dimensions={}, metadata={op_type="Fill" op_name="gradients/zeros_2"}
  %constant.768 = f32[] constant(0), metadata={op_type="Fill" op_name="gradients/zeros_3"}
  %broadcast.769 = f32[128]{0} broadcast(f32[] %constant.768), dimensions={}, metadata={op_type="Fill" op_name="gradients/zeros_3"}
  %get-tuple-element.824 = (s32[5]{0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=8, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.825 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=9, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.826 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=10, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.827 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=11, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.828 = (f32[5,256,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=12, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.829 = (f32[5,2,256]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=13, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.830 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=14, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.831 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=15, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.832 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=16, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.833 = (f32[5,144,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=17, metadata={op_type="While" op_name="rnn/while"}
  %get-tuple-element.834 = (f32[5,2,144]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, s32[], (f32[5,2,16]{2,0,1}, s32[]), (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=10*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), f32[144,128]{1,0}, /*index=20*/f32[128]{0}, f32[256,128]{1,0}, f32[128]{0}) %tuple.815), index=18, metadata={op_type="While" op_name="rnn/while"}
  %tuple.999 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) tuple(s32[] %constant.997, s32[] %constant.998, s32[] %get-tuple-element.816, (f32[5,2,128]{2,1,0}, s32[]) %tuple.983, f32[2,128]{1,0} %broadcast.584, /*index=5*/f32[2,128]{1,0} %transpose.902, (f32[5,2,16]{2,1,0}, s32[]) %tuple.994, f32[144,128]{1,0} %broadcast.765, f32[128]{0} %broadcast.761, f32[256,128]{1,0} %broadcast.773, /*index=10*/f32[128]{0} %broadcast.769, (s32[5]{0}, s32[]) %get-tuple-element.824, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.825, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.826, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.827, /*index=15*/(f32[5,256,128]{2,1,0}, s32[]) %get-tuple-element.828, (f32[5,2,256]{2,1,0}, s32[]) %get-tuple-element.829, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.830, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.831, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.832, /*index=20*/(f32[5,144,128]{2,1,0}, s32[]) %get-tuple-element.833, (f32[5,2,144]{2,1,0}, s32[]) %get-tuple-element.834, (f32[5,2,16]{2,0,1}, s32[]) %get-tuple-element.823), metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %while.1000 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) while((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.999), condition=%cond_wrapper.549, body=%rnn_while_body_91_grad_340_const_0__.297, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1001 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=0, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1002 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=1, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1003 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=2, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1004 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=3, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1005 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=4, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1006 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=5, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1007 = (f32[5,2,16]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=6, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1008 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=7, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1009 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=8, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1010 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=9, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1011 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=10, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1012 = (s32[5]{0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=11, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1013 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=12, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1014 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=13, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1015 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=14, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1016 = (f32[5,256,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=15, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1017 = (f32[5,2,256]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=16, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1018 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=17, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1019 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=18, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1020 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=19, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1021 = (f32[5,144,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=20, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1022 = (f32[5,2,144]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=21, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1023 = (f32[5,2,16]{2,0,1}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %while.1000), index=22, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %tuple.1024 = (s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) tuple(s32[] %get-tuple-element.1001, s32[] %get-tuple-element.1002, s32[] %get-tuple-element.1003, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.1004, f32[2,128]{1,0} %get-tuple-element.1005, /*index=5*/f32[2,128]{1,0} %get-tuple-element.1006, (f32[5,2,16]{2,1,0}, s32[]) %get-tuple-element.1007, f32[144,128]{1,0} %get-tuple-element.1008, f32[128]{0} %get-tuple-element.1009, f32[256,128]{1,0} %get-tuple-element.1010, /*index=10*/f32[128]{0} %get-tuple-element.1011, (s32[5]{0}, s32[]) %get-tuple-element.1012, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.1013, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.1014, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.1015, /*index=15*/(f32[5,256,128]{2,1,0}, s32[]) %get-tuple-element.1016, (f32[5,2,256]{2,1,0}, s32[]) %get-tuple-element.1017, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.1018, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.1019, (f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.1020, /*index=20*/(f32[5,144,128]{2,1,0}, s32[]) %get-tuple-element.1021, (f32[5,2,144]{2,1,0}, s32[]) %get-tuple-element.1022, (f32[5,2,16]{2,0,1}, s32[]) %get-tuple-element.1023), metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1025 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=0, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1026 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=1, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1027 = s32[] get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=2, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1028 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=3, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1029 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=4, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1030 = f32[2,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=5, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1031 = (f32[5,2,16]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=6, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1036 = (s32[5]{0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=11, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1037 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=12, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1038 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=13, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1039 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=14, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1040 = (f32[5,256,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=15, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1041 = (f32[5,2,256]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=16, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1042 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=17, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1043 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=18, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1044 = (f32[5,2,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=19, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1045 = (f32[5,144,128]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=20, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1046 = (f32[5,2,144]{2,1,0}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=21, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %get-tuple-element.1047 = (f32[5,2,16]{2,0,1}, s32[]) get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=22, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %constant.1168 = f32[] constant(0.9), metadata={op_type="Mul" op_name="Adam/mul"}
  %constant.1171 = f32[] constant(0.999), metadata={op_type="Mul" op_name="Adam/mul_1"}
  %constant.1175 = s32[3]{0} constant({1, 0, 2}), metadata={op_type="Transpose" op_name="rnn/transpose_1"}
  %get-tuple-element.1174 = f32[5,2,128]{2,1,0} get-tuple-element((f32[5,2,128]{2,1,0}, s32[]) %get-tuple-element.819), index=0, metadata={op_type="TensorListStack" op_name="rnn/TensorArrayV2Stack/TensorListStack"}
  %transpose.1176 = f32[2,5,128]{2,0,1} transpose(f32[5,2,128]{2,1,0} %get-tuple-element.1174), dimensions={1,0,2}, metadata={op_type="Transpose" op_name="rnn/transpose_1"}
  %constant.1177 = s32[] constant(1), metadata={op_type="AddV2" op_name="add_0"}
  %get-tuple-element.555 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=0
  %constant.1178 = s32[] constant(1), metadata={op_type="AddV2" op_name="add_0"}
  %add.1179 = s32[] add(s32[] %get-tuple-element.555, s32[] %constant.1178), metadata={op_type="AddV2" op_name="add_0"}
  %get-tuple-element.556 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=1
  %constant.1180 = s32[] constant(0)
  %get-tuple-element.566 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=11
  %constant.1049 = f32[] constant(0.9), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %broadcast.1061 = f32[144,128]{1,0} broadcast(f32[] %constant.1049), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %multiply.1062 = f32[144,128]{1,0} multiply(f32[144,128]{1,0} %get-tuple-element.566, f32[144,128]{1,0} %broadcast.1061), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %get-tuple-element.1032 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=7, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %constant.1052 = f32[] constant(1), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %subtract.1058 = f32[] subtract(f32[] %constant.1052, f32[] %constant.1049), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %broadcast.1059 = f32[144,128]{1,0} broadcast(f32[] %subtract.1058), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %multiply.1060 = f32[144,128]{1,0} multiply(f32[144,128]{1,0} %get-tuple-element.1032, f32[144,128]{1,0} %broadcast.1059), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %add.1063 = f32[144,128]{1,0} add(f32[144,128]{1,0} %multiply.1062, f32[144,128]{1,0} %multiply.1060), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %constant.1048 = f32[] constant(0.01), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %get-tuple-element.565 = f32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=10
  %subtract.1054 = f32[] subtract(f32[] %constant.1052, f32[] %get-tuple-element.565), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %sqrt.1055 = f32[] sqrt(f32[] %subtract.1054), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %multiply.1056 = f32[] multiply(f32[] %constant.1048, f32[] %sqrt.1055), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %get-tuple-element.564 = f32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=9
  %subtract.1053 = f32[] subtract(f32[] %constant.1052, f32[] %get-tuple-element.564), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %divide.1057 = f32[] divide(f32[] %multiply.1056, f32[] %subtract.1053), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %broadcast.1074 = f32[144,128]{1,0} broadcast(f32[] %divide.1057), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %multiply.1075 = f32[144,128]{1,0} multiply(f32[144,128]{1,0} %add.1063, f32[144,128]{1,0} %broadcast.1074), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %get-tuple-element.567 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=12
  %constant.1050 = f32[] constant(0.999), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %broadcast.1068 = f32[144,128]{1,0} broadcast(f32[] %constant.1050), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %multiply.1069 = f32[144,128]{1,0} multiply(f32[144,128]{1,0} %get-tuple-element.567, f32[144,128]{1,0} %broadcast.1068), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %multiply.1065 = f32[144,128]{1,0} multiply(f32[144,128]{1,0} %get-tuple-element.1032, f32[144,128]{1,0} %get-tuple-element.1032), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %subtract.1064 = f32[] subtract(f32[] %constant.1052, f32[] %constant.1050), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %broadcast.1066 = f32[144,128]{1,0} broadcast(f32[] %subtract.1064), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %multiply.1067 = f32[144,128]{1,0} multiply(f32[144,128]{1,0} %multiply.1065, f32[144,128]{1,0} %broadcast.1066), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %add.1070 = f32[144,128]{1,0} add(f32[144,128]{1,0} %multiply.1069, f32[144,128]{1,0} %multiply.1067), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %sqrt.1071 = f32[144,128]{1,0} sqrt(f32[144,128]{1,0} %add.1070), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %constant.1051 = f32[] constant(0.001), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %broadcast.1072 = f32[144,128]{1,0} broadcast(f32[] %constant.1051), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %add.1073 = f32[144,128]{1,0} add(f32[144,128]{1,0} %sqrt.1071, f32[144,128]{1,0} %broadcast.1072), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %divide.1076 = f32[144,128]{1,0} divide(f32[144,128]{1,0} %multiply.1075, f32[144,128]{1,0} %add.1073), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %subtract.1077 = f32[144,128]{1,0} subtract(f32[144,128]{1,0} %get-tuple-element.558, f32[144,128]{1,0} %divide.1076), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/ResourceApplyAdam"}
  %tuple.1181 = (f32[144,128]{1,0}) tuple(f32[144,128]{1,0} %subtract.1077), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1182 = f32[144,128]{1,0} get-tuple-element((f32[144,128]{1,0}) %tuple.1181), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.568 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=13
  %constant.1079 = f32[] constant(0.9), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %broadcast.1091 = f32[128]{0} broadcast(f32[] %constant.1079), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %multiply.1092 = f32[128]{0} multiply(f32[128]{0} %get-tuple-element.568, f32[128]{0} %broadcast.1091), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %get-tuple-element.1033 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=8, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %constant.1082 = f32[] constant(1), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %subtract.1088 = f32[] subtract(f32[] %constant.1082, f32[] %constant.1079), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %broadcast.1089 = f32[128]{0} broadcast(f32[] %subtract.1088), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %multiply.1090 = f32[128]{0} multiply(f32[128]{0} %get-tuple-element.1033, f32[128]{0} %broadcast.1089), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %add.1093 = f32[128]{0} add(f32[128]{0} %multiply.1092, f32[128]{0} %multiply.1090), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %constant.1078 = f32[] constant(0.01), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %subtract.1084 = f32[] subtract(f32[] %constant.1082, f32[] %get-tuple-element.565), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %sqrt.1085 = f32[] sqrt(f32[] %subtract.1084), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %multiply.1086 = f32[] multiply(f32[] %constant.1078, f32[] %sqrt.1085), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %subtract.1083 = f32[] subtract(f32[] %constant.1082, f32[] %get-tuple-element.564), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %divide.1087 = f32[] divide(f32[] %multiply.1086, f32[] %subtract.1083), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %broadcast.1104 = f32[128]{0} broadcast(f32[] %divide.1087), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %multiply.1105 = f32[128]{0} multiply(f32[128]{0} %add.1093, f32[128]{0} %broadcast.1104), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %get-tuple-element.569 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=14
  %constant.1080 = f32[] constant(0.999), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %broadcast.1098 = f32[128]{0} broadcast(f32[] %constant.1080), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %multiply.1099 = f32[128]{0} multiply(f32[128]{0} %get-tuple-element.569, f32[128]{0} %broadcast.1098), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %multiply.1095 = f32[128]{0} multiply(f32[128]{0} %get-tuple-element.1033, f32[128]{0} %get-tuple-element.1033), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %subtract.1094 = f32[] subtract(f32[] %constant.1082, f32[] %constant.1080), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %broadcast.1096 = f32[128]{0} broadcast(f32[] %subtract.1094), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %multiply.1097 = f32[128]{0} multiply(f32[128]{0} %multiply.1095, f32[128]{0} %broadcast.1096), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %add.1100 = f32[128]{0} add(f32[128]{0} %multiply.1099, f32[128]{0} %multiply.1097), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %sqrt.1101 = f32[128]{0} sqrt(f32[128]{0} %add.1100), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %constant.1081 = f32[] constant(0.001), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %broadcast.1102 = f32[128]{0} broadcast(f32[] %constant.1081), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %add.1103 = f32[128]{0} add(f32[128]{0} %sqrt.1101, f32[128]{0} %broadcast.1102), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %divide.1106 = f32[128]{0} divide(f32[128]{0} %multiply.1105, f32[128]{0} %add.1103), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %subtract.1107 = f32[128]{0} subtract(f32[128]{0} %get-tuple-element.559, f32[128]{0} %divide.1106), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_0/RNNCell0/bias/ResourceApplyAdam"}
  %tuple.1183 = (f32[128]{0}) tuple(f32[128]{0} %subtract.1107), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1184 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1183), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.570 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=15
  %constant.1109 = f32[] constant(0.9), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %broadcast.1121 = f32[256,128]{1,0} broadcast(f32[] %constant.1109), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %multiply.1122 = f32[256,128]{1,0} multiply(f32[256,128]{1,0} %get-tuple-element.570, f32[256,128]{1,0} %broadcast.1121), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %get-tuple-element.1034 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=9, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %constant.1112 = f32[] constant(1), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %subtract.1118 = f32[] subtract(f32[] %constant.1112, f32[] %constant.1109), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %broadcast.1119 = f32[256,128]{1,0} broadcast(f32[] %subtract.1118), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %multiply.1120 = f32[256,128]{1,0} multiply(f32[256,128]{1,0} %get-tuple-element.1034, f32[256,128]{1,0} %broadcast.1119), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %add.1123 = f32[256,128]{1,0} add(f32[256,128]{1,0} %multiply.1122, f32[256,128]{1,0} %multiply.1120), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %constant.1108 = f32[] constant(0.01), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %subtract.1114 = f32[] subtract(f32[] %constant.1112, f32[] %get-tuple-element.565), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %sqrt.1115 = f32[] sqrt(f32[] %subtract.1114), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %multiply.1116 = f32[] multiply(f32[] %constant.1108, f32[] %sqrt.1115), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %subtract.1113 = f32[] subtract(f32[] %constant.1112, f32[] %get-tuple-element.564), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %divide.1117 = f32[] divide(f32[] %multiply.1116, f32[] %subtract.1113), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %broadcast.1134 = f32[256,128]{1,0} broadcast(f32[] %divide.1117), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %multiply.1135 = f32[256,128]{1,0} multiply(f32[256,128]{1,0} %add.1123, f32[256,128]{1,0} %broadcast.1134), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %get-tuple-element.571 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=16
  %constant.1110 = f32[] constant(0.999), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %broadcast.1128 = f32[256,128]{1,0} broadcast(f32[] %constant.1110), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %multiply.1129 = f32[256,128]{1,0} multiply(f32[256,128]{1,0} %get-tuple-element.571, f32[256,128]{1,0} %broadcast.1128), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %multiply.1125 = f32[256,128]{1,0} multiply(f32[256,128]{1,0} %get-tuple-element.1034, f32[256,128]{1,0} %get-tuple-element.1034), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %subtract.1124 = f32[] subtract(f32[] %constant.1112, f32[] %constant.1110), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %broadcast.1126 = f32[256,128]{1,0} broadcast(f32[] %subtract.1124), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %multiply.1127 = f32[256,128]{1,0} multiply(f32[256,128]{1,0} %multiply.1125, f32[256,128]{1,0} %broadcast.1126), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %add.1130 = f32[256,128]{1,0} add(f32[256,128]{1,0} %multiply.1129, f32[256,128]{1,0} %multiply.1127), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %sqrt.1131 = f32[256,128]{1,0} sqrt(f32[256,128]{1,0} %add.1130), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %constant.1111 = f32[] constant(0.001), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %broadcast.1132 = f32[256,128]{1,0} broadcast(f32[] %constant.1111), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %add.1133 = f32[256,128]{1,0} add(f32[256,128]{1,0} %sqrt.1131, f32[256,128]{1,0} %broadcast.1132), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %divide.1136 = f32[256,128]{1,0} divide(f32[256,128]{1,0} %multiply.1135, f32[256,128]{1,0} %add.1133), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %subtract.1137 = f32[256,128]{1,0} subtract(f32[256,128]{1,0} %get-tuple-element.560, f32[256,128]{1,0} %divide.1136), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/ResourceApplyAdam"}
  %tuple.1185 = (f32[256,128]{1,0}) tuple(f32[256,128]{1,0} %subtract.1137), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1186 = f32[256,128]{1,0} get-tuple-element((f32[256,128]{1,0}) %tuple.1185), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.572 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=17
  %constant.1139 = f32[] constant(0.9), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %broadcast.1151 = f32[128]{0} broadcast(f32[] %constant.1139), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %multiply.1152 = f32[128]{0} multiply(f32[128]{0} %get-tuple-element.572, f32[128]{0} %broadcast.1151), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %get-tuple-element.1035 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], (f32[5,2,128]{2,1,0}, s32[]), f32[2,128]{1,0}, /*index=5*/f32[2,128]{1,0}, (f32[5,2,16]{2,1,0}, s32[]), f32[144,128]{1,0}, f32[128]{0}, f32[256,128]{1,0}, /*index=10*/f32[128]{0}, (s32[5]{0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=15*/(f32[5,256,128]{2,1,0}, s32[]), (f32[5,2,256]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), (f32[5,2,128]{2,1,0}, s32[]), /*index=20*/(f32[5,144,128]{2,1,0}, s32[]), (f32[5,2,144]{2,1,0}, s32[]), (f32[5,2,16]{2,0,1}, s32[])) %tuple.1024), index=10, metadata={op_type="StatelessWhile" op_name="gradients/rnn/while_grad/rnn/while_grad"}
  %constant.1142 = f32[] constant(1), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %subtract.1148 = f32[] subtract(f32[] %constant.1142, f32[] %constant.1139), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %broadcast.1149 = f32[128]{0} broadcast(f32[] %subtract.1148), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %multiply.1150 = f32[128]{0} multiply(f32[128]{0} %get-tuple-element.1035, f32[128]{0} %broadcast.1149), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %add.1153 = f32[128]{0} add(f32[128]{0} %multiply.1152, f32[128]{0} %multiply.1150), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %constant.1138 = f32[] constant(0.01), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %subtract.1144 = f32[] subtract(f32[] %constant.1142, f32[] %get-tuple-element.565), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %sqrt.1145 = f32[] sqrt(f32[] %subtract.1144), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %multiply.1146 = f32[] multiply(f32[] %constant.1138, f32[] %sqrt.1145), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %subtract.1143 = f32[] subtract(f32[] %constant.1142, f32[] %get-tuple-element.564), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %divide.1147 = f32[] divide(f32[] %multiply.1146, f32[] %subtract.1143), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %broadcast.1164 = f32[128]{0} broadcast(f32[] %divide.1147), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %multiply.1165 = f32[128]{0} multiply(f32[128]{0} %add.1153, f32[128]{0} %broadcast.1164), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %get-tuple-element.573 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=18
  %constant.1140 = f32[] constant(0.999), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %broadcast.1158 = f32[128]{0} broadcast(f32[] %constant.1140), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %multiply.1159 = f32[128]{0} multiply(f32[128]{0} %get-tuple-element.573, f32[128]{0} %broadcast.1158), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %multiply.1155 = f32[128]{0} multiply(f32[128]{0} %get-tuple-element.1035, f32[128]{0} %get-tuple-element.1035), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %subtract.1154 = f32[] subtract(f32[] %constant.1142, f32[] %constant.1140), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %broadcast.1156 = f32[128]{0} broadcast(f32[] %subtract.1154), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %multiply.1157 = f32[128]{0} multiply(f32[128]{0} %multiply.1155, f32[128]{0} %broadcast.1156), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %add.1160 = f32[128]{0} add(f32[128]{0} %multiply.1159, f32[128]{0} %multiply.1157), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %sqrt.1161 = f32[128]{0} sqrt(f32[128]{0} %add.1160), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %constant.1141 = f32[] constant(0.001), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %broadcast.1162 = f32[128]{0} broadcast(f32[] %constant.1141), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %add.1163 = f32[128]{0} add(f32[128]{0} %sqrt.1161, f32[128]{0} %broadcast.1162), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %divide.1166 = f32[128]{0} divide(f32[128]{0} %multiply.1165, f32[128]{0} %add.1163), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %subtract.1167 = f32[128]{0} subtract(f32[128]{0} %get-tuple-element.561, f32[128]{0} %divide.1166), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_rnn/multi_rnn_cell/cell_1/RNNCell1/bias/ResourceApplyAdam"}
  %tuple.1187 = (f32[128]{0}) tuple(f32[128]{0} %subtract.1167), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1188 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1187), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.574 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=19
  %constant.944 = f32[] constant(0.9), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %broadcast.956 = f32[128,16]{1,0} broadcast(f32[] %constant.944), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %multiply.957 = f32[128,16]{1,0} multiply(f32[128,16]{1,0} %get-tuple-element.574, f32[128,16]{1,0} %broadcast.956), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %dot.941 = f32[128,16]{1,0} dot(f32[2,128]{1,0} %get-tuple-element.821, f32[2,16]{1,0} %multiply.897), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="gradients/dense/MatMul_grad/MatMul_1"}
  %transpose.942 = f32[128,16]{1,0} transpose(f32[128,16]{1,0} %dot.941), dimensions={0,1}, metadata={op_type="MatMul" op_name="gradients/dense/MatMul_grad/MatMul_1"}
  %constant.947 = f32[] constant(1), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %subtract.953 = f32[] subtract(f32[] %constant.947, f32[] %constant.944), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %broadcast.954 = f32[128,16]{1,0} broadcast(f32[] %subtract.953), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %multiply.955 = f32[128,16]{1,0} multiply(f32[128,16]{1,0} %transpose.942, f32[128,16]{1,0} %broadcast.954), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %add.958 = f32[128,16]{1,0} add(f32[128,16]{1,0} %multiply.957, f32[128,16]{1,0} %multiply.955), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %constant.943 = f32[] constant(0.01), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %subtract.949 = f32[] subtract(f32[] %constant.947, f32[] %get-tuple-element.565), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %sqrt.950 = f32[] sqrt(f32[] %subtract.949), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %multiply.951 = f32[] multiply(f32[] %constant.943, f32[] %sqrt.950), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %subtract.948 = f32[] subtract(f32[] %constant.947, f32[] %get-tuple-element.564), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %divide.952 = f32[] divide(f32[] %multiply.951, f32[] %subtract.948), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %broadcast.969 = f32[128,16]{1,0} broadcast(f32[] %divide.952), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %multiply.970 = f32[128,16]{1,0} multiply(f32[128,16]{1,0} %add.958, f32[128,16]{1,0} %broadcast.969), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %get-tuple-element.575 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=20
  %constant.945 = f32[] constant(0.999), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %broadcast.963 = f32[128,16]{1,0} broadcast(f32[] %constant.945), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %multiply.964 = f32[128,16]{1,0} multiply(f32[128,16]{1,0} %get-tuple-element.575, f32[128,16]{1,0} %broadcast.963), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %multiply.960 = f32[128,16]{1,0} multiply(f32[128,16]{1,0} %transpose.942, f32[128,16]{1,0} %transpose.942), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %subtract.959 = f32[] subtract(f32[] %constant.947, f32[] %constant.945), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %broadcast.961 = f32[128,16]{1,0} broadcast(f32[] %subtract.959), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %multiply.962 = f32[128,16]{1,0} multiply(f32[128,16]{1,0} %multiply.960, f32[128,16]{1,0} %broadcast.961), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %add.965 = f32[128,16]{1,0} add(f32[128,16]{1,0} %multiply.964, f32[128,16]{1,0} %multiply.962), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %sqrt.966 = f32[128,16]{1,0} sqrt(f32[128,16]{1,0} %add.965), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %constant.946 = f32[] constant(0.001), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %broadcast.967 = f32[128,16]{1,0} broadcast(f32[] %constant.946), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %add.968 = f32[128,16]{1,0} add(f32[128,16]{1,0} %sqrt.966, f32[128,16]{1,0} %broadcast.967), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %divide.971 = f32[128,16]{1,0} divide(f32[128,16]{1,0} %multiply.970, f32[128,16]{1,0} %add.968), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %subtract.972 = f32[128,16]{1,0} subtract(f32[128,16]{1,0} %get-tuple-element.562, f32[128,16]{1,0} %divide.971), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/kernel/ResourceApplyAdam"}
  %tuple.1189 = (f32[128,16]{1,0}) tuple(f32[128,16]{1,0} %subtract.972), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1190 = f32[128,16]{1,0} get-tuple-element((f32[128,16]{1,0}) %tuple.1189), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.576 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=21
  %constant.904 = f32[] constant(0.9), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %broadcast.916 = f32[16]{0} broadcast(f32[] %constant.904), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %multiply.917 = f32[16]{0} multiply(f32[16]{0} %get-tuple-element.576, f32[16]{0} %broadcast.916), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %constant.899 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="gradients/dense/BiasAdd_grad/BiasAddGrad"}
  %reduce.900 = f32[16]{0} reduce(f32[2,16]{1,0} %multiply.897, f32[] %constant.899), dimensions={0}, to_apply=%region_0.277, metadata={op_name="gradients/dense/BiasAdd_grad/BiasAddGrad"}
  %constant.907 = f32[] constant(1), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %subtract.913 = f32[] subtract(f32[] %constant.907, f32[] %constant.904), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %broadcast.914 = f32[16]{0} broadcast(f32[] %subtract.913), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %multiply.915 = f32[16]{0} multiply(f32[16]{0} %reduce.900, f32[16]{0} %broadcast.914), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %add.918 = f32[16]{0} add(f32[16]{0} %multiply.917, f32[16]{0} %multiply.915), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %constant.903 = f32[] constant(0.01), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %subtract.909 = f32[] subtract(f32[] %constant.907, f32[] %get-tuple-element.565), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %sqrt.910 = f32[] sqrt(f32[] %subtract.909), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %multiply.911 = f32[] multiply(f32[] %constant.903, f32[] %sqrt.910), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %subtract.908 = f32[] subtract(f32[] %constant.907, f32[] %get-tuple-element.564), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %divide.912 = f32[] divide(f32[] %multiply.911, f32[] %subtract.908), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %broadcast.929 = f32[16]{0} broadcast(f32[] %divide.912), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %multiply.930 = f32[16]{0} multiply(f32[16]{0} %add.918, f32[16]{0} %broadcast.929), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %get-tuple-element.577 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.554), index=22
  %constant.905 = f32[] constant(0.999), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %broadcast.923 = f32[16]{0} broadcast(f32[] %constant.905), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %multiply.924 = f32[16]{0} multiply(f32[16]{0} %get-tuple-element.577, f32[16]{0} %broadcast.923), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %multiply.920 = f32[16]{0} multiply(f32[16]{0} %reduce.900, f32[16]{0} %reduce.900), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %subtract.919 = f32[] subtract(f32[] %constant.907, f32[] %constant.905), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %broadcast.921 = f32[16]{0} broadcast(f32[] %subtract.919), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %multiply.922 = f32[16]{0} multiply(f32[16]{0} %multiply.920, f32[16]{0} %broadcast.921), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %add.925 = f32[16]{0} add(f32[16]{0} %multiply.924, f32[16]{0} %multiply.922), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %sqrt.926 = f32[16]{0} sqrt(f32[16]{0} %add.925), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %constant.906 = f32[] constant(0.001), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %broadcast.927 = f32[16]{0} broadcast(f32[] %constant.906), dimensions={}, metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %add.928 = f32[16]{0} add(f32[16]{0} %sqrt.926, f32[16]{0} %broadcast.927), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %divide.931 = f32[16]{0} divide(f32[16]{0} %multiply.930, f32[16]{0} %add.928), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %subtract.932 = f32[16]{0} subtract(f32[16]{0} %get-tuple-element.563, f32[16]{0} %divide.931), metadata={op_type="ResourceApplyAdam" op_name="Adam/update_dense/bias/ResourceApplyAdam"}
  %tuple.1191 = (f32[16]{0}) tuple(f32[16]{0} %subtract.932), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1192 = f32[16]{0} get-tuple-element((f32[16]{0}) %tuple.1191), index=0, metadata={op_name="XLA_Retvals"}
  %constant.1169 = f32[] constant(0.9), metadata={op_type="Mul" op_name="Adam/mul"}
  %multiply.1170 = f32[] multiply(f32[] %get-tuple-element.564, f32[] %constant.1169), metadata={op_type="Mul" op_name="Adam/mul"}
  %tuple.1193 = (f32[]) tuple(f32[] %multiply.1170), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1194 = f32[] get-tuple-element((f32[]) %tuple.1193), index=0, metadata={op_name="XLA_Retvals"}
  %constant.1172 = f32[] constant(0.999), metadata={op_type="Mul" op_name="Adam/mul_1"}
  %multiply.1173 = f32[] multiply(f32[] %get-tuple-element.565, f32[] %constant.1172), metadata={op_type="Mul" op_name="Adam/mul_1"}
  %tuple.1195 = (f32[]) tuple(f32[] %multiply.1173), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1196 = f32[] get-tuple-element((f32[]) %tuple.1195), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1197 = (f32[144,128]{1,0}) tuple(f32[144,128]{1,0} %add.1063), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1198 = f32[144,128]{1,0} get-tuple-element((f32[144,128]{1,0}) %tuple.1197), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1199 = (f32[144,128]{1,0}) tuple(f32[144,128]{1,0} %add.1070), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1200 = f32[144,128]{1,0} get-tuple-element((f32[144,128]{1,0}) %tuple.1199), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1201 = (f32[128]{0}) tuple(f32[128]{0} %add.1093), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1202 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1201), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1203 = (f32[128]{0}) tuple(f32[128]{0} %add.1100), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1204 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1203), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1205 = (f32[256,128]{1,0}) tuple(f32[256,128]{1,0} %add.1123), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1206 = f32[256,128]{1,0} get-tuple-element((f32[256,128]{1,0}) %tuple.1205), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1207 = (f32[256,128]{1,0}) tuple(f32[256,128]{1,0} %add.1130), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1208 = f32[256,128]{1,0} get-tuple-element((f32[256,128]{1,0}) %tuple.1207), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1209 = (f32[128]{0}) tuple(f32[128]{0} %add.1153), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1210 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1209), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1211 = (f32[128]{0}) tuple(f32[128]{0} %add.1160), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1212 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1211), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1213 = (f32[128,16]{1,0}) tuple(f32[128,16]{1,0} %add.958), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1214 = f32[128,16]{1,0} get-tuple-element((f32[128,16]{1,0}) %tuple.1213), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1215 = (f32[128,16]{1,0}) tuple(f32[128,16]{1,0} %add.965), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1216 = f32[128,16]{1,0} get-tuple-element((f32[128,16]{1,0}) %tuple.1215), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1217 = (f32[16]{0}) tuple(f32[16]{0} %add.918), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1218 = f32[16]{0} get-tuple-element((f32[16]{0}) %tuple.1217), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.1219 = (f32[16]{0}) tuple(f32[16]{0} %add.925), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1220 = f32[16]{0} get-tuple-element((f32[16]{0}) %tuple.1219), index=0, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.1221 = (s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) tuple(s32[] %add.1179, s32[] %get-tuple-element.556, s32[] %constant.1180, f32[144,128]{1,0} %get-tuple-element.1182, f32[128]{0} %get-tuple-element.1184, /*index=5*/f32[256,128]{1,0} %get-tuple-element.1186, f32[128]{0} %get-tuple-element.1188, f32[128,16]{1,0} %get-tuple-element.1190, f32[16]{0} %get-tuple-element.1192, f32[] %get-tuple-element.1194, /*index=10*/f32[] %get-tuple-element.1196, f32[144,128]{1,0} %get-tuple-element.1198, f32[144,128]{1,0} %get-tuple-element.1200, f32[128]{0} %get-tuple-element.1202, f32[128]{0} %get-tuple-element.1204, /*index=15*/f32[256,128]{1,0} %get-tuple-element.1206, f32[256,128]{1,0} %get-tuple-element.1208, f32[128]{0} %get-tuple-element.1210, f32[128]{0} %get-tuple-element.1212, f32[128,16]{1,0} %get-tuple-element.1214, /*index=20*/f32[128,16]{1,0} %get-tuple-element.1216, f32[16]{0} %get-tuple-element.1218, f32[16]{0} %get-tuple-element.1220), metadata={op_name="XLA_Retvals"}
}

%while_cond_22_const_0__.1222 (arg_tuple.1223: (s32[], s32[], s32[], f32[144,128], f32[128], /*index=5*/f32[256,128], f32[128], f32[128,16], f32[16], f32[], /*index=10*/f32[], f32[144,128], f32[144,128], f32[128], f32[128], /*index=15*/f32[256,128], f32[256,128], f32[128], f32[128], f32[128,16], /*index=20*/f32[128,16], f32[16], f32[16])) -> (pred[]) {
  %arg_tuple.1223 = (s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.1225 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=1
  %get-tuple-element.1226 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=2
  %get-tuple-element.1227 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=3
  %get-tuple-element.1228 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=4
  %get-tuple-element.1229 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=5
  %get-tuple-element.1230 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=6
  %get-tuple-element.1231 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=7
  %get-tuple-element.1232 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=8
  %get-tuple-element.1233 = f32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=9
  %get-tuple-element.1234 = f32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=10
  %get-tuple-element.1235 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=11
  %get-tuple-element.1236 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=12
  %get-tuple-element.1237 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=13
  %get-tuple-element.1238 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=14
  %get-tuple-element.1239 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=15
  %get-tuple-element.1240 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=16
  %get-tuple-element.1241 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=17
  %get-tuple-element.1242 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=18
  %get-tuple-element.1243 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=19
  %get-tuple-element.1244 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=20
  %get-tuple-element.1245 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=21
  %get-tuple-element.1246 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=22
  %constant.1247 = s32[] constant(100), metadata={op_type="Less" op_name="Less"}
  %constant.1250 = pred[] constant(true), metadata={op_type="LogicalAnd" op_name="LogicalAnd"}
  %get-tuple-element.1224 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %arg_tuple.1223), index=0
  %constant.1248 = s32[] constant(100), metadata={op_type="Less" op_name="Less"}
  %compare.1249 = pred[] compare(s32[] %get-tuple-element.1224, s32[] %constant.1248), direction=LT, metadata={op_type="Less" op_name="Less"}
  %constant.1251 = pred[] constant(true), metadata={op_type="LogicalAnd" op_name="LogicalAnd"}
  %and.1252 = pred[] and(pred[] %compare.1249, pred[] %constant.1251), metadata={op_type="LogicalAnd" op_name="LogicalAnd"}
  ROOT %tuple.1253 = (pred[]) tuple(pred[] %and.1252), metadata={op_name="XLA_Retvals"}
}

%cond_wrapper.1254 (inputs.1255: (s32[], s32[], s32[], f32[144,128], f32[128], /*index=5*/f32[256,128], f32[128], f32[128,16], f32[16], f32[], /*index=10*/f32[], f32[144,128], f32[144,128], f32[128], f32[128], /*index=15*/f32[256,128], f32[256,128], f32[128], f32[128], f32[128,16], /*index=20*/f32[128,16], f32[16], f32[16])) -> pred[] {
  %inputs.1255 = (s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) parameter(0)
  %call.1256 = (pred[]) call((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %inputs.1255), to_apply=%while_cond_22_const_0__.1222
  ROOT %get-tuple-element.1257 = pred[] get-tuple-element((pred[]) %call.1256), index=0
}

ENTRY %cluster_8012243920778734216__.1367 (arg0.1: f32[], arg1.2: f32[], arg2.3: f32[16], arg3.4: f32[16], arg4.5: f32[16], arg5.6: f32[128,16], arg6.7: f32[128,16], arg7.8: f32[128,16], arg8.9: f32[128], arg9.10: f32[128], arg10.11: f32[128], arg11.12: f32[144,128], arg12.13: f32[144,128], arg13.14: f32[144,128], arg14.15: f32[128], arg15.16: f32[128], arg16.17: f32[128], arg17.18: f32[256,128], arg18.19: f32[256,128], arg19.20: f32[256,128]) -> (f32[], f32[], f32[16], f32[16], f32[16], /*index=5*/f32[128,16], f32[128,16], f32[128,16], f32[128], f32[128], /*index=10*/f32[128], f32[144,128], f32[144,128], f32[144,128], f32[128], /*index=15*/f32[128], f32[128], f32[256,128], f32[256,128], f32[256,128]) {
  %constant.21 = s32[] constant(0), metadata={op_type="While" op_name="while"}
  %constant.22 = s32[] constant(100), metadata={op_type="While" op_name="while"}
  %constant.23 = s32[] constant(0), metadata={op_type="While" op_name="while"}
  %constant.24 = s32[] constant(0), metadata={op_type="While" op_name="while"}
  %constant.25 = s32[] constant(100), metadata={op_type="While" op_name="while"}
  %constant.26 = s32[] constant(0), metadata={op_type="While" op_name="while"}
  %arg13.14 = f32[144,128]{1,0} parameter(13), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_0/RNNCell0/kernel"}
  %arg10.11 = f32[128]{0} parameter(10), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_0/RNNCell0/bias"}
  %arg19.20 = f32[256,128]{1,0} parameter(19), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_1/RNNCell1/kernel"}
  %arg16.17 = f32[128]{0} parameter(16), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_1/RNNCell1/bias"}
  %arg7.8 = f32[128,16]{1,0} parameter(7), parameter_replication={false}, metadata={op_name="XLA_Args/dense/kernel"}
  %arg4.5 = f32[16]{0} parameter(4), parameter_replication={false}, metadata={op_name="XLA_Args/dense/bias"}
  %arg0.1 = f32[] parameter(0), parameter_replication={false}, metadata={op_name="XLA_Args/beta1_power"}
  %arg1.2 = f32[] parameter(1), parameter_replication={false}, metadata={op_name="XLA_Args/beta2_power"}
  %arg11.12 = f32[144,128]{1,0} parameter(11), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/Adam"}
  %arg12.13 = f32[144,128]{1,0} parameter(12), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_0/RNNCell0/kernel/Adam_1"}
  %arg8.9 = f32[128]{0} parameter(8), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_0/RNNCell0/bias/Adam"}
  %arg9.10 = f32[128]{0} parameter(9), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_0/RNNCell0/bias/Adam_1"}
  %arg17.18 = f32[256,128]{1,0} parameter(17), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/Adam"}
  %arg18.19 = f32[256,128]{1,0} parameter(18), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_1/RNNCell1/kernel/Adam_1"}
  %arg14.15 = f32[128]{0} parameter(14), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_1/RNNCell1/bias/Adam"}
  %arg15.16 = f32[128]{0} parameter(15), parameter_replication={false}, metadata={op_name="XLA_Args/rnn/multi_rnn_cell/cell_1/RNNCell1/bias/Adam_1"}
  %arg5.6 = f32[128,16]{1,0} parameter(5), parameter_replication={false}, metadata={op_name="XLA_Args/dense/kernel/Adam"}
  %arg6.7 = f32[128,16]{1,0} parameter(6), parameter_replication={false}, metadata={op_name="XLA_Args/dense/kernel/Adam_1"}
  %arg2.3 = f32[16]{0} parameter(2), parameter_replication={false}, metadata={op_name="XLA_Args/dense/bias/Adam"}
  %arg3.4 = f32[16]{0} parameter(3), parameter_replication={false}, metadata={op_name="XLA_Args/dense/bias/Adam_1"}
  %tuple.27 = (s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) tuple(s32[] %constant.24, s32[] %constant.25, s32[] %constant.26, f32[144,128]{1,0} %arg13.14, f32[128]{0} %arg10.11, /*index=5*/f32[256,128]{1,0} %arg19.20, f32[128]{0} %arg16.17, f32[128,16]{1,0} %arg7.8, f32[16]{0} %arg4.5, f32[] %arg0.1, /*index=10*/f32[] %arg1.2, f32[144,128]{1,0} %arg11.12, f32[144,128]{1,0} %arg12.13, f32[128]{0} %arg8.9, f32[128]{0} %arg9.10, /*index=15*/f32[256,128]{1,0} %arg17.18, f32[256,128]{1,0} %arg18.19, f32[128]{0} %arg14.15, f32[128]{0} %arg15.16, f32[128,16]{1,0} %arg5.6, /*index=20*/f32[128,16]{1,0} %arg6.7, f32[16]{0} %arg2.3, f32[16]{0} %arg3.4), metadata={op_type="While" op_name="while"}
  %while.1258 = (s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) while((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.27), condition=%cond_wrapper.1254, body=%while_body_23_const_0__.553, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1259 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=0, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1260 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=1, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1261 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=2, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1262 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=3, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1263 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=4, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1264 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=5, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1265 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=6, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1266 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=7, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1267 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=8, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1268 = f32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=9, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1269 = f32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=10, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1270 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=11, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1271 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=12, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1272 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=13, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1273 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=14, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1274 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=15, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1275 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=16, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1276 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=17, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1277 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=18, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1278 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=19, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1279 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=20, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1280 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=21, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1281 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %while.1258), index=22, metadata={op_type="While" op_name="while"}
  %tuple.1282 = (s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) tuple(s32[] %get-tuple-element.1259, s32[] %get-tuple-element.1260, s32[] %get-tuple-element.1261, f32[144,128]{1,0} %get-tuple-element.1262, f32[128]{0} %get-tuple-element.1263, /*index=5*/f32[256,128]{1,0} %get-tuple-element.1264, f32[128]{0} %get-tuple-element.1265, f32[128,16]{1,0} %get-tuple-element.1266, f32[16]{0} %get-tuple-element.1267, f32[] %get-tuple-element.1268, /*index=10*/f32[] %get-tuple-element.1269, f32[144,128]{1,0} %get-tuple-element.1270, f32[144,128]{1,0} %get-tuple-element.1271, f32[128]{0} %get-tuple-element.1272, f32[128]{0} %get-tuple-element.1273, /*index=15*/f32[256,128]{1,0} %get-tuple-element.1274, f32[256,128]{1,0} %get-tuple-element.1275, f32[128]{0} %get-tuple-element.1276, f32[128]{0} %get-tuple-element.1277, f32[128,16]{1,0} %get-tuple-element.1278, /*index=20*/f32[128,16]{1,0} %get-tuple-element.1279, f32[16]{0} %get-tuple-element.1280, f32[16]{0} %get-tuple-element.1281), metadata={op_type="While" op_name="while"}
  %get-tuple-element.1283 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=0, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1284 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=1, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1285 = s32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=2, metadata={op_type="While" op_name="while"}
  %get-tuple-element.1292 = f32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=9, metadata={op_type="While" op_name="while"}
  %reshape.1306 = f32[] reshape(f32[] %get-tuple-element.1292), metadata={op_name="XLA_Retvals"}
  %tuple.1307 = (f32[]) tuple(f32[] %reshape.1306), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1308 = f32[] get-tuple-element((f32[]) %tuple.1307), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1293 = f32[] get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=10, metadata={op_type="While" op_name="while"}
  %reshape.1309 = f32[] reshape(f32[] %get-tuple-element.1293), metadata={op_name="XLA_Retvals"}
  %tuple.1310 = (f32[]) tuple(f32[] %reshape.1309), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1311 = f32[] get-tuple-element((f32[]) %tuple.1310), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1304 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=21, metadata={op_type="While" op_name="while"}
  %reshape.1312 = f32[16]{0} reshape(f32[16]{0} %get-tuple-element.1304), metadata={op_name="XLA_Retvals"}
  %tuple.1313 = (f32[16]{0}) tuple(f32[16]{0} %reshape.1312), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1314 = f32[16]{0} get-tuple-element((f32[16]{0}) %tuple.1313), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1305 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=22, metadata={op_type="While" op_name="while"}
  %reshape.1315 = f32[16]{0} reshape(f32[16]{0} %get-tuple-element.1305), metadata={op_name="XLA_Retvals"}
  %tuple.1316 = (f32[16]{0}) tuple(f32[16]{0} %reshape.1315), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1317 = f32[16]{0} get-tuple-element((f32[16]{0}) %tuple.1316), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1291 = f32[16]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=8, metadata={op_type="While" op_name="while"}
  %reshape.1318 = f32[16]{0} reshape(f32[16]{0} %get-tuple-element.1291), metadata={op_name="XLA_Retvals"}
  %tuple.1319 = (f32[16]{0}) tuple(f32[16]{0} %reshape.1318), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1320 = f32[16]{0} get-tuple-element((f32[16]{0}) %tuple.1319), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1302 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=19, metadata={op_type="While" op_name="while"}
  %reshape.1321 = f32[128,16]{1,0} reshape(f32[128,16]{1,0} %get-tuple-element.1302), metadata={op_name="XLA_Retvals"}
  %tuple.1322 = (f32[128,16]{1,0}) tuple(f32[128,16]{1,0} %reshape.1321), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1323 = f32[128,16]{1,0} get-tuple-element((f32[128,16]{1,0}) %tuple.1322), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1303 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=20, metadata={op_type="While" op_name="while"}
  %reshape.1324 = f32[128,16]{1,0} reshape(f32[128,16]{1,0} %get-tuple-element.1303), metadata={op_name="XLA_Retvals"}
  %tuple.1325 = (f32[128,16]{1,0}) tuple(f32[128,16]{1,0} %reshape.1324), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1326 = f32[128,16]{1,0} get-tuple-element((f32[128,16]{1,0}) %tuple.1325), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1290 = f32[128,16]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=7, metadata={op_type="While" op_name="while"}
  %reshape.1327 = f32[128,16]{1,0} reshape(f32[128,16]{1,0} %get-tuple-element.1290), metadata={op_name="XLA_Retvals"}
  %tuple.1328 = (f32[128,16]{1,0}) tuple(f32[128,16]{1,0} %reshape.1327), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1329 = f32[128,16]{1,0} get-tuple-element((f32[128,16]{1,0}) %tuple.1328), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1296 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=13, metadata={op_type="While" op_name="while"}
  %reshape.1330 = f32[128]{0} reshape(f32[128]{0} %get-tuple-element.1296), metadata={op_name="XLA_Retvals"}
  %tuple.1331 = (f32[128]{0}) tuple(f32[128]{0} %reshape.1330), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1332 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1331), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1297 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=14, metadata={op_type="While" op_name="while"}
  %reshape.1333 = f32[128]{0} reshape(f32[128]{0} %get-tuple-element.1297), metadata={op_name="XLA_Retvals"}
  %tuple.1334 = (f32[128]{0}) tuple(f32[128]{0} %reshape.1333), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1335 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1334), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1287 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=4, metadata={op_type="While" op_name="while"}
  %reshape.1336 = f32[128]{0} reshape(f32[128]{0} %get-tuple-element.1287), metadata={op_name="XLA_Retvals"}
  %tuple.1337 = (f32[128]{0}) tuple(f32[128]{0} %reshape.1336), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1338 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1337), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1294 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=11, metadata={op_type="While" op_name="while"}
  %reshape.1339 = f32[144,128]{1,0} reshape(f32[144,128]{1,0} %get-tuple-element.1294), metadata={op_name="XLA_Retvals"}
  %tuple.1340 = (f32[144,128]{1,0}) tuple(f32[144,128]{1,0} %reshape.1339), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1341 = f32[144,128]{1,0} get-tuple-element((f32[144,128]{1,0}) %tuple.1340), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1295 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=12, metadata={op_type="While" op_name="while"}
  %reshape.1342 = f32[144,128]{1,0} reshape(f32[144,128]{1,0} %get-tuple-element.1295), metadata={op_name="XLA_Retvals"}
  %tuple.1343 = (f32[144,128]{1,0}) tuple(f32[144,128]{1,0} %reshape.1342), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1344 = f32[144,128]{1,0} get-tuple-element((f32[144,128]{1,0}) %tuple.1343), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1286 = f32[144,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=3, metadata={op_type="While" op_name="while"}
  %reshape.1345 = f32[144,128]{1,0} reshape(f32[144,128]{1,0} %get-tuple-element.1286), metadata={op_name="XLA_Retvals"}
  %tuple.1346 = (f32[144,128]{1,0}) tuple(f32[144,128]{1,0} %reshape.1345), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1347 = f32[144,128]{1,0} get-tuple-element((f32[144,128]{1,0}) %tuple.1346), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1300 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=17, metadata={op_type="While" op_name="while"}
  %reshape.1348 = f32[128]{0} reshape(f32[128]{0} %get-tuple-element.1300), metadata={op_name="XLA_Retvals"}
  %tuple.1349 = (f32[128]{0}) tuple(f32[128]{0} %reshape.1348), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1350 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1349), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1301 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=18, metadata={op_type="While" op_name="while"}
  %reshape.1351 = f32[128]{0} reshape(f32[128]{0} %get-tuple-element.1301), metadata={op_name="XLA_Retvals"}
  %tuple.1352 = (f32[128]{0}) tuple(f32[128]{0} %reshape.1351), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1353 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1352), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1289 = f32[128]{0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=6, metadata={op_type="While" op_name="while"}
  %reshape.1354 = f32[128]{0} reshape(f32[128]{0} %get-tuple-element.1289), metadata={op_name="XLA_Retvals"}
  %tuple.1355 = (f32[128]{0}) tuple(f32[128]{0} %reshape.1354), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1356 = f32[128]{0} get-tuple-element((f32[128]{0}) %tuple.1355), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1298 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=15, metadata={op_type="While" op_name="while"}
  %reshape.1357 = f32[256,128]{1,0} reshape(f32[256,128]{1,0} %get-tuple-element.1298), metadata={op_name="XLA_Retvals"}
  %tuple.1358 = (f32[256,128]{1,0}) tuple(f32[256,128]{1,0} %reshape.1357), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1359 = f32[256,128]{1,0} get-tuple-element((f32[256,128]{1,0}) %tuple.1358), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1299 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=16, metadata={op_type="While" op_name="while"}
  %reshape.1360 = f32[256,128]{1,0} reshape(f32[256,128]{1,0} %get-tuple-element.1299), metadata={op_name="XLA_Retvals"}
  %tuple.1361 = (f32[256,128]{1,0}) tuple(f32[256,128]{1,0} %reshape.1360), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1362 = f32[256,128]{1,0} get-tuple-element((f32[256,128]{1,0}) %tuple.1361), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1288 = f32[256,128]{1,0} get-tuple-element((s32[], s32[], s32[], f32[144,128]{1,0}, f32[128]{0}, /*index=5*/f32[256,128]{1,0}, f32[128]{0}, f32[128,16]{1,0}, f32[16]{0}, f32[], /*index=10*/f32[], f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, f32[128]{0}, /*index=15*/f32[256,128]{1,0}, f32[256,128]{1,0}, f32[128]{0}, f32[128]{0}, f32[128,16]{1,0}, /*index=20*/f32[128,16]{1,0}, f32[16]{0}, f32[16]{0}) %tuple.1282), index=5, metadata={op_type="While" op_name="while"}
  %reshape.1363 = f32[256,128]{1,0} reshape(f32[256,128]{1,0} %get-tuple-element.1288), metadata={op_name="XLA_Retvals"}
  %tuple.1364 = (f32[256,128]{1,0}) tuple(f32[256,128]{1,0} %reshape.1363), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.1365 = f32[256,128]{1,0} get-tuple-element((f32[256,128]{1,0}) %tuple.1364), index=0, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.1366 = (f32[], f32[], f32[16]{0}, f32[16]{0}, f32[16]{0}, /*index=5*/f32[128,16]{1,0}, f32[128,16]{1,0}, f32[128,16]{1,0}, f32[128]{0}, f32[128]{0}, /*index=10*/f32[128]{0}, f32[144,128]{1,0}, f32[144,128]{1,0}, f32[144,128]{1,0}, f32[128]{0}, /*index=15*/f32[128]{0}, f32[128]{0}, f32[256,128]{1,0}, f32[256,128]{1,0}, f32[256,128]{1,0}) tuple(f32[] %get-tuple-element.1308, f32[] %get-tuple-element.1311, f32[16]{0} %get-tuple-element.1314, f32[16]{0} %get-tuple-element.1317, f32[16]{0} %get-tuple-element.1320, /*index=5*/f32[128,16]{1,0} %get-tuple-element.1323, f32[128,16]{1,0} %get-tuple-element.1326, f32[128,16]{1,0} %get-tuple-element.1329, f32[128]{0} %get-tuple-element.1332, f32[128]{0} %get-tuple-element.1335, /*index=10*/f32[128]{0} %get-tuple-element.1338, f32[144,128]{1,0} %get-tuple-element.1341, f32[144,128]{1,0} %get-tuple-element.1344, f32[144,128]{1,0} %get-tuple-element.1347, f32[128]{0} %get-tuple-element.1350, /*index=15*/f32[128]{0} %get-tuple-element.1353, f32[128]{0} %get-tuple-element.1356, f32[256,128]{1,0} %get-tuple-element.1359, f32[256,128]{1,0} %get-tuple-element.1362, f32[256,128]{1,0} %get-tuple-element.1365), metadata={op_name="XLA_Retvals"}
}
)";

#endif  // TENSORFLOW_COMPILER_PLUGIN_POPLAR_TESTS_HLO_SAMPLES_RNN_HLO_H_
