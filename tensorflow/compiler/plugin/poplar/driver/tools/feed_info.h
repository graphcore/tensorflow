/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#ifndef TENSORFLOW_COMPILER_PLUGIN_POPLAR_DRIVER_TOOLS_FEED_INFO_H_
#define TENSORFLOW_COMPILER_PLUGIN_POPLAR_DRIVER_TOOLS_FEED_INFO_H_

#include <set>
#include <string>

#include "absl/container/flat_hash_map.h"
#include "tensorflow/compiler/plugin/poplar/driver/poplar_feed_config.pb.h"

namespace xla {
namespace poplarplugin {
// Feed informations in canonical form generated by the compiler and used by the
// PoplarExecutableCore.
struct CanonicalFeedInfo {
  CanonicalFeedInfo(const PoplarFeedConfig& config, const Shape& shape)
      : config(config), shape(shape) {}
  CanonicalFeedInfo() = delete;

  bool operator<(const CanonicalFeedInfo& rhs) const {
    return config.feed_id() < rhs.config.feed_id();
  }

  const PoplarFeedConfig config;
  const Shape shape;
};

// Feed informations which have been translated for a particular
// PoplarExecutable which shares PoplarExecutableCore with other
// PoplarExecutables.
struct TranslatedFeedInfo {
  TranslatedFeedInfo(const std::string& stream_prefix,
                     const CanonicalFeedInfo& canonical_info)
      : stream_prefix(stream_prefix), canonical_info(canonical_info) {}
  TranslatedFeedInfo() = delete;

  bool operator<(const TranslatedFeedInfo& rhs) const {
    return stream_prefix < rhs.stream_prefix;
  }

  const std::string stream_prefix;
  const CanonicalFeedInfo canonical_info;
};

using CanonicalOutfeedInfos = std::set<CanonicalFeedInfo>;
using CanonicalInfeedInfos = std::set<CanonicalFeedInfo>;
using TranslatedOutfeedInfos = std::set<TranslatedFeedInfo>;
using TranslatedInfeedInfos = std::set<TranslatedFeedInfo>;
}  // namespace poplarplugin
}  // namespace xla

#endif  // TENSORFLOW_COMPILER_PLUGIN_POPLAR_DRIVER_TOOLS_FEED_INFO_H_
